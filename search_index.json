{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["again.","book,","comment,","convenience.","dean","discuss里的高分答案，同时也参考了一些其他教材和优质博客。由于年代有点久，之前笔记都是手写的，如果不小心忘记了标注出处，请发评论，发邮件，发issue，发pr,","don't","down","dream","dure","email,","first","hesit","http://deanwen.com","introduct","issue,","know.","leetcod","maker","me@deanwen.com","miss","multipl","need","notes,","pleas","practice.","pull","reference.","request,","resources,","see","send","so,","somehow","start","summari","thank","thoughts,","updat","w.","whatev","write","|","发whatever，我会立马加上。","学习笔记","最近因为种种原因又要开始刷题了。所以把之前leetcode和九章算法视频过程中的笔记总结一下了，很多地方参考了九章算法的代码和讲义，leetcod"],"math/math.html":["%","(i","(int","(low","(n","(num","(x)","*","**not**","**注意","*if","+","+2i,","+3i","...","/","//mark","0","0,","1","1)","1;","1];","2","2)","2;","=","==","[3,","[sqrt(x),","\\*","a*b","b","b,","boolean","boolean[]","boolean[num","both","check","countprimenumberlessthan(int","countprimenumberlessthan(x)","detail","divid","doubl","end","equal","eratosthen","explan","factor","findallperfectsqurenum(x,","greater","high","high;","http://www.algolist.net/algorithms/number_theoretic/sieve_of_eratosthen","i,","input","int","integ","isprime(int","isprime(x)","it'","less","linkedlist<>();","list","low","mark","math","math.ceil(math.sqrt(y));","math.floor(math.sqrt(x));","mid","mid)","mysqrt(int","mysqrt(x)","n","n)","n,","need","new","non","nonprim","num","num)","num;","number","number,","o(logn)","o(sqrt(n))","o(sqrt(y)","odd","on","overflow**","perfectsqurenum","pow(doubl","pow(x,","prime","prime,","public","re","relat","return","root","root.*","smallest","sqrt","sqrt(x)","sqrt(x))","sqrt(x),","sqrt(x)?","sqrt(x)],","sqrt(y)]","squar","start","summari","test","those","true","true;","two","x","x,","x.","y)","y]区间","{","||","}","}els","~","中每个质数的倍数，然后找出剩余的数","之间，那么他们的平方数一定在[x,","利用siev","利用sqrt","利用二分查找降低复杂度到","在","常见题型","手动实现求平方根，利用二分查找实现o(logn)","把时间复杂度降低到o(n)","整除，所以都不是质数","正负数指数n**","注意边界条件","的等效性降低循环区间","简单来说","考点就是二分查找","若果一个数","都可以被"],"string/substring-related.html":["\"\";","\"abc\",","\"adobecodebanc\",","\"banc\"","(!dict.containskey(c))","(!map.containskey(c))","(char","(counter","(dict.get(c2)","(end","(length","(string","(tail","*/}","+","//step","0)","0);","0,","0;","0;//","0;//check","0;//two","1)","1);","10","2:","3:",":",";","=","==",">","?","arr","arr)","arr[head];","ask","assist","begin","below.","c","c2","char","char[]","charact","characters.","complex","contain","counter","counter++;","dict","dict.get(c)","dict.get(c1)","dict.get(c2)","dict.put(c,","dict.put(c1,","dict.put(c2,","end","example:","except","find","findsubstr","for()","found,","gener","given","guarante","hand,","hashmap","hashmap<>();","head","head)","head);","head++;","head;","here","https://discuss.leetcode.com/topic/30941/her","idea","illegalargumentexception(\"no","initi","inner","insid","int","integer.max_valu","integer.max_value;","integer.min_value;","length","length);","length;","line","longest","longestsubstring(str","loop","loop.","map","map.get(c)","map.put(c,","math.max(length,","maximum","mention","minimum","minwindow(str","move","need","new","o(n).","on","pointer","pointers.","pointers:","problem","problem,","public","reference:","relat","repeat","repres","restrictions.","return","s","s)","s,","s.charat(head);","s.substring(start,","s.tochararray())","s.tochararray();","satisfi","smaller","solv","start","string","string\");","substr","substring,","such","summar","t","t)","t,","t.length();","t.tochararray())","tail","tail++;","templat","thing","throw","two","updat","us","valid","valid.","way","whether","while(tail","window","window.","without","{","{/*","}","当count达到子串长度，说明之前遍历的这些有符合条件的串，用一个pre指针帮忙找，pre指针帮忙找第一个在hashmap中存过的，并且找到后给计数加1后的总计数是大于0的，判断是否为全局最小长度，如果是，更新返回字符串res，更新最小长度，如果不是，继续找。","思路是利用hashmap来存dict，然后遍历整个母串。因为这里是要求最短的包含子串的字符串，所以中间是可以允许有非子串字符的，当遇见非子串字符而count又没到子串长度时，可以继续走。","高手在民间"],"string/text-justification.html":["\"","\");","\"an\",","\"exampl","\"example\",","\"is\",","\"justification.","\"justification.\"]","\"of\",","\"text\",","\"thi","%","'","(i","(l","(left","/","//下面这个for循环作用于一行只有一个单词还没填满一行的情况","//因为尝试的words[i]失败了，所以间隔数减1.此时判断剩余的间隔数是否大于0","//所以当前这个单词不能算作这行，所以间隔就减少一个","//是间隔的倍数（为啥要减1，因为尝试当前words[i]后发现比l长了，","0)","0){","0;","1","1);","1);//不是倍数的话还要计算","16.",";","=","==",">","[","[\"this\",","]","an\",","approach;","array","arraylist();","as:","assign","between","case,","case?","cases.","cases:","charact","characters.","click","contain","corner","count","count)","distribut","divid","each","empti","evenli","exactli","example,","exce","extra","extranum","for(int","format","fulli","fulljustify(string[]","ganker","given","greedi","guarante","if(i","if(word","insert","int","is,","j","justif","justifi","justified.","l","l)","l){","l,","l:","last","last;","left","length","length.","line","line.","list","mani","more","necessari","new","note:","null","number","on","pack","pad","possible.","public","re","res;","return","right)","right.","show","slot","space","spacenum","str","str.append(\"","str.length();","stringbuild","stringbuilder();","such","test","text","text\",","text,","word","word.","words,","words.length","words.题目链接","words:","{","||","}","“这道题属于纯粹的字符串操作，要把一串单词安排成多行限定长度的字符串。主要难点在于空格的安排，首先每个单词之间必须有空格隔开，而当当前行放不下更多的","个细节就是最后一行不需要均匀分配空格，句尾留空就可以，所以要单独处理一下。时间上我们需要扫描单词一遍，然后在找到行尾的时候在扫描一遍当前行的单","前面的间隔里面。实现中我们维护一个count计数记录当前长度，超过之后我们计算共同的空格量以及多出一个的空格量，然后将当行字符串构造出来。最后一","单词并且字符又不能填满长度l时，我们要把空格均匀的填充在单词之间。如果剩余的空格量刚好是间隔倍数那么就均匀分配即可，否则还必须把多的一个空格放到","后行数r，则是o(r*l)）。代码如下：”","思路来自code","词，不过总体每个单词不会被访问超过两遍，所以总体时间复杂度是o(n)。而空间复杂度则是结果的大小（跟单词数量和长度有关，不能准确定义，如果知道最"],"sort/introduction.html":["sort"],"sort/merge-sort.html":["!=","&&","(fast.next","(head","(l1","(l1.val","(list","(listnod","(lists.length","*","*/","+","/","/*","//arrays.copyofrang","0)","0,","1)","2)","2)),","2,","2分的思想，每次递归取一半,","=","==","[startindex,","aces/dec","complex","constant","curr","curr.next","curr;","dummi","dup","endindex)","fast","fast.next.next","fast.next.next;","head)","head.next","head;","heap","k","l1","l1,","l1.next;","l1;","l2","l2)","l2,","l2.next;","l2.val)","left","link","list","list,","listnod","listnode(0);","lists)","lists.length","lists.length)));","lists[0];","lists[1]);","log","merg","merge(lists[0],","merge(mergeklists(arrays.copyofrange(lists,","merge(mergesort(l1),","merge(mergesort(left),","merge2unsortedlist","mergeklists(arrays.copyofrange(lists,","mergeklists(listnode[]","mergesort","mergesort(l2));","mergesort(right));","n","n)","new","null","null)","null){","null;","o(n","o(nlogk)","object不稳定。","order","overal","public","quick","relat","return","right","routine,","size","slow","slow.next","slow.next;","sort","sort。这道题用来模拟merg","sort，heap","sort，quick","space","space,","sum","summari","t/c:","time","unsort","us","{","{//remov","||","}","}els","不是constant","不适用，","为list","利用快慢指针找中点，分别归并排左右","因为sort","常见题型","是否有duplic","次操作，n","注意","由于是link","考点：merg","考点：mergesort的merge部分","考点：递归＋merg","需要logn","首先时间复杂度为o(nlogn)的排序算法就3种，"],"bs/binary-search.html":["(left","(递归","+","...","0;","1","1;","5","5,","=","==",">","[1,1,1,1,1,5]","[1,1,1,1,5]","[1,1,5,1,1,1]","array","basic","binari","binarysearch(int[]","boolean","bound","case","case:","check","differ","false;","if(nums[left]","index","int","integ","left","left++;","mid","number","nums,","nums.length","nums[left]","nums[left＝0]","nums[mid=3]","nums[mid]){","nums[right]","o(n)","on","overflow","pointer","public","relat","return","right","rotat","search","search,","sort","summari","t/c","target)","tips:","vs","worst","{","}","全部是","分段有序，分段搜索","利用数组有序的特性实现o(logn)","到","包括target在内可能还有不同的数存在于nums[left]","含有duplicates进行binari","常见题型","是否有duplic","注意","相等(==)的case,","要move","要区别对待","非递归)"],"bs/median-of-two-sorted-arrays.html":["!=","(double)","(double)(x+y)/2;","(m+n)).","(total%2","+","//k传得是第k个，index实则k","0)","0,","1","1,","1;","1]","1])","1];","1]==b[k/2","1]>b[k/2","1]和b[k/2","1]的大小。","1]，就做之前对称的操作就好。","1]，那么这个数就是两个数组中第k大的数。","=","a,","a.length;","a[],","a[astart+parta","a[k/2","aend","aend,","array","arrays.","array中的第k大（从1开始数）的数。因而等价于寻找并判断两个sort","array中第k/2（从1开始数）大的数。","astart","astart,","b","b,","b.length;","b[])","b[bstart+partb","b[k","bend","bend,","bstart","bstart,","complex","doubl","find","findkth(a,","findkth(a,astart,aend,b,bstart+partb,bend,k","findkth(b,bstart,bend,a,astart,aend,k);","findkth(int[]","findmediansortedarrays(int","if(a[astart+parta","if(k==1)","if(m==0)","if(m>n)","int","int[]","k","k)","m","m+n;","math.min(a[astart],b[bstart]);","math.min(k/2,m);","median","n","o(log","overal","parta","parta;","partb","partb);","public","respectively.","return","run","size","solut","sort","static","time","total","total/2);","total/2+1);","two","x","y","{","}","为了能保证上面的分半操作正确，需要保证a数组的长度小于b数组的长度。","同时，在返回结果时候，注意精度问题，返回double型的就好。","因为除法是向下取整，并且页为了方便起见，对每个数组的分半操作采取：","因此，在计算中位数median时候，需要根据奇偶分类讨论。","如果","如果a[k/2","当然，边界条件页不能少，需要判断是否有一个数组长度为0，以及k==1时候的情况。","思路：计算有限个数的数据的中位数的方法是：把所有的同类数据按照大小的顺序排列。如果数据的个数是奇数，则中间那个数据就是这群数据的中位数；如果数据的个数是偶数，则中间那2个数据的算术平均值就是这群数据的中位数。","我们需要判断a[k/2","特殊化到求median，那么对于奇数来说，就是求第(m+n)/2+1（从1开始数）大的数。","而对于偶数来说，就是求第(m+n)/2大（从1开始数）和第(m+n)/2+1大（从1开始数）的数的算术平均值。","解决此题的方法可以依照：寻找一个union","这样整个问题就迎刃而解了。","那么如何判断两个有序数组a,b中第k大的数呢？"],"bt/summary.html":["!=","!lefttree.isempty())","&&","(!queue.isempty())","(curr","(curr.left","(int","(left","(node","(node.left","(o(n)","(prev.right","(right","(root","(treenod","(利用queue.size()移动指针)","*","*/","+","/*","//both","//find","//one","//onli","0;","1.","2.","3.","3种情况","=","==",">","[all","a)","addfirst","ancestor","ancestor(lca)","b)","bf","binari","both","case","children，root","click","common","condit","curr","curr)","curr.left;","curr.right;","dfs,","dfs模版","dig","dummynod","e.g.","exist","find","given","here","inorder,","int","iter","iterative利用stack实现","lca","lca(node1,","left","left;","level","linkedlist<>();","linkedlist>();","list","list>","lowest","morri","new","node","node.right;","node1","node1,","node2)","node2,","nodes.","null","null)","null;","o(1)空间","o(1)空间复杂度，即只能使用常数空间；","o(n)","on","order","parent","pointer,","postord","preorder,","prev","prev.right","prev.right;","provid","public","queue","queue.offer(root);","queue.size();//us","re","relat","res.add(curr.val);","res.addfirst(node.val);","res;","return","right","right,","right.","right;","root","root)","root.left);","root.right","root.right);","root;","search","size","space)","stack","stack.pop();","stack.push(node.left);","stack<>();","stop","substree][root];","subtree][al","summari","time,","travers","tree","tree.","treenod","tree）的概念。在morris方法中不需要为每个节点额外分配指针指向其前驱（predecessor）和后继节点（successor），只需要利用叶子节点中的左右空指针指向某种顺序遍历下的前驱节点或后继节点就可以了","two","vs","{","{//2.a)","{//2.b)","||","}","中续遍历","二叉树的形状不能被破坏（中间过程允许改变其形状）","利用linkedlist","利用stack记录左孩子，因为tree自顶向下的顺序是一定的","变形preorder，再逆序输出结果。","如果right为空，pop","如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。","如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。","如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。","如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。","常考","栈顶的左孩子。","用stack记录所有left","等价于","考点：df","要使用o(1)空间进行遍历，最大的难点在于，遍历到子节点的时候怎样重新返回到父节点（假设节点中没有指向父节点的p指针），由于不能用栈作为辅助空间。为了解决这个问题，morris方法用到了线索二叉树（thread","逆序插入，从右往左看的话","重复以上1、2直到当前节点为空。"],"bt/binary-tree-in-order-traversal.html":["!=","!stack.isempty())","(root","//df","//iter","=","==","arraylist","arraylist();","binari","class","df","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","given","inord","inordertraversal(treenod","left","list","new","nodes'","null","null)","order","order顺序是","postord","preorder","privat","public","result","result)","result);","result.add(root.val);","result;","return","return;","right如果当前root不为空，压入stack，令其为左孩子，如果其左孩子为空，就pop","root","root)","root,","root.left;","root.right;","root，输出root.val,","solut","stack","stack();","stack.pop();","stack.push(root);","travers","tree,","values.","void","while(root","{","||","}","}els","令其等于有孩子。","相似题目：","非递归iterativein"],"bt/lowest-common-ancestor.html":["!=","&","&&","(i","(list1.get(i)","(node","(root","(root.val",")",",","0","0;","1,","1;",":","=","==",">",">=","?","ancestor","arraylist","arraylist();","case：","common","conquer","corner","getlca(root.left,","getlca(root.right,","getlca(treenod","getpath2root(node1);","getpath2root(node2);","getpath2root(treenod","i,","if(left","if(root","int","j","j;","left","list","list.add(node);","list1","list1.get(i).parent;","list1.get(i+1);","list1.size()","list2","list2.get(j))","list2.size()","list;","lowest","lowestcommonancestor(treenod","new","node","node)","node.parent;","node1","node1,","node1.v","node2","node2)","node2);","node2){","node2.val)","null","null)","null;","privat","public","return","right","right;","root","root,","root.val","root;","treenod","{","||","}","反之向右找，如果node1","如果一个点为令一个点的祖先，那么这个点就是lca","如果不是bst，看看提不提供parent指针。divid","如果有parent指针，分别遍历left","的路径，找到公共点","首先判断tree是不是bst,如果为bst，按照bst定义去搜索，如果当前遍历时，root比两个点都大，那么就往根的左边找"],"bt/binary-tree-zigzag-level-order-traversal.html":["%","(curr","(level","(result.size()","+","/","//df","//odd","//refer","0)","0);","1);","15","2","20","3","7","9","=","==","[","[15,7]","[20,9],","[3],","\\","]","arraylist>();","as:","binari","class","collect","collection.add(0,","collection.add(curr.val);","curr,","curr.left,","curr.right,","curr.val);","current","directli","example:","given","int","left","level","level)","levelord","linkedlist();","list","list,","list>","manipul","new","newlevel","normal","null)","order","output","output,","oven","privat","public","respectively;","result","result,","result.add(newlevel);","result.get(level);","result;","return","return;","revers","right","root)","root,","solut","travel(list>","travel(result,","travers","traversal]的变种，总体思想用dfs去遍历每一层，需要注意的地方就是zigzag","tree","treenod","void","zigzag","zigzaglevelorder(treenod","zigzag关键要在这里判断当前层为奇数还是偶数，然后按要求输出","{","{3,9,20,#,#,15,7},","}","}els","思路：","最后ac结果","要求奇数层逆序输出，偶数层正场输出，用linkedlist来存每一层的结果，因为可以从头插入，也可以从未插入，插入复杂度为o(1)。总体复杂度为o(n)，最后在用个arraylist存每一层的结果就好了。","这道题实质上还是[binari"],"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":["!=","(inorder.length","(instart","(int","+","0,","1","1);","1,","1245367中序遍历","2","3","4","4251637后续遍历","4526731","5","6","7","=",">","array,","binari","buildtree(int[]","buildtreehelper(inorder,","buildtreehelper(int[]","class","construct","end,","findroot(inorder,","findroot(int[]","given","inend)","inend,","inord","inorder,","inorder.length","instart","instart,","int","int[]","key)","new","null;","order","posit","post","postend","postend)","postord","postorder)","postorder,","postorder.length","postorder.length)","poststart","poststart,","privat","public","return","right,","root","root.left","root.right","root.val);","root;","solut","start,","start;","travers","tree,","tree.","treenod","treenode(postorder[postend]);","{","|","}","前序遍历","可以看到，后续遍历中，root永远都是最后一位，所以先在后续遍历中找到root，然后再找到root在中需遍历中的位置，分成左右两边，left","思路：","要知道如何构建二叉树，首先我们需要知道二叉树的几种遍历方式，譬如有如下的二叉树：","重复上述过程，通过后续遍历找到根节点，然后在中序遍历数据中根据根节点拆分成两个部分，同时将对应的后序遍历的数据也拆分成两个部分，重复递归，就可以得到整个二叉树了"],"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":["!=","(instart","(int","(preorder.length","+","0,","1);","1,","=",">","array,","binari","buildtree(int[]","buildtreehelper(inorder,","buildtreehelper(int[]","class","construct","end,","findroot(inorder,","findroot(int[]","given","inend","inend)","inend,","inord","inorder)","inorder,","inorder.length","inorder.length)","instart);","instart,","int","int[]","key)","new","null;","order","posit","postord","pre","preend","preend)","preend);","preorder,","preorder.length","prestart","prestart,","privat","public","return","right,","root","root.left","root.right","root.val);","root;","solut","start,","start;","travers","traversal]类似，几乎就是完全一样,","tree","tree,","tree.","treenod","treenode(preorder[prestart]);","{","}","只是把后续遍历换成了前序。所以在前续遍历中，root永远都是第一位，所以先在前续遍历中找到root，然后再找到root在中需遍历中的位置，分成左右两边，left","思路：这道题和[construct","重复上述过程，通过前续遍历找到根节点，然后在中序遍历数据中根据根节点拆分成两个部分，同时将对应的后序遍历的数据也拆分成两个部分，重复递归，就可以得到整个二叉树了。"],"dfs/introduction.html":["df"],"dfs/permutation-combination.html":["!=","&&","(","(int","(int[]","(list>","(num","(temp.size()",")**","*","**boolean[]","**if","**模版程序，辅助递归树理解**","**注意duplicates**","*/","+","/*","0","0)","0;","1);","1]","1])","1]))","=","==",">",">0","[1,2,3,4,5]","boolean[]","combin","combination(res,","continue;","duplic","except","false;","helper","helper(res,","illegalargumentexception(\"invalid","index","index)","index;","input\");","input,","int","int[]","linkedlist(temp));","linkedlist<>(temp));","linkedlist>();","list","list<>();","list>","new","null","nums)","nums);","nums,","nums.length","nums.length){","nums[i","nums[i]","o(n!)","overal","permut","permutation/combin","privat","public","re","relat","res,","res.add(new","res;","return","return;","summari","t/c","temp","temp,","temp.add(nums[i]);","temp.remove(temp.size()","throw","true;","visited)","visited**","visited[i","visited[i]","void","{","||","}","全排列","利用df","常见题型","模版程序，辅助递归树理解","注意duplic","组合问题","若有duplicates,","递归的方法去排列所有情况，时间复杂度为n!","需要辅助数组判断每一个integer的可用性"],"dfs/combination-sum.html":["&&","(a1,","(c)","(candid","(ie,","(includ","(int","(item));","(t),","(target","+",",","0","0)","0);","0,","1);","1,","1.","1]","1])","1])//deal","2,","2,3,6,7","2.","3]","7,","=","==","[2,","[7]","a1","a2","a2,","ak)","ak).","arraylist();","arraylist(item));","arraylist>();","arrays.fill(visited,","arrays.sort(candidates);","boolean","boolean[]","boolean[candidates.length];","c","candid","candidates,","candidates.length","candidates[i","candidates[i]","candidates[i];","chosen","class","combin","combinations.","combinationsum(int[]","combinationsum2(int[]","contain","continue;","descend","dupic","duplic","element","example,","false)","false);","false;","find","given","helper(list>","helper(result,","i);","if(!result.contains(item))","if(i>0","ii要求，组合中每个元素只能用一次，就排除了之前每个元素可以无限次使用的情况。就可以参照全排列的模版。用一个visited[]去标记元素是否被使用过。","int","int[]","integers.","is:","item","item,","item.add(candidates[i]);","item.remove(item.size()","list","list>","new","newtarget","newtarget,","non","note:","null","number","order.","posit","privat","public","repeat","result","result,","result.add(new","result;","return","return;","same","set","solut","start)","start,","start;","sum","sumgiven","t.","target","target)","target,","times.","true;","uniqu","unlimit","up版combin","visited)","visited);","visited[]","visited[i","visited[i]","void","{","{//deal","||","}","…","≤","同时，这道题还要判断重复解。两个方法解决","完整代码如下","思路：此题套用排列组合模版，是用dfs找解决方案问题，值得注意这道题：","所以，每次跳进递归不用都往后挪一个，还可以利用当前的元素尝试。","此题还有的follow"],"dfs/generate-parenthese.html":["\"((()))\",","\"(()())\",","\"(())()\",","\"()(())\",","\"()()()\"","&&","'(',","')',left,","(left","(n","(right","*/","+","/*check","0","0)","1);","1,right);","3,","=","==",">","arraylist","arraylist();","combin","dfs(result,","dfs(result,item","example,","form","function","gener","generateparenthesis(int","given","int","is:","item","item,","left","left,","n","n)","new","pair","parenthes","parentheses,","parentheses.for","public","result","result,","result.add(new","return;","right","right)","right){","set","solut","string","string();","string(item));","well","write","{","}","原题链接","就要想到排列组合，想到dfs，先想想能不能利用排列组合的模版。其实这道题不用排列组合那个复杂，只需要利用递归模拟一下过程就可以，要点是左括号数目必须大于等于又括号的数目，因为类似“)(”","思路：一看到all","这种解是不合法的"],"dfs/n-queens.html":["\"...q\",","\"..q.\"],","\".q..\"]","\"q...\",","'.'","'q'","(can_place(row,","(col","(int","(isvalid(row,","(n","(row","(row,column)","+","//","//如果已经找到结果，则打印结果","//放置皇后","//继续探测下一行","//试探第row行每一个列","0","0;","1","1);","1,","2","4","=","==","[","[\"..q.\",","[\".q..\",","]","a[i]","arraylist","arraylist();","board","boolean","both","class","col","col)","col);","columnindex)","columnindex))","columnindex,","configur","contain","dfs(n,","distinct","each","empti","example,","exist","ii","indic","int[]","integ","isvalid(int","list","n","n)","n,","new","place(row,","placement,","print_result();","public","puzzle.","puzzle:","queen","queen(int","queen(row","queens'","queensgiven","respectively.","result","result)","result);","return","row","row)","row,","solut","solvenqueens(int","space","string[]","string[n];","two","unit","void","{","|","|.这样某个位置是否可以放置皇后的问题已经解决。然后运用递归的思想去寻找n个皇后的解，伪代码思想如下：","}","}els","–","完整代码如下","思路：把棋盘存储为一个n维数组a[n][n]，数组中第i个元素的值a[i]代表第i行的皇后位置，这样便可以把问题的空间规模压缩为一维o(n)，在判断是否冲突时也很简单，首先每行只有一个皇后，且在数组中只占据一个元素的位置，行冲突就不存在了，其次是列冲突，判断一下是否有a[i]与当前要放置皇后的列j相等即可。至于斜线冲突，通过观察可以发现所有在斜线上冲突的皇后的位置都有规律即它们所在的行列互减的绝对值相等，即|","相似题目n","解法完全一样，只需要返回result.size()就好了"],"dfs/sudoku-solver.html":["'.'","'.')","'.'.you","'1'","'1';","'9'","(board","(board[row][col]","(char","(col","(row","+",",0);","//current","//if","//tri","0","0)","0);","1,","9)","=","==","assum","board)","board,","board.length","board[0].length","boolean","cell","cells.empti","charact","class","col)","current","empti","fill","filled,","fulli","go","helper(board,","helper(char[][]","indic","int","next","null","num","on","privat","program","public","puzzl","return","return;","row","row,","solut","solution.","solv","solver","solverwrit","solvesudoku(char[][]","sudoku","sudoku模版作为子函数。然后逐行，逐列的去试。","sudoku，可以用valid","true","true;","uniqu","valid,return","void","{","||","}","~","完整代码如下","思路：首先此类问题是经典np问题，时间复杂度上就不要纠结了。肯定是指数次。主题思想和n－queens类似，就是一个一个试，行就填，不行就该回'.'空，回溯之～首先，分割子问题，要判断每个数是不是valid"],"dfs/word-break-ii.html":["\"","\"\",","\"and\",","\"cat","\"cats\",","\"catsanddog\",dict","\"dog\"].a","\"sand\",","(int","(s","(start","(workbreakcheck(s,","+","/*","/*[word","//","//first","//if","0)","0,","0;","1,","1?","1];//whi","=","==","[\"cat","[\"cat\",","add","arraylist","arraylist();","arrays.fill(result,","bodi","boolean","boolean[]","boolean[s.length()","bother","break","break]只需要判断是存不存在就可以了，这道题还要求出所有合法的string，","break]的求所有结的版本，[word","break]的结果跑一遍，如果字符串在dict中，在进行dfs暴力求解，一定程度上可以优化速度,","case","case.","check","class","construct","df","dict","dict)","dict))","dict,","dictionari","dog\",","dog\"]原题链接","don't","each","end","example,","false);","false;","for(str","ganker比较好理解","given","hashmap>();","helper(s,","helper(str","if(memo.containskey(s))","if(n","ii","instanti","int","item","item,","item:tmp){","item;","list","map","map>","memo);","memo){","memo.get(s);","memo.put(s,","n","new","newitem","newitem,","note:","null","object","onc","possibl","privat","public","queen*/","result","result)","result);","result.add(item);","result;","result[0]","return","return;","reus","s","s,","s.length()","s.length())","s.length();","sand","seem","sentenc","sentences.for","set","solut","space","start,","start;","str","str.tostring();","string","stringbuild","stringbuilder();","subfix","such","template]*/","test","tmp","true;","valid","void","word","word.return","wordbreak(str","wordbreakcheck(str","wordbreakhelper(prefix,","wordbreakhelper(s,dict,map);","wordbreakhelper(str","{","||","}","}els","一想到求所有，立马联想到dfs，排列组合啊的递归模版。这道题，首先可以用[word","或超时的情况。目前此解法超时，leetcode不知道加了什么鬼test","无限dfs栈溢出","而且防止变态超长string","解法1参照code","解法2:参照九章","这道题是[word","高大上ac版本"],"dfs/word-search.html":["!=","\"abcb\",","\"abcced\",","\"adjacent\"","\"see\",","(board","(board[i][j]","(int","(visited[i][j])","(word.length()",")","+","0","0)","0;","1,","2d","=","==",">","[","[\"abce\"],","[\"adee\"]","[\"sfcs\"],","]","adjac","board","board,","board.length","board[0].length","boolean","boolean[][]","boolean[board.length][board[0].length];","cell","cell,","class","construct","dfs(board,","example,","exist","exist(char[][]","false.","false;","find","given","grid.","horizont","i,","j","j,","letter","more","neighboring.","new","null","once.原题链接","public","result","result;","return","same","search","sequenti","solut","start","string","those","true,","true;","us","vertic","visit","visited)","visited);","visited[i][j]","word","word)","word,","word.charat(start)){","{","||","}","思路：这道题分析看，就是一个词，在一行出现也是true，一列出现也是true，一行往下拐弯也是true，一行往上拐弯也是true，一列往左拐弯也是true，一列往右拐弯也是true。所以是要考虑到所有可能性，基本思路是使用dfs来对一个起点字母上下左右搜索，看是不是含有给定的word。还要维护一个visited数组，表示从当前这个元素是否已经被访问过了，过了这一轮visited要回false，因为对于下一个元素，当前这个元素也应该是可以被访问的"],"bfs/anagrams.html":["(arraylist)iter.next();","(int","(item.size()","//","0;","1","1)","=","==","==0)",">","add","anagram","anagrams(string[]","array","arraylist","arraylist();","contain","data","given","group","hashmap","hashmap>","hashmap>();","if(str","item","iter","key,","list","map","map.get(strkey);","map.put(strkey,","map.put(strkey,temp);","map.values().iterator();","new","null","process","public","re","result","result.addall(item);","result;","return","string","strings,","strs)","strs.length","such","temp","temp);","temp.add(strs[i]);","travers","valu","while(iter.hasnext())","write","{","||","}","}els","复杂度分析：对每个长度为k的字符串排序，时间复杂度为(o(klogk)),n个字符就是(o(nklogk)),n为数组大小，空间复杂度为o(nk)就是hashmap的大小。","就说明有anagram，返回所有的结果。还有一个关键点是如何去遍历hashmap，重写一下iterator就好了","思路：anagrams就是两个单词所包含的字符和数量都是一样的，只是顺序不同。比如[\"tea\",\"ate\",\"aet\"],","由于anagrams字符串的所有字符都是一样的，如果可以对每个字符排序，则结果一样，就可以当作key用hashmap去存，然后value就是不同的字符串没排序前的形态。最后遍历一下hashmap，valu"],"bfs/word-ladder.html":["\"cog\"","\"cog\",","\"dog\"","\"dot\"","\"hit\"","\"hot\"","(!q.isempty())","(int","(set","(string","0;","1;","5.",":","=",">","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","beginword","beginword,","bf","buildgraph","dict)","dict.remove(beginword);","dict就好了。如果要指定","distanc","endword","endword,","given:","graph,","hashmap<>();","hashset<>();","int","ladder","ladderlength(str","length","linkedlist<>();","map","map>","neighbor","new","on","privat","public","q","q.offer(beginword);","q.size();","queue","return","set","shortest","size","str","string","transform","word","wordlist","{","典型的bfs题，这道题只用求距离，所以不用建图，bfs的时候，updat","到","建立无向有权图，然后从起点dfs到终点的所有路径即可。","所有路径，那就是典型的先从终点到起点","点","点的","然后可以套用图的bfs去找距离。","通常做法可以预处理dict，build"],"dp/introduction.html":["&","(a.k.a","(x","(x,","+","/","1)","1,","2,","2］对结果无影响","3,","3]","7]",">","?","[1,","[100,","[1]","[1]与divid","[2]","[3]","[4]","\\","answer:","come","conquer区别：","consecut","count","decid","dfs:","dfs是一种实现方法approach","dp","dp只能向左向下走,","dp可以用dfs来实现也可以用loop来实现","dp是一种解题思想","dp的子问题可以有交集，分治的子问题完全独立","dynam","e.g.","f(x","f(x,","find","function:","initialization:","introduct","longest","loop","loop:","matching,","matrix","max/min","mind","naturally!","node","possibl","problem","program","see","solut","state:","string","subsequ","subset?","vs","way","y","y)","y)从哪个点来？","y)到哪个点去？f(x","y)的状态转移方程","yes/no","||","一定不是dp","一定是dfs，一定不是dp","不能sort/swap","与dfs的区别：","与递归的区别","两种状态转移思想","交换swap两个数对结果没影响，一定不是dp","什么问题不能用dp解决？","什么问题要用dp解决？","分治","初始值","利用小问题来解决大问题，记忆化搜索","动归","因为dp利用重复计算的结果，[2][3]会造成闭合回路(a.k.a","因为每个(x,y)只计算一次，所以总的时间复杂度为o(n^2)","大状态","大状态依赖小状态的计算结果","如果","如果交换［3，","定义:","实现方式有两种：df","实质上时搜索加上记忆化的功能,","小状态","待解","找出所有方案","找最大值/最小值","数组","数组/字符串/matrix","既","是否存在一种可能","求方案总数","状态代表什么？需要灵感","环)","的四点要素","终点","结果","若上下左右都可以行","起点","起点)","重点)"],"dp/summary.html":["(0,","(1≤s≤m)","(1维dp)","(2维dp)","(int","(int[]","(n","(record[nums.length][sum])","(x,","(背包问题)",")","+","0)","0;","10%","10.","11,","12.","1;","1]","1];","1];//1","1][s2.length()","1][s]","1][target","1的前i个字符","2","3,","4","40%","5,","5],","7]","7],","=",">","[2,","[s","ai,","answer","backpack","backpack.","backpack?","base","boolean[][]","boolean[nums.length","climbstairs(int","denot","dp","dynam","f","f(i)","f(i,","f(j)","f(s1.length(),","f(x,","f[0][1⋯m]=false.","f[1⋯n][0]=true;","f[i","f[i][s]","f[i−1][s]:","f[i−1][s−num[i]]:","f[n][s]","fill","fulfil","full","function:","given","grid","index","init:","init：f(i,0)","init：起点(0)","init：起点(0,0)","int","int[][]","int[m][n];","int[s1.length()","integ","introduct","item","i−1","j","j)","length","m","m,","matrix","max","mindistance(str","n","n)","new","num[i]]","nums,","program","public","re","record","record[0][0]","return","s1,","s2","s2)","s2.length())","select","sequenc","size","state:","string","sum","sum;","s−num[i]","target)","true;","two","uniquepaths(int","y)","{","||","}","不放入第i个物品，前","个物品能否取出一些体积和为","个物品能否取出一些组成体积和为s的背包。","从起点如何走来的(0,","值为true的最大","前1~n个物品组成体积和为0的背包始终为真，其他情况为假。","可以优化到o(n)","和","寻找使","常见类型","指定点","指定点(n)","放入第i个物品，前","时间复杂度：o(n)","时间复杂度：o(n^2)","时间复杂度：o(nm)","是i前一个字符","的前j个字符","的背包。","研究s1[i]和s2[j]的关系","研究最后一步怎么来的","空间复杂度：o(n)","空间复杂度：o(n^2)","空间复杂度：o(nm)","终点","表示sequenc","表示前i个位置的字符","表示前i个数，取出一些物品能否组成体积和为s的背包","配上sequenc","面试常考dp类型"],"dp/LIS-LCS.html":["\"15423760\";","\"27135460\";","&&","(int","(lcs[i","(num","(x[i]",")","+","..","//if","//longest","//print","//s2","//测试用例","0","0)","0;","0};","1","1);","1,","1;","1]","1])","1];","1][j","1][j]","1][j],","1][n","2,","3,","4,","5,","6,","7,","=","==",">",">=","answer:","args)","arrays.fill(len,","arrays.fill(pred,","class","cnt]","common","dp","dp[0]","dp[i]","dp[i])","dp[j]","dp[num.length","empti","f[0]","f[0][j]","f[i","f[i]","f[i][0]","f[i][j","f[i][j]","f[i][j]表示前s1前i个元素和s2前几个元素最长的公共序列是多少","f[i]表示前i个元素最长的递增子序列是多少","f[m][n]","f[n]","for(int","function:","getlis(int[]","i;","increas","initialization:","int","int[]","int[][]","int[m","int[n];","int[num.length];","j","j;","lcs(string","lcs[i][j","len","lis(int[]","lis/lc","longest","m","main(string[]","math.max(f[0","math.max(f[i","n","new","null","num)","num.length","num[i]","num[j];","pred","public","res;","res[","return","s1","s1,","s1.length();","s1[i]","s2","s2)","s2));","s2.length();","s[j];","sequenc","solut","state:","static","string","system.out.println(arrays.tostring(getlcs(x,y)));","system.out.println(lcs(s1,","void","x","x)","x.length;","x[i];","y","y[j])","{","{1,","{2,","||","}","典型一维dp","典型二维dp"],"dp/decode-ways.html":["!=","\"12\"","\"12\",","\"ab\"","\"l\"","&&","'0'","'0'的时候；","'a'","'b'","'z'","(1","(12).","(int","+","...","0","0;","1","1;","1;//当s.charat(0)","1]","1];","2","2)","2.","26","2;","2]",":","=","==",">","?","answer:","be","class","code","contain","decod","determin","digits,","dp","dp?","dp[0]","dp[1]","dp[i","dp[i]","dp[i]表示前i个字符一共有多少个方案","dp[s.length()]","encod","example,","follow","function:","given","if(","initialization:","int","int[]","int[s.length()","it.","letter","mapping:","messag","new","null","number","numdecodings(str","public","return","s)","s.charat(0)","s.equals(\"0\"))","s.length()","solut","state:","tips:","total","us","way","z","{","||","}","因为要求total","思路：whi","方案数目是要想到用dp","注意s以0为base，dp以1位bas","状态转移方程详细解析"],"dp/word-break.html":["\"code\"].","\"leet","\"leetcode\"","\"leetcode\",","(int","(s","+","0)","0;","1];","1]的结果，我们来获得res[i]的表达式。思路是对于每个以i为结尾的子串，看看他是不是在字典里面以及他之前的元素对应的res[j]是不是true，如果都成立，那么res[i]为tru","=","==","[\"leet\",","arrays.fill(result,","boolean","boolean[]","boolean[s.length()","break","class","code\".","determin","dict","dict)","dict,","dictionari","example,","false);","false;","given","more","new","null","on","public","result","result[0]","return","s","s,","s.length()","segment","separ","sequenc","set","solut","space","string","true","true;","word","wordbreak(str","{","||","}","假设总共有n个字符串，并且字典是用hashset来维护，那么总共需要n次迭代，每次迭代需要一个取子串的o(i)操作，然后检测i个子串，而检测是constant操作。所以总的时间复杂度是o(n^2)（i的累加仍然是n^2量级），而空间复杂度则是字符串的数量，即o(n)。代码如下：","原题链接","思路：这道题仍然是动态规划的题目，我们总结一下动态规划题目的基本思路。首先我们要决定要存储什么历史信息以及用什么数据结构来存储信息。然后是最重要的递推式，就是如从存储的历史信息中得到当前步的结果。最后我们需要考虑的就是起始条件的值。","接下来我们套用上面的思路来解这道题。首先我们要存储的历史信息res[i]是表示到字符串s的第i个元素为止能不能用字典中的词来表示，我们需要一个长度为n的布尔数组来存储信息。然后假设我们现在拥有res[0,...,i"],"dp/distinct-subsequences.html":["\"abcde\"","\"ace\"","\"aec\"","\"rabbbit\",","\"rabbit\"","\"rabbit\"return","\"rabbit\"为例）：","(1","(can","(ie,","(t[i","+","...","//","//t","0","0)","0;","1","1;","1]","1].就是说，假设s已经匹配了j","1].现在无论s[j]是不是和t[i]匹配，匹配的个数至少是dp[i][j","1];","1][0]","1][j","1][s.length()","1]。除此之外，当s[j]和t[i]相等时，我们可以让s[j]和t[i]匹配，然后让s[j","1]例如对于例子：","1]去匹配。所以递推关系为：","1]和t[i","1]和t[j","1]（dp是从1开始计数，字符串是从0开始计数）匹配的话，dp[i][j]还要加上dp[i","1个字符，得到匹配个数为dp[i][j","2","3","3.原题链接",":","=","=\"rabbbit\",t","==","?","b","charact","characters.","class","come","count","delet","distinct","disturb","dp[0][0]","dp[0][1","dp[1","dp[][]","dp[i","dp[i][j","dp[i][j]","dp，用来记录匹配子序列的个数（以","dynam","empty,","example:","for(int","form","given","int","int[t.length()","matching,","method","mind","naturally.","new","none)","not).her","number","numdistinct(str","origin","posit","problem","program","public","r","ra，t为r，t肯定是s的子串；当i=2，j=2时，s仍为ra，t为ra，这时t也是s的子串，所以子串数在dp[2][1]基础上加dp[1][1]。","ra，t为r，t肯定是s的子串；这时i=2，j=2时，s为ra，t为rs，t现在不是s的子串，当之前一次是子串所以现在计数为1.","rel","remain","s","s,","s.","s.length()","s[j","see","solut","string","subsequ","s是空串，t不是空串，s没有子序列匹配。","t","t)","t,","t.length()","t和s都是空串.","t是空串，s只有一种子序列匹配。","without","{","“when","”","为","从这个表可以看出，无论t的字符与s的字符是否匹配，dp[i][j]","同时，如果字符串s[i","当i=2，j=1时，","思路：可以先尝试做一个二维的表int[][]"],"dp/interleaving-string.html":["!=","\"aabcc\"","\"aabcc\",","\"aadbbbaccc\",","\"aadbbcbcac\"","\"aadbbcbcac\",","\"dbbca\"","\"dbbca\",","(int","(s1","(s1.length()","+","//check","0","1","1;","1];","1][s2.length()","=","==","ab,","b","base的","base的,","bbc","boolean","boolean[][]","boolean[s1.length()","c","c,","class","come","consist","d","dp","dp[0][0]","dp[i][j]表示s1取前i位，s2取前j位，是否能组成s3的前i+j位","dynam","example,","false.","false;","false很直观，如果不等就是false了嘛。","find","form","given","given:","interleav","isinterleave(str","j","matching,","method","mind","naturally.","new","null","null)","problem","program","public","return","s1","s1,","s2","s2,","s2.","s2.length()","s2取第1位d，是否能组成s3的前两位aa","s3","s3)","s3,","s3.length())","s3=abc","see","solut","string","subsequ","true.","true;","whether","x","{","||","}","“when","”","举个列子，注意左上角那一对箭头指向的格子dp[1][1],","举个简单的例子s1","从dp[0][1]","从dp[1][0]","位)","位)，第二个条件，之前那个格子也要等于true","位）","同理，如果s1","往下的箭头表示，s1目前取了0位，s2目前取了1位，我们添加s1的第1位，看看它是不是等于s3的第2位，(","往右的箭头表示，s1目前取了1位，s2目前取了0位，我们添加s2的第1位，看看它是不是等于s3的第2位，(","思路：讲解来自,","我们以dp[m+1][n+1]","正序遍历字符创造的矩阵是1","的index是0","表示s1取第1位a,","还有dfs版","还有一点需要注意的是，string","那true呢？首先第一个条件，新添加的字符，要等于s3里面对应的位(","那什么时候取true，什么时候取false呢？","（abc==abc）","，假设s1已经取了2位，c还没取，此时是false（ab!=bb），我们取s2的新的一位c，即便和s3中的c相等，但是之前是false，所以这一位也是fals","，同样的假设，s1取了2位，c还没取，此时是true（ab==ab），我们取s2的新的一位c,和s3中的c相等，且之前这一位就是true，此时我们可以放心置tru"],"dp/jump-game.html":["&","(a","(a.length","(int","(jump","+","//greedi","0","0)","0;","0;//第一个算数不需要跳","1","1)","1);","1,","1;","1]","1];","2.","3","=","==",">=","[0..i","[2,3,1,1,4]","a)","a.length","a[0..i","a[0];","a[i]);","ac","ac代码","array","array.","boolean","break;","canjump(int[]","case","class","currrang","currrange;","dp","dp[0]","dp[a.length","dp[i]","dp[j]","dp解法，过不了leetcode新增大数据","each","edg","edge)","element","example:","false;","first","for(int","function:","game","given","goal","i)","ii","index","index.)","initi","int","int[]","int[a.length];","integers,","jump","jump(int[]","jumps.","last","length","math.max(currrange,","math.min(dp[0..i","math.min(dp[i],","max","maximum","minimum","neg","new","non","null","number","posit","position.","public","rang","range，并且维护实时更新一个当前可达范围curr","reach","repres","return","solut","state:","step","step++;","step;","true;","{","||","}","一个是求能否走到，一个求走到的最小值。都符合动归的使用条件。但是dp在这道题的效率不高，wors","为当前可达范围current","在edge范围内，则不需要跳，如果当前index超出最大可达范围edge，则step++，","并且更新edg","思路：jump","的两种解法。分析思路同上","结果：dp[a.length","表示前i个位置需要的最小步数","要o(n^2)，大数据超时。先讲解动归训练思维。贪心解法o(n)","贪心解法o(n)思路：维护一个最大可达范围edge，如果在当前index","起点：a[0]","附jump","＝"],"dp/maximum-subarray.html":["(a","(contain","(int","+","0)","0;","1;","1]","6.","=","==","[4,−1,2,1]","[−2,1,−3,4,−1,2,1,−5,4],","a)","a.length","a[0];","a[0];//initi","a[i]);","a[i],","alway","answer：途中max值","array","class","compar","contigu","current","dp","dp[0]","dp[i]","dp[i],","dp？","example,","find","function:","given","int","int[]","int[a.length];","keep","largest","largest;","math.max(dp[i","max","maximum","maxsubarray(int[]","new","null","number)","on","public","return","solut","state:","subarray","sum","sum.","within","{","||","}","初始化：","因为要求极值一维数组，当然是一维dp，","思路：whi","用当前数和之前的和比大小，取较大的，然后维护一个max，","表示前i个元素的和","起点为a[0]"],"dp/min-path-sum.html":["(grid","(int","+","//initi","0","0)","0..n]","0;","0]","1","1;","1])","1][j],","=","==","[0,","[0,0]","[0..n,","[0][0...","a[i][j];","along","answer：[x,y]右下角终点。","awalys输出实话","bottom","class","dp[i]","dp[i][j","dp[i][j]","dp，","dp？","fill","find","function:","given","grid","grid)","grid.length","grid.length;","grid[0].length","grid[0].length;","grid[0][0];","int","int[][]","int[m][n];","j－1","left","m","math.min(dp[i","min","minim","minpathsum(int[][]","n","n]","neg","new","non","null","number","numbers,","path","public","return","right","solut","state:","sum","sum[0][0]","top","x","{","||","}","上一步可能来自于上面，或者左边，比较这两个数的大小，取较小的，然后加上当前的值。","举证，当然是matrix","初始化：","和","和[0..n][0]","因为要","因为要求极值m*n","思路：whi","表示起点[0,0]到[i,j]位置上的和。","起点为[0，0]，矩阵dp"],"dp/palindrome-partition-ii.html":["\"aab\",return","(int","(s",")","+","//","//e.g.","//初始化cuts，从ith位置到len做多要可以切len","0","0,","0;","1","1)","1,","1,即第len位置，为空字符，不需要切割。","1])","1];//cut","1]中间的这一个cut，操作＋1。即，math.min(cuts[i],","1]是回文且","1。比如给的例子aab，cuts[0]","1刀","1（i，j相邻）且s.charat(i)","2，就是最坏情况每一个字符都得切割：a|a|b","4","5","=","==","=>","[\"aa\",\"b\"]","[i,j]","[i,len]","[j+1,len","aaaaa","b","boolean[][]","boolean[len][len];//record","class","cut","cut.","cut[0]","cuts[1]","cuts[2]","cuts[3]","cuts[i]表示从第i位置到第len位置（包含，即[i,","cuts[j+1]+1)最后返回cuts[0]。即为最终结果。","cuts[len+1]。","example,","given","i;","ii","int","int[]","int[len","j","j（i，j是用一个字符）","len","len])的切割数（第len位置为空,","matrix","matrixs[i+1][j","mincut(str","minimum","need","new","null","num","palindrom","palindrome.return","partit","produc","public","return","s","s)","s,","s.charat(i)","s.charat(j)","s.charat(j)。","s.for","s.length()","s.length();","solut","string","sub(i,j)","substr","such","us","{","|","|cut|","||","}","上面的这个cuts数组是用来帮助算最小cuts的。","刀，从0位置开始切最多切4刀","初始时，是len","即从i=1位置开始，a|b","即从i=2位置开始,","原题链接","如何判断字符串[i,j]是不是回文？","当字符串[i,j]是回文后，说明从第i个位置到字符串第len位置的最小cut数可以被更新了,","思路：","是否是回文。","还需要一个dp二维数组matrixs[i][j]表示字符串[i,j]从第i个位置（包含）到第j个位置（包含）","那么就是从j+1位置开始到第len位置的最小cut数加上","非空[0,","首先设置dp变量","－"],"dp/pascal-triangle.html":["(i","(int","(j","(numrow","(rowindex",")","+","+=","//convert","0","0)","0;","1","1)","1,","1;","1](0)","1](i","1](i)。","1](n","1];","2)","2],","5,",";","=","==",">","[","[1,1],","[1,2,1],","[1,3,3,1],","[1,4,6,4,1]","[1],","]","](n","array[j","array[j]","arraylist","arraylist();","arraylist>","arraylist>();","class","example,","first","g[n","g[n](0)","g[n](i)","gener","generate(int","getrow(int","given","gn","i)","ii给定k，","j","list","n","new","numrow","numrows)","numrows,","pascal","pascal'","public","result","return","rowindex)","solut","temp","temp.add(1);","triangl","triangle.","trianglegiven","{","||","}","}els","~","假设我们已经有了gn","只需要求出第kth行的内容。","完整代码如下：","对于任何i","属于[1,","思路：首先观察一下三角形的生成规律。","我们想要生成gn","相似问题pascal'","那么通过观察我们可以发现如下规则：","－"],"dp/set-zero-to-matrix.html":["(0,","(int","(matrix","(row,","+","//doe","0","0)","0,","0.","0;","1;","2","=","==","bad","best","boolean","class","col","col)","col0","coloumn","cols.","column","constant","devis","element","entir","extra","false;","first","follow","forward","given","haszerofirstcol","haszerofirstrow","idea.","improv","int","m","m),","mark","marker,","matrix","matrix)","matrix,","matrix.length","matrix.length;","matrix[0].length","matrix[0].length;","n","n)","null","o(m","o(mn)","o(n","place？","probabl","public","reduc","return;","row","row0","set","setzeroes(int[][]","simpl","solut","solution.","solution?","space","space,","space?","still","straight","straightforward","up","us","veri","void","x","zero","zero;","{","||","}","原题链接","思路：use"],"dp/triangle.html":["(int","(triangl",")","+","//initi","0)","0;","1))","1).get(j","1).get(j),","1).size()];","1;","1])","1],","1][a[0].length","1][j","1][j],","2;","=","==",">=","[","[2],","[3,4],","[4,1,8,3]","[6,5,7],","]","a[i][j]","adjac","answer：[0][0]","below.","bottom.","class","dp","dp[0][0];","dp[i","dp[i+1][j+1])","dp[i][j]","dp。拿到这道题，先左对其，然后按照matrix","each","example,","find","follow","function：","given","if(triangle.size()==1)","int","int[]","int[][]","int[row][triangle.get(row","int[triangle.size()];","j","last","math.min(dp[i","math.min(dp[i+1][j],","math.min(triangle.get(i","matrix","minimum","minimumtotal(list>","minsum","minsum);","move","new","null","number","path","place，不要额外空间，直接在原矩阵上修改。","public","return","row","solut","state：","step","sum","top","triangl","triangle)","triangle,","triangle.get(0).get(0);","triangle.get(i","triangle.get(i).get(j);","triangle.get(i).set(j,","triangle.get(i).size()","triangle.size()","triangle.size();","{","||","}","一般matrix","优化空间到一维dp：","只开最后一列数组用来储存。","可以从上往下也可以从下往上推，这里我们采用从下往上推","常规矩阵dp的解法：","思路：很典型了一道动态规划题，相当于半个","找坐标规律。matrix","最优解，in","最右边那个点","的常规套路","表示在从（x,y）到（i，j）位置上的最小和sum的值。","起点：[a.length"],"dp/wildcard-matching.html":["\"*\")","\"?*\")","\"a*\")","\"c*a*b\")","&&","'*'","'*'.","'?'","(includ","(not",")","*p)","*s,","+","0;","1)=='*')","1];","1][p.length()","1的结果，所以不需要二维数组，只需要一个一维数组来保存上一行结果即可）","=","be:","bool","boolean","boolean[]","boolean[s.length()","boolean[s.length()+1];","card","char","charact","character.","class","const","count","cover","dp[0][0]","dp[][]","empti","entir","examples:","express","fals","false;","for(int","function","if(p.length()==0)","if(s.length()>300","implement","input","int","ismatch(\"aa\",","ismatch(\"aa\",\"a\")","ismatch(\"aa\",\"aa\")","ismatch(\"aaa\",\"aa\")","ismatch(\"aab\",","ismatch(\"ab\",","ismatch(const","ismatch(str","j=0;j=0;i","match","matching一样，还是维护一个假设我们维护一个布尔数组res[i],代表s的前i个字符和p的前j个字符是否匹配(这里因为每次i的结果只依赖于j","new","p)","p.charat(0)=='*'","p.charat(p.length()","p[j]不是'*'。情况比较简单，只要判断如果当前s的i和p的j上的字符一样（如果有p在j上的字符是'?'，也是相同），并且res[i]==true，则更新res[i+1]为true，否则res[i+1]=false;","p[j]是'*'。因为'*'可以匹配任意字符串，所以在前面的res[i]只要有true，那么剩下的res[i+1],","partial).","pattern","prototyp","public","re","res[0]","res[i+1]","res[i+2],...,res[s.length()]就都是true了。","res[i]&&(p.charat(j)=='?'||s.charat(i)==p.charat(j));","return","s,","s.length())","s.length()==0;","sequenc","sequence).","singl","solut","string","support","true","true;","while(i","wild","wildcard","{","}","→","二维dp代码来自,","思路：一维dp","算法的时间复杂度因为是两层循环，所以是o(m*n),","而空间复杂度只用一个一维数组，所以是o(n)，假设s的长度是n，p的长度是m。","讲解来自","还有dfs版","这道题跟regular","递推公式分两种情况："],"misc/two-sum.html":["&&","(int","(int[]","(num","(p","*","*/","+","/*","//now","0","0/1","0;","1","1)","1;","1])","2sum","=","==",">","base","basic","combin","complex","continue;//avoid","convert","dup","foursum","hashmap<>();","index","instead","int","int[]","j","linkedlist>();","list>","map","new","null","nums,","nums.length","nums[i","nums[i]","nums[j","nums[j]","o(1)","o(n)","on","ovaral","overal","p","pass","pointer实现o(n^k","public","q","re","relat","return","s/c","set","space","sum","summari","t/c","target)","time","two","twosum(int[]","us","{","||","利用hashmap实现o(n)","利用two","常见题型","无关下标顺序，可以排序","注意","注意下标的前后顺序","注意消去重复组合和不必要的遍历","返回下标","返回所有组合","通解，可以延展到k－sum"],"misc/valid-number.html":["\"","\"0\"","\"1","\"2e10\"","\"[","\"abc\"","&&","'","'+'","'.'","'0'","'e'","(int","+]?(\\\\d+\\\\.?|\\\\.\\\\d+)\\\\d*(e[","+]?[0","+]?\\\\d+)?\";","0.1","0;","1","9]","9]*(.[0","9]+)?","9]+)?(e[","=","=>","[","[0","a\"","ambiguous.","arr","arr[i]","basic","befor","begin","boolean","break","case","char[]","charact","didn't","dot","e","end","examples:","expression:","fals","false;","flag.","flags.","front","gather","given","if(s.trim().matches(regex)){","implement","intend","isnumber(str","match","non","note:","num","numafter","number","number.","numberafter","numeric.","one.","problem","public","regex","regular","requir","reset","return","s)","s.trim().tochararray();","see","start","statement","static","string","string.","trim","true","true;","true;//default","up","valid","validation.","well.","{","}","分类讨论，常规解法：","思路题解来自we"]},"length":41},"tokenStore":{"root":{"0":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.012195121951219513},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.1050228310502283},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.04060913705583756},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.011019283746556474},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.031746031746031744},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827}}},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.013774104683195593},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.031578947368421054},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}},"{":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.022935779816513763},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.02197802197802198},"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.012195121951219513},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.029166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.01875},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.04424778761061947},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.024844720496894408},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"/":{"docs":{},"/":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"数":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"跳":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}},"}":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}}},".":{"1":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}},"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},".":{"docs":{},"n":{"docs":{},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"/":{"1":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}},"docs":{}}},"1":{"0":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}},"%":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},".":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"1":{"docs":{},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"2":{"4":{"5":{"3":{"6":{"7":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"5":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"6":{"docs":{},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.015873015873015872},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.1050228310502283},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.015228426395939087},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.01875},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.02142857142857143},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.027472527472527472},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.01652892561983471},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},"/":{"docs":{},"/":{"docs":{},"不":{"docs":{},"是":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"的":{"docs":{},"话":{"docs":{},"还":{"docs":{},"要":{"docs":{},"计":{"docs":{},"算":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}},")":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},")":{"docs":{},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.03361344537815126},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.02032520325203252},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0182648401826484},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}},"/":{"docs":{},"/":{"docs":{},"当":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"docs":{}}}}}}}}}}}}}},"]":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0228310502283105},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"/":{"docs":{},"/":{"1":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}},"/":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"b":{"docs":{},"[":{"docs":{},"k":{"docs":{},"/":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"docs":{}}}}}}},">":{"docs":{},"b":{"docs":{},"[":{"docs":{},"k":{"docs":{},"/":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"docs":{}}}}}},"和":{"docs":{},"b":{"docs":{},"[":{"docs":{},"k":{"docs":{},"/":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"docs":{}}}}},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"来":{"docs":{},"获":{"docs":{},"得":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"的":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"。":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"以":{"docs":{},"i":{"docs":{},"为":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"看":{"docs":{},"看":{"docs":{},"他":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"在":{"docs":{},"字":{"docs":{},"典":{"docs":{},"里":{"docs":{},"面":{"docs":{},"以":{"docs":{},"及":{"docs":{},"他":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"都":{"docs":{},"成":{"docs":{},"立":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"就":{"docs":{},"做":{"docs":{},"之":{"docs":{},"前":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"就":{"docs":{},"好":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"第":{"docs":{},"k":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}},"docs":{},"s":{"2":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}},"docs":{},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}},"j":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}},"n":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}},"docs":{}}},"p":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}},".":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"s":{"docs":{},"已":{"docs":{},"经":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"了":{"docs":{},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}},"现":{"docs":{},"在":{"docs":{},"无":{"docs":{},"论":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"和":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"至":{"docs":{},"少":{"docs":{},"是":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"除":{"docs":{},"此":{"docs":{},"之":{"docs":{},"外":{"docs":{},"，":{"docs":{},"当":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"和":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"相":{"docs":{},"等":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"让":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"和":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"让":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"例":{"docs":{},"如":{"docs":{},"对":{"docs":{},"于":{"docs":{},"例":{"docs":{},"子":{"docs":{},"：":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}},"去":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"递":{"docs":{},"推":{"docs":{},"关":{"docs":{},"系":{"docs":{},"为":{"docs":{},"：":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}},"（":{"docs":{},"d":{"docs":{},"p":{"docs":{},"是":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"数":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"从":{"0":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"数":{"docs":{},"）":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"还":{"docs":{},"要":{"docs":{},"加":{"docs":{},"上":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}},"中":{"docs":{},"间":{"docs":{},"的":{"docs":{},"这":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"，":{"docs":{},"操":{"docs":{},"作":{"docs":{},"＋":{"1":{"docs":{},"。":{"docs":{},"即":{"docs":{},"，":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"且":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}},"(":{"0":{"docs":{},")":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}},"docs":{},"i":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},")":{"docs":{},"。":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.031746031746031744},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.04},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.047337278106508875},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.03296703296703297},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}},"即":{"docs":{},"第":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"为":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"切":{"docs":{},"割":{"docs":{},"。":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"?":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}},"的":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"上":{"docs":{},"一":{"docs":{},"行":{"docs":{},"结":{"docs":{},"果":{"docs":{},"即":{"docs":{},"可":{"docs":{},"）":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"个":{"docs":{},"数":{"docs":{},"为":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"给":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"，":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"docs":{}}}}}}}}}}}}}}}}},"刀":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}},"（":{"docs":{},"i":{"docs":{},"，":{"docs":{},"j":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"）":{"docs":{},"且":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}},"2":{"0":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"6":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},")":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}},":":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"docs":{}}},"docs":{}}},"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"分":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"递":{"docs":{},"归":{"docs":{},"取":{"docs":{},"一":{"docs":{},"半":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}},".":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}},"d":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}},"］":{"docs":{},"对":{"docs":{},"结":{"docs":{},"果":{"docs":{},"无":{"docs":{},"影":{"docs":{},"响":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}},"]":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"得":{"docs":{},"切":{"docs":{},"割":{"docs":{},"：":{"docs":{},"a":{"docs":{},"|":{"docs":{},"a":{"docs":{},"|":{"docs":{},"b":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}},"3":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0410958904109589},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},":":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},".":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}},"原":{"docs":{},"题":{"docs":{},"链":{"docs":{},"接":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}},"]":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.012605042016806723},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}}},"4":{"0":{"docs":{},"%":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}}},"2":{"5":{"1":{"6":{"3":{"7":{"docs":{},"后":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"2":{"6":{"7":{"3":{"1":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}}},"5":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},",":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}},".":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}},"]":{"docs":{},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"6":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}},".":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}},"7":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}},"]":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"9":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}},")":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101}}},"]":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"*":{"docs":{},"(":{"docs":{},".":{"docs":{},"[":{"0":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}},"docs":{}}}}},"+":{"docs":{},")":{"docs":{},"?":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"(":{"docs":{},"e":{"docs":{},"[":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}},"docs":{},"a":{"1":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"2":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}},"docs":{},"g":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}},"*":{"docs":{},"b":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"r":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},"[":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}},"i":{"docs":{},"]":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}},"a":{"docs":{},"y":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":2.505291005291005},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.023121387283236993},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.014545454545454545},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.041666666666666664},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.020833333333333332},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}},">":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}},"s":{"docs":{},".":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"的":{"docs":{},"第":{"docs":{},"k":{"docs":{},"大":{"docs":{},"（":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"数":{"docs":{},"）":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{},"因":{"docs":{},"而":{"docs":{},"等":{"docs":{},"价":{"docs":{},"于":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"并":{"docs":{},"判":{"docs":{},"断":{"docs":{},"两":{"docs":{},"个":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"第":{"docs":{},"k":{"docs":{},"/":{"2":{"docs":{},"（":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"数":{"docs":{},"）":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}},"docs":{}}}},"docs":{}}}}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},".":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}},"[":{"docs":{},"j":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"]":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}}}}}}}},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"s":{"docs":{},"k":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"g":{"docs":{},"n":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}},"u":{"docs":{},"m":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}},":":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":3.333333333333333}},"(":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":10.010416666666666}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563}},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}},"：":{"docs":{},"途":{"docs":{},"中":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"值":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}},"docs":{}}}},"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},"]":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"终":{"docs":{},"点":{"docs":{},"。":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}},"c":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}}}}}}}},"代":{"docs":{},"码":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}},"[":{"0":{"docs":{},".":{"docs":{},".":{"docs":{},"i":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}},"]":{"docs":{},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}},"/":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}}}}},"docs":{},"]":{"docs":{},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"+":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}},"k":{"docs":{},"/":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"docs":{}}},"i":{"docs":{},"]":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}},")":{"docs":{},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}},",":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},";":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}},"d":{"docs":{},"d":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}},"k":{"docs":{},")":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}},".":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}},"i":{"docs":{},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"b":{"docs":{},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{},"y":{"docs":{},"s":{"docs":{},"输":{"docs":{},"出":{"docs":{},"实":{"docs":{},"话":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}},"\"":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}},"b":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0228310502283105},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.015228426395939087},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},"l":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.02586206896551724},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.018633540372670808},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.041379310344827586}},"[":{"docs":{},"]":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"[":{"docs":{},"]":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}},"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"+":{"1":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"docs":{}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},"[":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{},"/":{"docs":{},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}},"e":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},".":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}},")":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}},",":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}}}}}}}}}}},"docs":{}}}}},"d":{"docs":{},"i":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}}}}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.021164021164021163}}},"e":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},",":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258}}}}}}},"n":{"docs":{},"d":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}},"s":{"docs":{},"t":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}},":":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"e":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"的":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"c":{"docs":{},"k":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.025210084033613446}},".":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},"?":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}},"d":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":5.016806722689076},"bt/summary.html":{"ref":"bt/summary.html","tf":5.013550135501355},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016}}},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563}}}}}}}}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"+":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"b":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}},"k":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"f":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.024}}}}}}}},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":3.3369696969696965},"dp/word-break.html":{"ref":"dp/word-break.html","tf":5},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"]":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"存":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"还":{"docs":{},"要":{"docs":{},"求":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"，":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"求":{"docs":{},"所":{"docs":{},"有":{"docs":{},"结":{"docs":{},"的":{"docs":{},"版":{"docs":{},"本":{"docs":{},"，":{"docs":{},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"跑":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"在":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"中":{"docs":{},"，":{"docs":{},"在":{"docs":{},"进":{"docs":{},"行":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"求":{"docs":{},"解":{"docs":{},"，":{"docs":{},"一":{"docs":{},"定":{"docs":{},"程":{"docs":{},"度":{"docs":{},"上":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"速":{"docs":{},"度":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}},"b":{"docs":{},"c":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}},"c":{"2":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}},"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.015228426395939087}},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"o":{"docs":{},"n":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":3.333333333333333},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},"a":{"docs":{},"r":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":5.010204081632653},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}},"s":{"docs":{},".":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}},"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}},"e":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}},"r":{"docs":{},"t":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306}},"/":{"docs":{},"/":{"docs":{},"a":{"docs":{},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}}}}}}}}}}}}},"g":{"docs":{},"u":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025}}}}}},"s":{"docs":{},"t":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":2.507518796992481},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":2.508},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},"区":{"docs":{},"别":{"docs":{},"：":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"x":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.013774104683195593}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}}}},")":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}}}},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}},"l":{"0":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827}}},"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}},"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},";":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}},")":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"s":{"docs":{},".":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"d":{"docs":{},"e":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},"\"":{"docs":{},".":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"a":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}},"[":{"docs":{},"]":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}},".":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},"?":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},"s":{"docs":{},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},":":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},":":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}},"：":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}},".":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.027210884353741496}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}},"[":{"docs":{},"i":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306}},"]":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306}},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}},"r":{"docs":{},"d":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":3.333333333333333}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},"m":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.01327433628318584},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}}},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333}},"e":{"docs":{},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}},"t":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125}},".":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}},"[":{"0":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"docs":{}},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"2":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"3":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"表":{"docs":{},"示":{"docs":{},"从":{"docs":{},"第":{"docs":{},"i":{"docs":{},"位":{"docs":{},"置":{"docs":{},"到":{"docs":{},"第":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"位":{"docs":{},"置":{"docs":{},"（":{"docs":{},"包":{"docs":{},"含":{"docs":{},"，":{"docs":{},"即":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"。":{"docs":{},"即":{"docs":{},"为":{"docs":{},"最":{"docs":{},"终":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}},"docs":{}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"。":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}},"docs":{}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939}}}},"d":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}},"c":{"docs":{},"i":{"docs":{},"d":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}},"o":{"docs":{},"d":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":5.0236220472440944}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"里":{"docs":{},"的":{"docs":{},"高":{"docs":{},"分":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"也":{"docs":{},"参":{"docs":{},"考":{"docs":{},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{},"其":{"docs":{},"他":{"docs":{},"教":{"docs":{},"材":{"docs":{},"和":{"docs":{},"优":{"docs":{},"质":{"docs":{},"博":{"docs":{},"客":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"年":{"docs":{},"代":{"docs":{},"有":{"docs":{},"点":{"docs":{},"久":{"docs":{},"，":{"docs":{},"之":{"docs":{},"前":{"docs":{},"笔":{"docs":{},"记":{"docs":{},"都":{"docs":{},"是":{"docs":{},"手":{"docs":{},"写":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"小":{"docs":{},"心":{"docs":{},"忘":{"docs":{},"记":{"docs":{},"了":{"docs":{},"标":{"docs":{},"注":{"docs":{},"出":{"docs":{},"处":{"docs":{},"，":{"docs":{},"请":{"docs":{},"发":{"docs":{},"评":{"docs":{},"论":{"docs":{},"，":{"docs":{},"发":{"docs":{},"邮":{"docs":{},"件":{"docs":{},"，":{"docs":{},"发":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"发":{"docs":{},"p":{"docs":{},"r":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.019736842105263157},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":5.004566210045662}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}},"u":{"docs":{},"r":{"docs":{},"b":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}},"c":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.011019283746556474},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"1":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}},"2":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}},"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"1":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}},"2":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}},"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.03296703296703297},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}},")":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.02181818181818182},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0273972602739726}}}}}}}},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"要":{"docs":{},"指":{"docs":{},"定":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}},"g":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}}}}}}},"o":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"w":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.015873015873015872}}}}},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}},"]":{"docs":{},"原":{"docs":{},"题":{"docs":{},"链":{"docs":{},"接":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"t":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}},"y":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}},"p":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}},"i":{"docs":{},"c":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}},"f":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"dfs/introduction.html":{"ref":"dfs/introduction.html","tf":10},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091}},"s":{"docs":{},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"模":{"docs":{},"版":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}},"n":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.023668639053254437}}}}}}}}},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"实":{"docs":{},"现":{"docs":{},"方":{"docs":{},"法":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}},"p":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.016483516483516484},"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.022123893805309734}},"只":{"docs":{},"能":{"docs":{},"向":{"docs":{},"左":{"docs":{},"向":{"docs":{},"下":{"docs":{},"走":{"docs":{},",":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"解":{"docs":{},"题":{"docs":{},"思":{"docs":{},"想":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}},"的":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"交":{"docs":{},"集":{"docs":{},"，":{"docs":{},"分":{"docs":{},"治":{"docs":{},"的":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"完":{"docs":{},"全":{"docs":{},"独":{"docs":{},"立":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}},"[":{"0":{"docs":{},"]":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}},"1":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}},"docs":{}}}},"1":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"]":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992}}}},"docs":{},"i":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.016666666666666666},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},")":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"表":{"docs":{},"示":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"一":{"docs":{},"共":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"个":{"docs":{},"方":{"docs":{},"案":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"]":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.01327433628318584}},"表":{"docs":{},"示":{"docs":{},"s":{"1":{"docs":{},"取":{"docs":{},"前":{"docs":{},"i":{"docs":{},"位":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"取":{"docs":{},"前":{"docs":{},"j":{"docs":{},"位":{"docs":{},"，":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"组":{"docs":{},"成":{"docs":{},"s":{"3":{"docs":{},"的":{"docs":{},"前":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},"位":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}},",":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}},"docs":{}}}}}},"docs":{}}},"j":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}}},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333}}}}}}}}}}},"?":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}},"，":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"用":{"docs":{},"来":{"docs":{},"记":{"docs":{},"录":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"（":{"docs":{},"以":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"过":{"docs":{},"不":{"docs":{},"了":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"新":{"docs":{},"增":{"docs":{},"大":{"docs":{},"数":{"docs":{},"据":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}}}}}}},"？":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"。":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"，":{"docs":{},"先":{"docs":{},"左":{"docs":{},"对":{"docs":{},"其":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"按":{"docs":{},"照":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":5.0054945054945055},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"e":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}},"y":{"docs":{},",":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}},"n":{"docs":{},"d":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.011019283746556474},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},",":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488}}}}},"t":{"docs":{},"i":{"docs":{},"r":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}},"x":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}},"s":{"docs":{},":":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}}}}},"c":{"docs":{},"e":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"p":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.01834862385321101},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}},"d":{"docs":{},"g":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333}},"e":{"docs":{},")":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}},"f":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"n":{"docs":{},"d":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.024793388429752067},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.015873015873015872}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{},"a":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{},"b":{"docs":{},",":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"+":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"b":{"docs":{},",":{"docs":{},"b":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{},"k":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},",":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{},"b":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{},"a":{"docs":{},",":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{},"a":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.02074688796680498}}}}}},"s":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}},"l":{"docs":{},"s":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.018633540372670808},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},"e":{"docs":{},";":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.029585798816568046},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.027586206896551724}}},")":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}},".":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"很":{"docs":{},"直":{"docs":{},"观":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"等":{"docs":{},"就":{"docs":{},"是":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"了":{"docs":{},"嘛":{"docs":{},"。":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.018633540372670808}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}},"m":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},"a":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}},"r":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"：":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}},"(":{"docs":{},"x":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}},",":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.038461538461538464},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"i":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"j":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"s":{"1":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}},"docs":{}}},"[":{"0":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"[":{"1":{"docs":{},"⋯":{"docs":{},"m":{"docs":{},"]":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}},"1":{"docs":{},"⋯":{"docs":{},"n":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}},"docs":{}}}}}},"docs":{},"i":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"[":{"0":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}},"docs":{},"s":{"docs":{},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}}},"j":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"表":{"docs":{},"示":{"docs":{},"前":{"docs":{},"s":{"1":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"s":{"2":{"docs":{},"前":{"docs":{},"几":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"最":{"docs":{},"长":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}},"表":{"docs":{},"示":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"最":{"docs":{},"长":{"docs":{},"的":{"docs":{},"递":{"docs":{},"增":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}}}}}}}}}}},"−":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"−":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}}},"docs":{}}},"n":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}},"m":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}},"s":{"docs":{},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}},"a":{"docs":{},"d":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356}},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.017857142857142856}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}},"p":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}},"r":{"docs":{},"e":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},">":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}}},"s":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}}},"t":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"w":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"/":{"docs":{},"s":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"f":{"docs":{},"_":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{},"/":{"3":{"0":{"9":{"4":{"1":{"docs":{},"/":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}},">":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.029045643153526972},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.030303030303030304},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.022935779816513763},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.05042016806722689},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.08465608465608465},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.06766917293233082},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.072},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.027210884353741496},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.03296703296703297},"dp/summary.html":{"ref":"dp/summary.html","tf":0.025210084033613446},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.02032520325203252},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.025},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.030612244897959183},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.02654867256637168},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.03361344537815126}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":10}}}}}}}},"e":{"docs":{},"g":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}},"e":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},",":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":5.00507614213198}}}}}}},"n":{"docs":{},"d":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}},"[":{"docs":{},"]":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.018957345971563982},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.024390243902439025},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"[":{"docs":{},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}},"m":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}},"s":{"1":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}},"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}}},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}}}},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},"[":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}},",":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}}},":":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},"：":{"docs":{},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"docs":{}}}}},"起":{"docs":{},"点":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},",":{"0":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"docs":{}}},"docs":{}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.03007518796992481},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.024}}},")":{"docs":{},";":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.016666666666666666},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}},".":{"docs":{},")":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}},"i":{"docs":{},"c":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":2.507518796992481},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":2.516}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248}}}}}}}}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.024}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}}}}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"x":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}}}}}},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},":":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}}}}}}}}}}}}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}}},"t":{"docs":{},"'":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},"e":{"docs":{},"r":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.03125}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"利":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"实":{"docs":{},"现":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}},"m":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.020833333333333332},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.02040816326530612},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},"{":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},".":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}},".":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"o":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"(":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},">":{"0":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"docs":{}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}},"n":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}}}}},"a":{"docs":{},"[":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"+":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}},"k":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"docs":{}}}},"m":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"docs":{}}},">":{"docs":{},"n":{"docs":{},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497}}}}}},"!":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},">":{"3":{"0":{"0":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},")":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}},"docs":{}}}}}}}}}}}}}}}}}},"p":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}},"docs":{}}}}}}}}}}}}}}},")":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}},"i":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":3.333333333333333},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":3.333333333333333}},"要":{"docs":{},"求":{"docs":{},"，":{"docs":{},"组":{"docs":{},"合":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"能":{"docs":{},"用":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"就":{"docs":{},"排":{"docs":{},"除":{"docs":{},"了":{"docs":{},"之":{"docs":{},"前":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"可":{"docs":{},"以":{"docs":{},"无":{"docs":{},"限":{"docs":{},"次":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"参":{"docs":{},"照":{"docs":{},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"模":{"docs":{},"版":{"docs":{},"。":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"]":{"docs":{},"去":{"docs":{},"标":{"docs":{},"记":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"docs":{},"否":{"docs":{},"被":{"docs":{},"使":{"docs":{},"用":{"docs":{},"过":{"docs":{},"。":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"给":{"docs":{},"定":{"docs":{},"k":{"docs":{},"，":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}},"−":{"1":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},"docs":{}},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}},"k":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},",":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}},"e":{"docs":{},"p":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}},"l":{"1":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}},"2":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}},")":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}}},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}},"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.061224489795918366}}}}}}},"s":{"docs":{},"s":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}},"n":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.03125}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.01928374655647383},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},")":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}},"]":{"docs":{},")":{"docs":{},"的":{"docs":{},"切":{"docs":{},"割":{"docs":{},"数":{"docs":{},"（":{"docs":{},"第":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"位":{"docs":{},"置":{"docs":{},"为":{"docs":{},"空":{"docs":{},",":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.03361344537815126},"bt/summary.html":{"ref":"bt/summary.html","tf":0.024390243902439025},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.03289473684210526}},")":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":3.333333333333333}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.017857142857142856}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}}},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}}}}}}}},"e":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.03669724770642202}},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}},"s":{"docs":{},"t":{"1":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}},"docs":{}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}},"2":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.026785714285714284},"bt/summary.html":{"ref":"bt/summary.html","tf":0.016260162601626018},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.031007751937984496},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.023696682464454975},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.05357142857142857}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"docs":{}}}}}},"s":{"docs":{},")":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.013392857142857142}},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"docs":{}}},">":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}},"/":{"docs":{},"l":{"docs":{},"c":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":10}}}}}}},"o":{"docs":{},"w":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":3.333333333333333}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.012195121951219513}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}}}},"g":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}},")":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"{":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},":":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.027522935779816515},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":5.010989010989011}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025}},";":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}},"c":{"docs":{},"a":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"docs":{},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}}},"docs":{}}}}}}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}},"m":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.031746031746031744},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.02040816326530612},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}},"r":{"docs":{},"k":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}},"t":{"docs":{},"h":{"docs":{"math/math.html":{"ref":"math/math.html","tf":10.004149377593361}},".":{"docs":{},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}},"f":{"docs":{},"[":{"0":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"docs":{},"i":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},",":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},",":{"docs":{},"b":{"docs":{},"[":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"/":{"2":{"docs":{},",":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}}}}}}},"docs":{}}},"d":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},".":{"docs":{},".":{"docs":{},"i":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}},"docs":{},"i":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"]":{"docs":{},",":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}},"docs":{}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":3.3581780538302275},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"假":{"docs":{},"设":{"docs":{},"我":{"docs":{},"们":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"布":{"docs":{},"尔":{"docs":{},"数":{"docs":{},"组":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"代":{"docs":{},"表":{"docs":{},"s":{"docs":{},"的":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"和":{"docs":{},"p":{"docs":{},"的":{"docs":{},"前":{"docs":{},"j":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{},"否":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"(":{"docs":{},"这":{"docs":{},"里":{"docs":{},"因":{"docs":{},"为":{"docs":{},"每":{"docs":{},"次":{"docs":{},"i":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"只":{"docs":{},"依":{"docs":{},"赖":{"docs":{},"于":{"docs":{},"j":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":3.333333333333333},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}},"docs":{}}}}},")":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}},",":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},";":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},";":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}}}}}},"docs":{}}}}}},"p":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}},">":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.02197802197802198}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}},"x":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":5}}}}}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}},"n":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"p":{"docs":{},"u":{"docs":{},"l":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}}}},"e":{"docs":{},"@":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"w":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}},"r":{"docs":{},"g":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":5.022321428571429}},"e":{"2":{"docs":{},"u":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}},"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"docs":{}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"o":{"docs":{},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"o":{"docs":{},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}},"(":{"docs":{},"l":{"2":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"docs":{}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":2.505291005291005}}}}}},"m":{"docs":{},"o":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}},"{":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},"d":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"n":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":3.333333333333333}},"i":{"docs":{},"m":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"u":{"docs":{},"m":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.01652892561983471},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},">":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.01327433628318584}}}}}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}},"d":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},")":{"docs":{},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}},"y":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"x":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.011019283746556474},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}},"r":{"docs":{},"e":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}},"r":{"docs":{},"i":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009}}}}}},"+":{"docs":{},"n":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},")":{"docs":{},",":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.031746031746031744},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":5.019736842105263},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.02040816326530612},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"w":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/summary.html":{"ref":"bt/summary.html","tf":0.016260162601626018},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.017006802721088437},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01818181818181818},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.041666666666666664},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.03296703296703297},"dp/summary.html":{"ref":"dp/summary.html","tf":0.012605042016806723},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.016260162601626018},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.02142857142857143},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}},"x":{"docs":{},"t":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}},"g":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},":":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},")":{"docs":{},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"e":{"docs":{},")":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"d":{"docs":{},"e":{"1":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497}},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.03468208092485549}}},".":{"docs":{},"v":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}},"2":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497}},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744}}},"{":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497}}}},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}},"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.02981029810298103},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.07142857142857142}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}},"s":{"docs":{},".":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"'":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372}}}},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.019736842105263157},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}},"u":{"docs":{},"m":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.024896265560165973},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.027210884353741496},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":5.027586206896552}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},")":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}},"s":{"docs":{},",":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}},"a":{"docs":{},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}},"s":{"docs":{},",":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.018957345971563982},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}},")":{"docs":{},"{":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}},"＝":{"0":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"docs":{}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"=":{"3":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"docs":{}},"]":{"docs":{},")":{"docs":{},"{":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563}}}}}}}},"i":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"]":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}},"j":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"]":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"j":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}},"s":{"docs":{},")":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}},"a":{"docs":{},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}},"l":{"docs":{},"l":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.017857142857142856},"bt/summary.html":{"ref":"bt/summary.html","tf":0.013550135501355014},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.028901734104046242},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},")":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bt/summary.html":{"ref":"bt/summary.html","tf":0.024390243902439025},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.023121387283236993},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},"{":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016}}}}}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},"!":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},".":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},"p":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}},"？":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}},"，":{"docs":{},"不":{"docs":{},"要":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"在":{"docs":{},"原":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"上":{"docs":{},"修":{"docs":{},"改":{"docs":{},"。":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.024896265560165973}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/introduction.html":{"ref":"dp/introduction.html","tf":5.0054945054945055},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}},"e":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":2.5}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.04}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}},"v":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},";":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}},"d":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.02074688796680498},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.017857142857142856},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.015873015873015872},"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.031007751937984496},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.02631578947368421},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01818181818181818},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.02032520325203252},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0273972602739726},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.025},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.02040816326530612},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.02857142857142857},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.02654867256637168},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.024844720496894408},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}}}}}},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},"e":{"docs":{},".":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}},":":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":10.004739336492891}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}},"x":{"docs":{},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}},"s":{"docs":{},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},":":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"实":{"docs":{},"现":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"docs":{},"k":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},"e":{"docs":{},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":2.5}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.016}},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.03007518796992481}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}},")":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.015037593984962405}}}}}}}}},"i":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.03759398496240601},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.04},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}},"d":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}}}},"b":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}},")":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}},"i":{"docs":{},"t":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":3.358333333333333}}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},".":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":5}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}},"t":{"docs":{},"h":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":3.353741496598639},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":3.352083333333333}},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":5}},"'":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}}}}}},"s":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}},"docs":{},"p":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"不":{"docs":{},"是":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{},"。":{"docs":{},"情":{"docs":{},"况":{"docs":{},"比":{"docs":{},"较":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"s":{"docs":{},"的":{"docs":{},"i":{"docs":{},"和":{"docs":{},"p":{"docs":{},"的":{"docs":{},"j":{"docs":{},"上":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"一":{"docs":{},"样":{"docs":{},"（":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"p":{"docs":{},"在":{"docs":{},"j":{"docs":{},"上":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{},"'":{"docs":{},"?":{"docs":{},"'":{"docs":{},"，":{"docs":{},"也":{"docs":{},"是":{"docs":{},"相":{"docs":{},"同":{"docs":{},"）":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"则":{"docs":{},"更":{"docs":{},"新":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},";":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{},"可":{"docs":{},"以":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"任":{"docs":{},"意":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"只":{"docs":{},"要":{"docs":{},"有":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242}},"e":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}},":":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"i":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.018957345971563982}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.02142857142857143}},")":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}}}}}}}}},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.020833333333333332}}},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}},"[":{"0":{"docs":{},"]":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}},"docs":{}}}}},",":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.018957345971563982}}},"[":{"0":{"docs":{},"]":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}},"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},"就":{"docs":{},"都":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"了":{"docs":{},"。":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"]":{"docs":{},"&":{"docs":{},"&":{"docs":{},"(":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"?":{"docs":{},"'":{"docs":{},"|":{"docs":{},"|":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}}}}},"l":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"a":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.03125},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.037037037037037035},"bt/summary.html":{"ref":"bt/summary.html","tf":0.018970189701897018},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.046511627906976744},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.057803468208092484},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.03007518796992481},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.032},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.02181818181818182},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.05325443786982249},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.03125},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.012195121951219513},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0273972602739726},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.02030456852791878},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.029166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.022123893805309734},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.018633540372670808},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}},"u":{"docs":{},"s":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"docs":{}}}},"docs":{}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"g":{"docs":{},"e":{"docs":{},"x":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bt/summary.html":{"ref":"bt/summary.html","tf":0.016260162601626018},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.031007751937984496},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},".":{"docs":{},"*":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},")":{"docs":{},";":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},",":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"，":{"docs":{},"输":{"docs":{},"出":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}},"w":{"0":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827}}},"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.03669724770642202},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.02586206896551724},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.02654867256637168}},")":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105}}},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.025210084033613446},"bt/summary.html":{"ref":"bt/summary.html","tf":0.018970189701897018},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},")":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}},"{":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"压":{"docs":{},"入":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"，":{"docs":{},"令":{"docs":{},"其":{"docs":{},"为":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"其":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"就":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"a":{"docs":{},"，":{"docs":{},"t":{"docs":{},"为":{"docs":{},"r":{"docs":{},"，":{"docs":{},"t":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"s":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"；":{"docs":{},"当":{"docs":{},"i":{"docs":{},"=":{"2":{"docs":{},"，":{"docs":{},"j":{"docs":{},"=":{"2":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"仍":{"docs":{},"为":{"docs":{},"r":{"docs":{},"a":{"docs":{},"，":{"docs":{},"t":{"docs":{},"为":{"docs":{},"r":{"docs":{},"a":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"t":{"docs":{},"也":{"docs":{},"是":{"docs":{},"s":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"子":{"docs":{},"串":{"docs":{},"数":{"docs":{},"在":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"基":{"docs":{},"础":{"docs":{},"上":{"docs":{},"加":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"。":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"docs":{}}}},"docs":{}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}},"这":{"docs":{},"时":{"docs":{},"i":{"docs":{},"=":{"2":{"docs":{},"，":{"docs":{},"j":{"docs":{},"=":{"2":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"为":{"docs":{},"r":{"docs":{},"a":{"docs":{},"，":{"docs":{},"t":{"docs":{},"为":{"docs":{},"r":{"docs":{},"s":{"docs":{},"，":{"docs":{},"t":{"docs":{},"现":{"docs":{},"在":{"docs":{},"不":{"docs":{},"是":{"docs":{},"s":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"当":{"docs":{},"之":{"docs":{},"前":{"docs":{},"一":{"docs":{},"次":{"docs":{},"是":{"docs":{},"子":{"docs":{},"串":{"docs":{},"所":{"docs":{},"以":{"docs":{},"现":{"docs":{},"在":{"docs":{},"计":{"docs":{},"数":{"docs":{},"为":{"1":{"docs":{},".":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},"e":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"维":{"docs":{},"护":{"docs":{},"实":{"docs":{},"时":{"docs":{},"更":{"docs":{},"新":{"docs":{},"一":{"docs":{},"个":{"docs":{},"当":{"docs":{},"前":{"docs":{},"可":{"docs":{},"达":{"docs":{},"范":{"docs":{},"围":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.015228426395939087}},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"2":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.030456852791878174}},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},")":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}},".":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939}}},"取":{"docs":{},"第":{"1":{"docs":{},"位":{"docs":{},"d":{"docs":{},"，":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"组":{"docs":{},"成":{"docs":{},"s":{"3":{"docs":{},"的":{"docs":{},"前":{"docs":{},"两":{"docs":{},"位":{"docs":{},"a":{"docs":{},"a":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}},"3":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.03553299492385787}},")":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}},"=":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01090909090909091},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0410958904109589},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.01875}},"e":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.05517241379310345}},"m":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}}}},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":5.016806722689076},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":5}},",":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}},"t":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01818181818181818},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.02197802197802198},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":3.3419540229885056},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}},"c":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.016260162601626018},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"e":{"docs":{},")":{"docs":{},".":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0273972602739726}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}},"o":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}},"m":{"docs":{},"e":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}},"l":{"docs":{},"v":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},"e":{"docs":{},"n":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}},"r":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":5}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.039473684210526314},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.014545454545454545},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.016666666666666666},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.01327433628318584},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}},"?":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}}},"r":{"docs":{},"t":{"docs":{"sort/introduction.html":{"ref":"sort/introduction.html","tf":10},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":5.03125},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":2.515873015873016}},"。":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"用":{"docs":{},"来":{"docs":{},"模":{"docs":{},"拟":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}},"，":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.013774104683195593},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.023668639053254437},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}},";":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}},")":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.016260162601626018},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"e":{"docs":{},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"：":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}},"c":{"docs":{},"k":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}},"r":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.013774104683195593},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.012195121951219513},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0365296803652968},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":5.0152284263959395},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.018633540372670808},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}},"s":{"docs":{},",":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}}},"e":{"docs":{},"p":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}},";":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"u":{"docs":{},"m":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":5.006802721088436},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":3.353741496598639},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":5.008403361344538}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}},"i":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}},"g":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}},";":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},".":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},"docs":{}}}},"docs":{}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":10.024793388429751},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}}},"e":{"docs":{},"e":{"docs":{},"]":{"docs":{},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":5.0228310502283104},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}},"t":{"docs":{},"?":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"]":{"docs":{},"[":{"docs":{},"a":{"docs":{},"l":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":5.024390243902439}}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}},"c":{"docs":{},"h":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":5.018348623853211}},"模":{"docs":{},"版":{"docs":{},"作":{"docs":{},"为":{"docs":{},"子":{"docs":{},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"逐":{"docs":{},"行":{"docs":{},"，":{"docs":{},"逐":{"docs":{},"列":{"docs":{},"的":{"docs":{},"去":{"docs":{},"试":{"docs":{},"。":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},"?":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},"]":{"docs":{},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"y":{"docs":{},")":{"docs":{},"]":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}}},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01818181818181818},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}}},".":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}},"i":{"docs":{},")":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"j":{"docs":{},")":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},"。":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125}},")":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}},"=":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}},"docs":{}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}},"docs":{}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}},"m":{"docs":{},"e":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}},"n":{"docs":{},"d":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}},"w":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}},";":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.022935779816513763},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.02586206896551724},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}}},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"?":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.025210084033613446}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"−":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}},"[":{"docs":{},"j":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"]":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"c":{"docs":{},"s":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"c":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"空":{"docs":{},"串":{"docs":{},"，":{"docs":{},"t":{"docs":{},"不":{"docs":{},"是":{"docs":{},"空":{"docs":{},"串":{"docs":{},"，":{"docs":{},"s":{"docs":{},"没":{"docs":{},"有":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"c":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0273972602739726}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}},"s":{"docs":{},"e":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":5},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},"m":{"docs":{},"p":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.020833333333333332},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}},"e":{"docs":{},"]":{"docs":{},"*":{"docs":{},"/":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},",":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.03317535545023697}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.020833333333333332}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}},"x":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.024844720496894408},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.027586206896551724}},";":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"/":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}}},".":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":5.023255813953488},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":3.346491228070175},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},"的":{"docs":{},"变":{"docs":{},"种":{"docs":{},"，":{"docs":{},"总":{"docs":{},"体":{"docs":{},"思":{"docs":{},"想":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"去":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"就":{"docs":{},"是":{"docs":{},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"几":{"docs":{},"乎":{"docs":{},"就":{"docs":{},"是":{"docs":{},"完":{"docs":{},"全":{"docs":{},"一":{"docs":{},"样":{"docs":{},",":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},">":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.019736842105263157}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}},"e":{"docs":{},"e":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":5.013550135501355},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.019736842105263157},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}},".":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.02168021680216802},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.057803468208092484},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.024}},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}},"）":{"docs":{},"的":{"docs":{},"概":{"docs":{},"念":{"docs":{},"。":{"docs":{},"在":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"方":{"docs":{},"法":{"docs":{},"中":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"为":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"额":{"docs":{},"外":{"docs":{},"分":{"docs":{},"配":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{},"其":{"docs":{},"前":{"docs":{},"驱":{"docs":{},"（":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"）":{"docs":{},"和":{"docs":{},"后":{"docs":{},"继":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"）":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"利":{"docs":{},"用":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"中":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"空":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{},"某":{"docs":{},"种":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"下":{"docs":{},"的":{"docs":{},"前":{"docs":{},"驱":{"docs":{},"节":{"docs":{},"点":{"docs":{},"或":{"docs":{},"后":{"docs":{},"继":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":5.007142857142857},"dp/triangle.html":{"ref":"dp/triangle.html","tf":10.004424778761061}},"e":{"docs":{},".":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}},"docs":{}}}}}}}},"docs":{},"i":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}},";":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}},")":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.01327433628318584}}},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}},"m":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}},"w":{"docs":{},"o":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":2.5105820105820107},"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":5.008403361344538}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}}}}}},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}},".":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.01652892561983471}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748}},")":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.025210084033613446},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563}}},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748}}}}}}}},"/":{"docs":{},"c":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},":":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},",":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"s":{"docs":{},".":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}},"p":{"docs":{},"s":{"docs":{},":":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},"/":{"2":{"docs":{},")":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}}}}},"docs":{}}},"docs":{}}}}},"p":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}},"m":{"docs":{},"p":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},"和":{"docs":{},"s":{"docs":{},"都":{"docs":{},"是":{"docs":{},"空":{"docs":{},"串":{"docs":{},".":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}},"是":{"docs":{},"空":{"docs":{},"串":{"docs":{},"，":{"docs":{},"s":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}},"版":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}},"s":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.034482758620689655},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}},"t":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}}}},"w":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}},"i":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.02040816326530612},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}},"a":{"docs":{},"y":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":5.0236220472440944}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.01652892561983471}},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"i":{"docs":{},"n":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}},"l":{"docs":{},"d":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":3.333333333333333}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.022935779816513763},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":3.3406060606060604},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":5.029585798816568},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":5.010989010989011},"dp/word-break.html":{"ref":"dp/word-break.html","tf":5.027397260273973}},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}},"题":{"docs":{},"目":{"docs":{},"链":{"docs":{},"接":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}},":":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"s":{"docs":{},",":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}},")":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.029585798816568046}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}},"s":{"docs":{},"t":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}},"|":{"docs":{"./":{"ref":"./","tf":0.061224489795918366},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.025}},"|":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.03550295857988166},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.02040816326530612},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}},".":{"docs":{},"这":{"docs":{},"样":{"docs":{},"某":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"是":{"docs":{},"否":{"docs":{},"可":{"docs":{},"以":{"docs":{},"放":{"docs":{},"置":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"已":{"docs":{},"经":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"运":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"去":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"n":{"docs":{},"个":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"的":{"docs":{},"解":{"docs":{},"，":{"docs":{},"伪":{"docs":{},"代":{"docs":{},"码":{"docs":{},"思":{"docs":{},"想":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"|":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}},"发":{"docs":{},"w":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"，":{"docs":{},"我":{"docs":{},"会":{"docs":{},"立":{"docs":{},"马":{"docs":{},"加":{"docs":{},"上":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}}}}}}}}}}}},"学":{"docs":{},"习":{"docs":{},"笔":{"docs":{},"记":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}},"最":{"docs":{},"近":{"docs":{},"因":{"docs":{},"为":{"docs":{},"种":{"docs":{},"种":{"docs":{},"原":{"docs":{},"因":{"docs":{},"又":{"docs":{},"要":{"docs":{},"开":{"docs":{},"始":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"了":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"把":{"docs":{},"之":{"docs":{},"前":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"和":{"docs":{},"九":{"docs":{},"章":{"docs":{},"算":{"docs":{},"法":{"docs":{},"视":{"docs":{},"频":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"的":{"docs":{},"笔":{"docs":{},"记":{"docs":{},"总":{"docs":{},"结":{"docs":{},"一":{"docs":{},"下":{"docs":{},"了":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"地":{"docs":{},"方":{"docs":{},"参":{"docs":{},"考":{"docs":{},"了":{"docs":{},"九":{"docs":{},"章":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"和":{"docs":{},"讲":{"docs":{},"义":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.02040816326530612}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"后":{"docs":{},"a":{"docs":{},"c":{"docs":{},"结":{"docs":{},"果":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}},"优":{"docs":{},"解":{"docs":{},"，":{"docs":{},"i":{"docs":{},"n":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}},"右":{"docs":{},"边":{"docs":{},"那":{"docs":{},"个":{"docs":{},"点":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}},"%":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}},"(":{"0":{"docs":{},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}},"1":{"2":{"docs":{},")":{"docs":{},".":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}},"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"≤":{"docs":{},"s":{"docs":{},"≤":{"docs":{},"m":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}},"2":{"docs":{},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}}}}}},"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}},"i":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"n":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.018957345971563982},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.02197802197802198},"dp/summary.html":{"ref":"dp/summary.html","tf":0.012605042016806723},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.02654867256637168},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"[":{"docs":{},"]":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}},"e":{"docs":{},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}},"l":{"1":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}}}}}}},"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}},"o":{"docs":{},"w":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}},"f":{"docs":{},"t":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.031578947368421054}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}},"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.013392857142857142}}}}},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428}}}}}}}}}},">":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985}}}}}},"c":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"u":{"docs":{},"m":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}},"t":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"x":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},",":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"!":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}}}},"l":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}},")":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"a":{"docs":{},"n":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}},"_":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"2":{"docs":{},")":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}},"docs":{}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},"(":{"docs":{},"x":{"docs":{},"+":{"docs":{},"y":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},";":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}},"docs":{}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}},"s":{"1":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}},"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}},"e":{"docs":{},"t":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"%":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"docs":{}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.01084010840108401}}}}}}},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}}},")":{"docs":{},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}},"[":{"docs":{},"i":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"递":{"docs":{},"归":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},".":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}}},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}},"p":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}},"w":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},",":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},"[":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"移":{"docs":{},"动":{"docs":{},"指":{"docs":{},"针":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}},"a":{"1":{"docs":{},",":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}},"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.0125},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"k":{"docs":{},".":{"docs":{},"a":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}},"d":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"背":{"docs":{},"包":{"docs":{},"问":{"docs":{},"题":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}},"j":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}},"*":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}},"*":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"*":{"docs":{},"*":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}}},"注":{"docs":{},"意":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"*":{"docs":{},"*":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"[":{"docs":{},"]":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}},"i":{"docs":{},"f":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}},"模":{"docs":{},"版":{"docs":{},"程":{"docs":{},"序":{"docs":{},"，":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"递":{"docs":{},"归":{"docs":{},"树":{"docs":{},"理":{"docs":{},"解":{"docs":{},"*":{"docs":{},"*":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}},"i":{"docs":{},"f":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"/":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"}":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"p":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}},"s":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"+":{"2":{"docs":{},"i":{"docs":{},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"3":{"docs":{},"i":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.02074688796680498},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.013774104683195593},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.022556390977443608},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.04},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.025454545454545455},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.03550295857988166},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.03296703296703297},"dp/summary.html":{"ref":"dp/summary.html","tf":0.01680672268907563},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.028455284552845527},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.030456852791878174},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.020833333333333332},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.017241379310344827},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.03982300884955752},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}},"=":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}},"]":{"docs":{},"?":{"docs":{},"(":{"docs":{},"\\":{"docs":{},"\\":{"docs":{},"d":{"docs":{},"+":{"docs":{},"\\":{"docs":{},"\\":{"docs":{},".":{"docs":{},"?":{"docs":{},"|":{"docs":{},"\\":{"docs":{},"\\":{"docs":{},".":{"docs":{},"\\":{"docs":{},"\\":{"docs":{},"d":{"docs":{},"+":{"docs":{},")":{"docs":{},"\\":{"docs":{},"\\":{"docs":{},"d":{"docs":{},"*":{"docs":{},"(":{"docs":{},"e":{"docs":{},"[":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}}},"docs":{}},"\\":{"docs":{},"\\":{"docs":{},"d":{"docs":{},"+":{"docs":{},")":{"docs":{},"?":{"docs":{},"\"":{"docs":{},";":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}}},".":{"docs":{},".":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}},".":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242}}}}},"/":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.03296703296703297}},"/":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.03125},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0136986301369863},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"s":{"2":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237}}}}}},"下":{"docs":{},"面":{"docs":{},"这":{"docs":{},"个":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"作":{"docs":{},"用":{"docs":{},"于":{"docs":{},"一":{"docs":{},"行":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"还":{"docs":{},"没":{"docs":{},"填":{"docs":{},"满":{"docs":{},"一":{"docs":{},"行":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"的":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"失":{"docs":{},"败":{"docs":{},"了":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"数":{"docs":{},"减":{"1":{"docs":{},".":{"docs":{},"此":{"docs":{},"时":{"docs":{},"判":{"docs":{},"断":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"的":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"数":{"docs":{},"是":{"docs":{},"否":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"以":{"docs":{},"当":{"docs":{},"前":{"docs":{},"这":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"不":{"docs":{},"能":{"docs":{},"算":{"docs":{},"作":{"docs":{},"这":{"docs":{},"行":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"就":{"docs":{},"减":{"docs":{},"少":{"docs":{},"一":{"docs":{},"个":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"（":{"docs":{},"为":{"docs":{},"啥":{"docs":{},"要":{"docs":{},"减":{"1":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"当":{"docs":{},"前":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"后":{"docs":{},"发":{"docs":{},"现":{"docs":{},"比":{"docs":{},"l":{"docs":{},"长":{"docs":{},"了":{"docs":{},"，":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"o":{"docs":{},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"传":{"docs":{},"得":{"docs":{},"是":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"，":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"实":{"docs":{},"则":{"docs":{},"k":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"l":{"docs":{},"i":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}},"d":{"docs":{},"d":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}},"d":{"docs":{},"f":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}},"o":{"docs":{},"e":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}},"f":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.01834862385321101},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}},"如":{"docs":{},"果":{"docs":{},"已":{"docs":{},"经":{"docs":{},"找":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"则":{"docs":{},"打":{"docs":{},"印":{"docs":{},"结":{"docs":{},"果":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}}}},"放":{"docs":{},"置":{"docs":{},"皇":{"docs":{},"后":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}},"继":{"docs":{},"续":{"docs":{},"探":{"docs":{},"测":{"docs":{},"下":{"docs":{},"一":{"docs":{},"行":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}},"试":{"docs":{},"探":{"docs":{},"第":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"行":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"列":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}},"t":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"r":{"docs":{},"i":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}},"测":{"docs":{},"试":{"docs":{},"用":{"docs":{},"例":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},".":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"，":{"docs":{},"从":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"位":{"docs":{},"置":{"docs":{},"到":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"做":{"docs":{},"多":{"docs":{},"要":{"docs":{},"可":{"docs":{},"以":{"docs":{},"切":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}},"*":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"=":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.04979253112033195},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.06611570247933884},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.05045871559633028},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.05357142857142857},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.05042016806722689},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.0582010582010582},"bt/summary.html":{"ref":"bt/summary.html","tf":0.056910569105691054},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.046511627906976744},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.046242774566473986},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.02631578947368421},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.03759398496240601},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.04},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.037914691943127965},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.03741496598639456},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.031578947368421054},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.039473684210526314},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.05454545454545454},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.0650887573964497},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.07291666666666667},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.10989010989010989},"dp/summary.html":{"ref":"dp/summary.html","tf":0.04201680672268908},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0975609756097561},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.07086614173228346},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0684931506849315},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0593607305936073},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.07614213197969544},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.07083333333333333},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.07317073170731707},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.061224489795918366},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.1},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.09285714285714286},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.05172413793103448},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.06637168141592921},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.055900621118012424},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.058823529411764705},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.05517241379310345}},"=":{"0":{"docs":{},")":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.016597510373443983},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.03125},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/summary.html":{"ref":"bt/summary.html","tf":0.02168021680216802},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.03468208092485549},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.019736842105263157},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.03317535545023697},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.027210884353741496},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.05504587155963303},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.01818181818181818},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.023668639053254437},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.016260162601626018},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0273972602739726},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.015228426395939087},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.029166666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.024390243902439025},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.030612244897959183},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0375},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.02586206896551724},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.017699115044247787},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}}},"\"":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"t":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}},">":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.034482758620689655}}}},"[":{"0":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},".":{"docs":{},".":{"docs":{},"i":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}},"n":{"docs":{},",":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}},",":{"0":{"docs":{},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"]":{"docs":{},"[":{"0":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}},"docs":{}}}},"1":{"0":{"0":{"docs":{},",":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}},"docs":{}},"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}},"docs":{}}},"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"docs":{}}},"5":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},"]":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}},"与":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"2":{"0":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}},"docs":{}}},"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dp/summary.html":{"ref":"dp/summary.html","tf":0.012605042016806723}}},"]":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.016483516483516484}},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}},"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}},"]":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}},"4":{"docs":{},"]":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},",":{"1":{"docs":{},",":{"8":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}},"docs":{}}},"docs":{}}},"docs":{},"−":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}},"docs":{}}},"docs":{}}},"docs":{}}}},"6":{"docs":{},",":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}}}}},"docs":{}}},"docs":{}}},"7":{"docs":{},"]":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}},"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"s":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}},".":{"docs":{},".":{"docs":{},"q":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"\"":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}},"s":{"docs":{},"f":{"docs":{},"c":{"docs":{},"s":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},"]":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}},"−":{"2":{"docs":{},",":{"1":{"docs":{},",":{"docs":{},"−":{"3":{"docs":{},",":{"4":{"docs":{},",":{"docs":{},"−":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"docs":{},"−":{"5":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}},"j":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}},"docs":{}}}},"\\":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.03296703296703297}},"*":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}},"i":{"docs":{},"d":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},".":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},";":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}},")":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},";":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}},"docs":{}}}},"docs":{}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},",":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":5.010526315789473},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}}},"t":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"2":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}},"docs":{}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}}}},"docs":{}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.005509641873278237},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.021052631578947368},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0273972602739726},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},":":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"比":{"docs":{},"较":{"docs":{},"好":{"docs":{},"理":{"docs":{},"解":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":5.008333333333334}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}},"o":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},"a":{"docs":{},"l":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}},"[":{"docs":{},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.03571428571428571}},"]":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}},"docs":{},"i":{"docs":{},")":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}}}},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"空":{"docs":{},"间":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"即":{"docs":{},"只":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"常":{"docs":{},"数":{"docs":{},"空":{"docs":{},"间":{"docs":{},"；":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}},"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}},"n":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"y":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}},"n":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},")":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}},"!":{"docs":{},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}},"m":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},"n":{"docs":{},")":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"d":{"docs":{},"d":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}},"n":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"bt/summary.html":{"ref":"bt/summary.html","tf":0.016260162601626018},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.027522935779816515},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"c":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"e":{"docs":{},".":{"docs":{},"原":{"docs":{},"题":{"docs":{},"链":{"docs":{},"接":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}},"e":{"docs":{},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}},"*":{"docs":{},"*":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}},"a":{"docs":{},"l":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}},"n":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"不":{"docs":{},"稳":{"docs":{},"定":{"docs":{},"。":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":5},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.019736842105263157},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":2.5},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":2.5}},"顺":{"docs":{},"序":{"docs":{},"是":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}},".":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105}}}}}}}}},"x":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.12690355329949238},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}},".":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}}}},")":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}},"y":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.027472527472527472},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.012448132780082987},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.02197802197802198},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}},"从":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"点":{"docs":{},"来":{"docs":{},"？":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}}}}}}},"到":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"点":{"docs":{},"去":{"docs":{},"？":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}}}}}}}}}},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"方":{"docs":{},"程":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}},"]":{"docs":{},"区":{"docs":{},"间":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}},"{":{"1":{"docs":{},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}},"2":{"docs":{},",":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}},"3":{"docs":{},",":{"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"docs":{},"#":{"docs":{},",":{"docs":{},"#":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"}":{"docs":{},",":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{"math/math.html":{"ref":"math/math.html","tf":0.03319502074688797},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0440771349862259},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.013761467889908258},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.026785714285714284},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.04201680672268908},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.021164021164021163},"bt/summary.html":{"ref":"bt/summary.html","tf":0.037940379403794036},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.07751937984496124},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.046242774566473986},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.05263157894736842},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.045112781954887216},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.048},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.037914691943127965},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.030612244897959183},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.05263157894736842},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.07236842105263158},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.06422018348623854},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.04363636363636364},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.03550295857988166},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.052083333333333336},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.04395604395604396},"dp/summary.html":{"ref":"dp/summary.html","tf":0.025210084033613446},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.044715447154471545},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0410958904109589},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.02030456852791878},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.05416666666666667},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.036585365853658534},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.030612244897959183},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.025},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.05714285714285714},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.02586206896551724},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.05752212389380531},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.055900621118012424},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},"/":{"docs":{},"*":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},"/":{"2":{"docs":{},".":{"docs":{},"a":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}},"b":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}},"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}},"}":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.016597510373443983},"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.046831955922865015},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.022935779816513763},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.022321428571428572},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.05042016806722689},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.021164021164021163},"bt/summary.html":{"ref":"bt/summary.html","tf":0.037940379403794036},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.06976744186046512},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.057803468208092484},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.046052631578947366},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.03007518796992481},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.032},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.04739336492890995},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.047619047619047616},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.05263157894736842},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.05263157894736842},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.03669724770642202},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.06181818181818182},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.04142011834319527},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.0625},"dp/summary.html":{"ref":"dp/summary.html","tf":0.012605042016806723},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.04878048780487805},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.01015228426395939},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.075},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.02142857142857143},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.04424778761061947},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.031055900621118012},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.013157894736842105},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}},"~":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.014285714285714285}}},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"质":{"docs":{},"数":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"找":{"docs":{},"出":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"的":{"docs":{},"数":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}},"之":{"docs":{},"间":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"平":{"docs":{},"方":{"docs":{},"数":{"docs":{},"一":{"docs":{},"定":{"docs":{},"在":{"docs":{},"[":{"docs":{},"x":{"docs":{},",":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"s":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"记":{"docs":{},"录":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"自":{"docs":{},"顶":{"docs":{},"向":{"docs":{},"下":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"是":{"docs":{},"一":{"docs":{},"定":{"docs":{},"的":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"降":{"docs":{},"低":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"到":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.008298755186721992}}}}}}}}}}}},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"找":{"docs":{},"中":{"docs":{},"点":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"左":{"docs":{},"右":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"特":{"docs":{},"性":{"docs":{},"实":{"docs":{},"现":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}},"小":{"docs":{},"问":{"docs":{},"题":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"大":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"化":{"docs":{},"搜":{"docs":{},"索":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"实":{"docs":{},"现":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}},"在":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"范":{"docs":{},"围":{"docs":{},"内":{"docs":{},"，":{"docs":{},"则":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"跳":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"超":{"docs":{},"出":{"docs":{},"最":{"docs":{},"大":{"docs":{},"可":{"docs":{},"达":{"docs":{},"范":{"docs":{},"围":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"，":{"docs":{},"则":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"+":{"docs":{},"+":{"docs":{},"，":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"常":{"docs":{},"见":{"docs":{},"题":{"docs":{},"型":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996},"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}},"类":{"docs":{},"型":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"考":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}},"规":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"d":{"docs":{},"p":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"：":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}},"手":{"docs":{},"动":{"docs":{},"实":{"docs":{},"现":{"docs":{},"求":{"docs":{},"平":{"docs":{},"方":{"docs":{},"根":{"docs":{},"，":{"docs":{},"利":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"实":{"docs":{},"现":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}},"把":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"低":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}}}}},"整":{"docs":{},"除":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"都":{"docs":{},"不":{"docs":{},"是":{"docs":{},"质":{"docs":{},"数":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}}},"正":{"docs":{},"负":{"docs":{},"数":{"docs":{},"指":{"docs":{},"数":{"docs":{},"n":{"docs":{},"*":{"docs":{},"*":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"创":{"docs":{},"造":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"是":{"1":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"docs":{}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.025210084033613446},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"边":{"docs":{},"界":{"docs":{},"条":{"docs":{},"件":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}},"s":{"docs":{},"以":{"0":{"docs":{},"为":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"以":{"1":{"docs":{},"位":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}},"下":{"docs":{},"标":{"docs":{},"的":{"docs":{},"前":{"docs":{},"后":{"docs":{},"顺":{"docs":{},"序":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}},"消":{"docs":{},"去":{"docs":{},"重":{"docs":{},"复":{"docs":{},"组":{"docs":{},"合":{"docs":{},"和":{"docs":{},"不":{"docs":{},"必":{"docs":{},"要":{"docs":{},"的":{"docs":{},"遍":{"docs":{},"历":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}},"的":{"docs":{},"等":{"docs":{},"效":{"docs":{},"性":{"docs":{},"降":{"docs":{},"低":{"docs":{},"循":{"docs":{},"环":{"docs":{},"区":{"docs":{},"间":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"公":{"docs":{},"共":{"docs":{},"点":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}},"四":{"docs":{},"点":{"docs":{},"要":{"docs":{},"素":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}},"前":{"docs":{},"j":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}},"背":{"docs":{},"包":{"docs":{},"。":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"是":{"0":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"docs":{}}}}}}},"两":{"docs":{},"种":{"docs":{},"解":{"docs":{},"法":{"docs":{},"。":{"docs":{},"分":{"docs":{},"析":{"docs":{},"思":{"docs":{},"路":{"docs":{},"同":{"docs":{},"上":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}},"常":{"docs":{},"规":{"docs":{},"套":{"docs":{},"路":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}},"简":{"docs":{},"单":{"docs":{},"来":{"docs":{},"说":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"考":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}}}},"：":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"的":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"部":{"docs":{},"分":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"＋":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}},"d":{"docs":{},"f":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}},"若":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"有":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}}}}},"上":{"docs":{},"下":{"docs":{},"左":{"docs":{},"右":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"行":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{"math/math.html":{"ref":"math/math.html","tf":0.004149377593360996}}}}}},"\"":{"0":{"docs":{},"\"":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"1":{"2":{"docs":{},"\"":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},",":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}},"5":{"4":{"2":{"3":{"7":{"6":{"0":{"docs":{},"\"":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}},"2":{"7":{"1":{"3":{"5":{"4":{"6":{"0":{"docs":{},"\"":{"docs":{},";":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"e":{"1":{"0":{"docs":{},"\"":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"docs":{}},"docs":{}}},"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.014545454545454545},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},"\"":{"docs":{},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}},"\"":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\"":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"e":{"docs":{},"c":{"docs":{},"\"":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"\"":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"\"":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}},")":{"docs":{},";":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}},"e":{"docs":{},"x":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"\"":{"docs":{},"]":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}},"o":{"docs":{},"f":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}},"h":{"docs":{},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}},"(":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}},")":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"q":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105}}}}}},"q":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},",":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{},".":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}},"*":{"docs":{},"a":{"docs":{},"*":{"docs":{},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},"]":{"docs":{},".":{"docs":{},"a":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}},"t":{"docs":{},"\"":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"\"":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.02197802197802198}}}}},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}},"l":{"docs":{},"\"":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}},",":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242}}}}}}},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}},"为":{"docs":{},"例":{"docs":{},"）":{"docs":{},"：":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"?":{"docs":{},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"[":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},":":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}},";":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.008264462809917356},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}},">":{"0":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}},"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.011019283746556474},"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/summary.html":{"ref":"bt/summary.html","tf":0.005420054200542005},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.031578947368421054},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.01775147928994083},"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.020833333333333332},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.04395604395604396},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.023622047244094488},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"=":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.011560693641618497},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.01327433628318584}}}},"?":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.011019283746556474},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":5.0137931034482754}},".":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}},"u":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.023255813953488372}}}}}}}},"s":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815},"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.01775147928994083}},";":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}},"*":{"docs":{},"*":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}},"[":{"docs":{},"i":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}},"]":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.014218009478672985},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}}}}}}},"]":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}},"i":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"当":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"达":{"docs":{},"到":{"docs":{},"子":{"docs":{},"串":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"之":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"这":{"docs":{},"些":{"docs":{},"有":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"串":{"docs":{},"，":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"指":{"docs":{},"针":{"docs":{},"帮":{"docs":{},"忙":{"docs":{},"找":{"docs":{},"，":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"指":{"docs":{},"针":{"docs":{},"帮":{"docs":{},"忙":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"在":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"中":{"docs":{},"存":{"docs":{},"过":{"docs":{},"的":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"找":{"docs":{},"到":{"docs":{},"后":{"docs":{},"给":{"docs":{},"计":{"docs":{},"数":{"docs":{},"加":{"1":{"docs":{},"后":{"docs":{},"的":{"docs":{},"总":{"docs":{},"计":{"docs":{},"数":{"docs":{},"是":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"全":{"docs":{},"局":{"docs":{},"最":{"docs":{},"小":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"，":{"docs":{},"更":{"docs":{},"新":{"docs":{},"返":{"docs":{},"回":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"，":{"docs":{},"更":{"docs":{},"新":{"docs":{},"最":{"docs":{},"小":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"是":{"docs":{},"，":{"docs":{},"继":{"docs":{},"续":{"docs":{},"找":{"docs":{},"。":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"然":{"docs":{},"，":{"docs":{},"边":{"docs":{},"界":{"docs":{},"条":{"docs":{},"件":{"docs":{},"页":{"docs":{},"不":{"docs":{},"能":{"docs":{},"少":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"k":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},"时":{"docs":{},"候":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"=":{"2":{"docs":{},"，":{"docs":{},"j":{"docs":{},"=":{"1":{"docs":{},"时":{"docs":{},"，":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242}}}}},"docs":{}}}}},"docs":{}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"后":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"从":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"到":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"第":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"数":{"docs":{},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{},"更":{"docs":{},"新":{"docs":{},"了":{"docs":{},",":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"利":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"来":{"docs":{},"存":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"整":{"docs":{},"个":{"docs":{},"母":{"docs":{},"串":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"要":{"docs":{},"求":{"docs":{},"最":{"docs":{},"短":{"docs":{},"的":{"docs":{},"包":{"docs":{},"含":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"中":{"docs":{},"间":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"允":{"docs":{},"许":{"docs":{},"有":{"docs":{},"非":{"docs":{},"子":{"docs":{},"串":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"，":{"docs":{},"当":{"docs":{},"遇":{"docs":{},"见":{"docs":{},"非":{"docs":{},"子":{"docs":{},"串":{"docs":{},"字":{"docs":{},"符":{"docs":{},"而":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"又":{"docs":{},"没":{"docs":{},"到":{"docs":{},"子":{"docs":{},"串":{"docs":{},"长":{"docs":{},"度":{"docs":{},"时":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"继":{"docs":{},"续":{"docs":{},"走":{"docs":{},"。":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"自":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}},"：":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}},"计":{"docs":{},"算":{"docs":{},"有":{"docs":{},"限":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"：":{"docs":{},"把":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"同":{"docs":{},"类":{"docs":{},"数":{"docs":{},"据":{"docs":{},"按":{"docs":{},"照":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"是":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"，":{"docs":{},"则":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"群":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"；":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"则":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"2":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"算":{"docs":{},"术":{"docs":{},"平":{"docs":{},"均":{"docs":{},"值":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"群":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"和":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}},"分":{"docs":{},"析":{"docs":{},"看":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"词":{"docs":{},"，":{"docs":{},"在":{"docs":{},"一":{"docs":{},"行":{"docs":{},"出":{"docs":{},"现":{"docs":{},"也":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"一":{"docs":{},"列":{"docs":{},"出":{"docs":{},"现":{"docs":{},"也":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"一":{"docs":{},"行":{"docs":{},"往":{"docs":{},"下":{"docs":{},"拐":{"docs":{},"弯":{"docs":{},"也":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"一":{"docs":{},"行":{"docs":{},"往":{"docs":{},"上":{"docs":{},"拐":{"docs":{},"弯":{"docs":{},"也":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"一":{"docs":{},"列":{"docs":{},"往":{"docs":{},"左":{"docs":{},"拐":{"docs":{},"弯":{"docs":{},"也":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"一":{"docs":{},"列":{"docs":{},"往":{"docs":{},"右":{"docs":{},"拐":{"docs":{},"弯":{"docs":{},"也":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"性":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"来":{"docs":{},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"起":{"docs":{},"点":{"docs":{},"字":{"docs":{},"母":{"docs":{},"上":{"docs":{},"下":{"docs":{},"左":{"docs":{},"右":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"看":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"含":{"docs":{},"有":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"。":{"docs":{},"还":{"docs":{},"要":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"从":{"docs":{},"当":{"docs":{},"前":{"docs":{},"这":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"docs":{},"否":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"了":{"docs":{},"，":{"docs":{},"过":{"docs":{},"了":{"docs":{},"这":{"docs":{},"一":{"docs":{},"轮":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"要":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"对":{"docs":{},"于":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"这":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"也":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{},"访":{"docs":{},"问":{"docs":{},"的":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"仍":{"docs":{},"然":{"docs":{},"是":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"总":{"docs":{},"结":{"docs":{},"一":{"docs":{},"下":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"基":{"docs":{},"本":{"docs":{},"思":{"docs":{},"路":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"决":{"docs":{},"定":{"docs":{},"要":{"docs":{},"存":{"docs":{},"储":{"docs":{},"什":{"docs":{},"么":{"docs":{},"历":{"docs":{},"史":{"docs":{},"信":{"docs":{},"息":{"docs":{},"以":{"docs":{},"及":{"docs":{},"用":{"docs":{},"什":{"docs":{},"么":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"信":{"docs":{},"息":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"是":{"docs":{},"最":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"递":{"docs":{},"推":{"docs":{},"式":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"如":{"docs":{},"从":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"历":{"docs":{},"史":{"docs":{},"信":{"docs":{},"息":{"docs":{},"中":{"docs":{},"得":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"步":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"起":{"docs":{},"始":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"题":{"docs":{},"套":{"docs":{},"用":{"docs":{},"排":{"docs":{},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{},"模":{"docs":{},"版":{"docs":{},"，":{"docs":{},"是":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"找":{"docs":{},"解":{"docs":{},"决":{"docs":{},"方":{"docs":{},"案":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"值":{"docs":{},"得":{"docs":{},"注":{"docs":{},"意":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"：":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"看":{"docs":{},"到":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"把":{"docs":{},"棋":{"docs":{},"盘":{"docs":{},"存":{"docs":{},"储":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"n":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"a":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"值":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"代":{"docs":{},"表":{"docs":{},"第":{"docs":{},"i":{"docs":{},"行":{"docs":{},"的":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"便":{"docs":{},"可":{"docs":{},"以":{"docs":{},"把":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"规":{"docs":{},"模":{"docs":{},"压":{"docs":{},"缩":{"docs":{},"为":{"docs":{},"一":{"docs":{},"维":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"在":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"冲":{"docs":{},"突":{"docs":{},"时":{"docs":{},"也":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"每":{"docs":{},"行":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"，":{"docs":{},"且":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"占":{"docs":{},"据":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"行":{"docs":{},"冲":{"docs":{},"突":{"docs":{},"就":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"了":{"docs":{},"，":{"docs":{},"其":{"docs":{},"次":{"docs":{},"是":{"docs":{},"列":{"docs":{},"冲":{"docs":{},"突":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"下":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"与":{"docs":{},"当":{"docs":{},"前":{"docs":{},"要":{"docs":{},"放":{"docs":{},"置":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"的":{"docs":{},"列":{"docs":{},"j":{"docs":{},"相":{"docs":{},"等":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"至":{"docs":{},"于":{"docs":{},"斜":{"docs":{},"线":{"docs":{},"冲":{"docs":{},"突":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"观":{"docs":{},"察":{"docs":{},"可":{"docs":{},"以":{"docs":{},"发":{"docs":{},"现":{"docs":{},"所":{"docs":{},"有":{"docs":{},"在":{"docs":{},"斜":{"docs":{},"线":{"docs":{},"上":{"docs":{},"冲":{"docs":{},"突":{"docs":{},"的":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"都":{"docs":{},"有":{"docs":{},"规":{"docs":{},"律":{"docs":{},"即":{"docs":{},"它":{"docs":{},"们":{"docs":{},"所":{"docs":{},"在":{"docs":{},"的":{"docs":{},"行":{"docs":{},"列":{"docs":{},"互":{"docs":{},"减":{"docs":{},"的":{"docs":{},"绝":{"docs":{},"对":{"docs":{},"值":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"即":{"docs":{},"|":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"此":{"docs":{},"类":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"经":{"docs":{},"典":{"docs":{},"n":{"docs":{},"p":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"上":{"docs":{},"就":{"docs":{},"不":{"docs":{},"要":{"docs":{},"纠":{"docs":{},"结":{"docs":{},"了":{"docs":{},"。":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"指":{"docs":{},"数":{"docs":{},"次":{"docs":{},"。":{"docs":{},"主":{"docs":{},"题":{"docs":{},"思":{"docs":{},"想":{"docs":{},"和":{"docs":{},"n":{"docs":{},"－":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"一":{"docs":{},"个":{"docs":{},"试":{"docs":{},"，":{"docs":{},"行":{"docs":{},"就":{"docs":{},"填":{"docs":{},"，":{"docs":{},"不":{"docs":{},"行":{"docs":{},"就":{"docs":{},"该":{"docs":{},"回":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},"空":{"docs":{},"，":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"之":{"docs":{},"～":{"docs":{},"首":{"docs":{},"先":{"docs":{},"，":{"docs":{},"分":{"docs":{},"割":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"观":{"docs":{},"察":{"docs":{},"一":{"docs":{},"下":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"的":{"docs":{},"生":{"docs":{},"成":{"docs":{},"规":{"docs":{},"律":{"docs":{},"。":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"所":{"docs":{},"包":{"docs":{},"含":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"和":{"docs":{},"数":{"docs":{},"量":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"不":{"docs":{},"同":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"[":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"做":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"的":{"docs":{},"表":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}},"讲":{"docs":{},"解":{"docs":{},"来":{"docs":{},"自":{"docs":{},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}},"很":{"docs":{},"典":{"docs":{},"型":{"docs":{},"了":{"docs":{},"一":{"docs":{},"道":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"题":{"docs":{},"，":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"半":{"docs":{},"个":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"解":{"docs":{},"来":{"docs":{},"自":{"docs":{},"w":{"docs":{},"e":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}},"高":{"docs":{},"手":{"docs":{},"在":{"docs":{},"民":{"docs":{},"间":{"docs":{"string/substring-related.html":{"ref":"string/substring-related.html","tf":0.0027548209366391185}}}}}},"大":{"docs":{},"上":{"docs":{},"a":{"docs":{},"c":{"docs":{},"版":{"docs":{},"本":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"；":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}},"1":{"docs":{},"'":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},";":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}},"9":{"docs":{},"'":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}},"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},"(":{"docs":{},"'":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}},")":{"docs":{},"'":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}},".":{"docs":{},"'":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.013793103448275862}},")":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}},".":{"docs":{},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}}}}},"q":{"docs":{},"'":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}},"a":{"docs":{},"'":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"b":{"docs":{},"'":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"z":{"docs":{},"'":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}},"*":{"docs":{},"'":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},".":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"?":{"docs":{},"'":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204}}}},"+":{"docs":{},"'":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"e":{"docs":{},"'":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.041379310344827586}}}}},"]":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525},"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.008849557522123894}},"(":{"docs":{},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}},"j":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.01834862385321101},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.01775147928994083},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.015228426395939087},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.025},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.02857142857142857},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.035398230088495575},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.025210084033613446}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":5}},"i":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.009174311926605505}}}}}}}}}},"m":{"docs":{},"p":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":5.008333333333334}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.008333333333333333}}}}}}}},"s":{"docs":{},".":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}},";":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.008130081300813009}}},",":{"docs":{"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.011834319526627219}}},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},"－":{"1":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}},"docs":{}},"（":{"docs":{},"i":{"docs":{},"，":{"docs":{},"j":{"docs":{},"是":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"）":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}},"=":{"0":{"docs":{},";":{"docs":{},"j":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{},"i":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}},"docs":{}}}}},"docs":{}}},"“":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"属":{"docs":{},"于":{"docs":{},"纯":{"docs":{},"粹":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"要":{"docs":{},"把":{"docs":{},"一":{"docs":{},"串":{"docs":{},"单":{"docs":{},"词":{"docs":{},"安":{"docs":{},"排":{"docs":{},"成":{"docs":{},"多":{"docs":{},"行":{"docs":{},"限":{"docs":{},"定":{"docs":{},"长":{"docs":{},"度":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{},"主":{"docs":{},"要":{"docs":{},"难":{"docs":{},"点":{"docs":{},"在":{"docs":{},"于":{"docs":{},"空":{"docs":{},"格":{"docs":{},"的":{"docs":{},"安":{"docs":{},"排":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"每":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"之":{"docs":{},"间":{"docs":{},"必":{"docs":{},"须":{"docs":{},"有":{"docs":{},"空":{"docs":{},"格":{"docs":{},"隔":{"docs":{},"开":{"docs":{},"，":{"docs":{},"而":{"docs":{},"当":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"放":{"docs":{},"不":{"docs":{},"下":{"docs":{},"更":{"docs":{},"多":{"docs":{},"的":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}},"个":{"docs":{},"细":{"docs":{},"节":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"行":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"均":{"docs":{},"匀":{"docs":{},"分":{"docs":{},"配":{"docs":{},"空":{"docs":{},"格":{"docs":{},"，":{"docs":{},"句":{"docs":{},"尾":{"docs":{},"留":{"docs":{},"空":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"要":{"docs":{},"单":{"docs":{},"独":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"下":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"上":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"单":{"docs":{},"词":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"找":{"docs":{},"到":{"docs":{},"行":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"在":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"的":{"docs":{},"单":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"物":{"docs":{},"品":{"docs":{},"能":{"docs":{},"否":{"docs":{},"取":{"docs":{},"出":{"docs":{},"一":{"docs":{},"些":{"docs":{},"体":{"docs":{},"积":{"docs":{},"和":{"docs":{},"为":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}},"组":{"docs":{},"成":{"docs":{},"体":{"docs":{},"积":{"docs":{},"和":{"docs":{},"为":{"docs":{},"s":{"docs":{},"的":{"docs":{},"背":{"docs":{},"包":{"docs":{},"。":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}}},"前":{"1":{"docs":{},"~":{"docs":{},"n":{"docs":{},"个":{"docs":{},"物":{"docs":{},"品":{"docs":{},"组":{"docs":{},"成":{"docs":{},"体":{"docs":{},"积":{"docs":{},"和":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"背":{"docs":{},"包":{"docs":{},"始":{"docs":{},"终":{"docs":{},"为":{"docs":{},"真":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"情":{"docs":{},"况":{"docs":{},"为":{"docs":{},"假":{"docs":{},"。":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{},"面":{"docs":{},"的":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"里":{"docs":{},"面":{"docs":{},"。":{"docs":{},"实":{"docs":{},"现":{"docs":{},"中":{"docs":{},"我":{"docs":{},"们":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"计":{"docs":{},"数":{"docs":{},"记":{"docs":{},"录":{"docs":{},"当":{"docs":{},"前":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"超":{"docs":{},"过":{"docs":{},"之":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"计":{"docs":{},"算":{"docs":{},"共":{"docs":{},"同":{"docs":{},"的":{"docs":{},"空":{"docs":{},"格":{"docs":{},"量":{"docs":{},"以":{"docs":{},"及":{"docs":{},"多":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"的":{"docs":{},"空":{"docs":{},"格":{"docs":{},"量":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"当":{"docs":{},"行":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"构":{"docs":{},"造":{"docs":{},"出":{"docs":{},"来":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}},"单":{"docs":{},"词":{"docs":{},"并":{"docs":{},"且":{"docs":{},"字":{"docs":{},"符":{"docs":{},"又":{"docs":{},"不":{"docs":{},"能":{"docs":{},"填":{"docs":{},"满":{"docs":{},"长":{"docs":{},"度":{"docs":{},"l":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"把":{"docs":{},"空":{"docs":{},"格":{"docs":{},"均":{"docs":{},"匀":{"docs":{},"的":{"docs":{},"填":{"docs":{},"充":{"docs":{},"在":{"docs":{},"单":{"docs":{},"词":{"docs":{},"之":{"docs":{},"间":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"的":{"docs":{},"空":{"docs":{},"格":{"docs":{},"量":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"是":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"均":{"docs":{},"匀":{"docs":{},"分":{"docs":{},"配":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"还":{"docs":{},"必":{"docs":{},"须":{"docs":{},"把":{"docs":{},"多":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"空":{"docs":{},"格":{"docs":{},"放":{"docs":{},"到":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"后":{"docs":{},"行":{"docs":{},"数":{"docs":{},"r":{"docs":{},"，":{"docs":{},"则":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"r":{"docs":{},"*":{"docs":{},"l":{"docs":{},")":{"docs":{},"）":{"docs":{},"。":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{},"”":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}},"词":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"总":{"docs":{},"体":{"docs":{},"每":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"不":{"docs":{},"会":{"docs":{},"被":{"docs":{},"访":{"docs":{},"问":{"docs":{},"超":{"docs":{},"过":{"docs":{},"两":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"总":{"docs":{},"体":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"而":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"则":{"docs":{},"是":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"（":{"docs":{},"跟":{"docs":{},"单":{"docs":{},"词":{"docs":{},"数":{"docs":{},"量":{"docs":{},"和":{"docs":{},"长":{"docs":{},"度":{"docs":{},"有":{"docs":{},"关":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"准":{"docs":{},"确":{"docs":{},"定":{"docs":{},"义":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"知":{"docs":{},"道":{"docs":{},"最":{"docs":{"string/text-justification.html":{"ref":"string/text-justification.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.017857142857142856},"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"bt/summary.html":{"ref":"bt/summary.html","tf":0.024390243902439025},"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.015503875968992248},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.028901734104046242},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.015748031496062992},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}},"&":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}},"&":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.008928571428571428},"bt/summary.html":{"ref":"bt/summary.html","tf":0.008130081300813009},"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.017341040462427744},"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.02843601895734597},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.013605442176870748},"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.012422360248447204},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.01680672268907563},"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}},"q":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099},"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.013550135501355014},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"/":{"docs":{},"/":{"docs":{},"u":{"docs":{},"s":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":5.026315789473684}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}},"s":{"docs":{},"'":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}},"g":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}},"*":{"docs":{},"/":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.007272727272727273}}}}}}}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}},"不":{"docs":{},"是":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}}}}}},"适":{"docs":{},"用":{"docs":{},"，":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"能":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}},"放":{"docs":{},"入":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"物":{"docs":{},"品":{"docs":{},"，":{"docs":{},"前":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}},"为":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0091324200913242}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"了":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"分":{"docs":{},"半":{"docs":{},"操":{"docs":{},"作":{"docs":{},"正":{"docs":{},"确":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"保":{"docs":{},"证":{"docs":{},"a":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"小":{"docs":{},"于":{"docs":{},"b":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"可":{"docs":{},"达":{"docs":{},"范":{"docs":{},"围":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"除":{"docs":{},"法":{"docs":{},"是":{"docs":{},"向":{"docs":{},"下":{"docs":{},"取":{"docs":{},"整":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"页":{"docs":{},"为":{"docs":{},"了":{"docs":{},"方":{"docs":{},"便":{"docs":{},"起":{"docs":{},"见":{"docs":{},"，":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"分":{"docs":{},"半":{"docs":{},"操":{"docs":{},"作":{"docs":{},"采":{"docs":{},"取":{"docs":{},"：":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"利":{"docs":{},"用":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},"[":{"3":{"docs":{},"]":{"docs":{},"会":{"docs":{},"造":{"docs":{},"成":{"docs":{},"闭":{"docs":{},"合":{"docs":{},"回":{"docs":{},"路":{"docs":{},"(":{"docs":{},"a":{"docs":{},".":{"docs":{},"k":{"docs":{},".":{"docs":{},"a":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},")":{"docs":{},"只":{"docs":{},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"总":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},")":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"求":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}},"极":{"docs":{},"值":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"当":{"docs":{},"然":{"docs":{},"是":{"docs":{},"一":{"docs":{},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},"，":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}}}}}}}},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}},"此":{"docs":{},"，":{"docs":{},"在":{"docs":{},"计":{"docs":{},"算":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"根":{"docs":{},"据":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"分":{"docs":{},"类":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714},"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"种":{"docs":{},"可":{"docs":{},"能":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"。":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}},"i":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}},"次":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"n":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}},"由":{"docs":{},"于":{"docs":{},"是":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"可":{"docs":{},"以":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"则":{"docs":{},"结":{"docs":{},"果":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"当":{"docs":{},"作":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"去":{"docs":{},"存":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"就":{"docs":{},"是":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"没":{"docs":{},"排":{"docs":{},"序":{"docs":{},"前":{"docs":{},"的":{"docs":{},"形":{"docs":{},"态":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"下":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"，":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}}},"辅":{"docs":{},"助":{"docs":{},"数":{"docs":{},"组":{"docs":{},"判":{"docs":{},"断":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"的":{"docs":{},"可":{"docs":{},"用":{"docs":{},"性":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{},"就":{"3":{"docs":{},"种":{"docs":{},"，":{"docs":{"sort/merge-sort.html":{"ref":"sort/merge-sort.html","tf":0.004464285714285714}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"按":{"docs":{},"照":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"定":{"docs":{},"义":{"docs":{},"去":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"时":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"比":{"docs":{},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"都":{"docs":{},"大":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"往":{"docs":{},"根":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"找":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"置":{"docs":{},"d":{"docs":{},"p":{"docs":{},"变":{"docs":{},"量":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}},"全":{"docs":{},"部":{"docs":{},"是":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}},"排":{"docs":{},"列":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}},"分":{"docs":{},"段":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"分":{"docs":{},"段":{"docs":{},"搜":{"docs":{},"索":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}}},"治":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},"类":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"常":{"docs":{},"规":{"docs":{},"解":{"docs":{},"法":{"docs":{},"：":{"docs":{"misc/valid-number.html":{"ref":"misc/valid-number.html","tf":0.006896551724137931}}}}}}}}}}}},"到":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.01680672268907563},"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}},"包":{"docs":{},"括":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"在":{"docs":{},"内":{"docs":{},"可":{"docs":{},"能":{"docs":{},"还":{"docs":{},"有":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"数":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"含":{"docs":{},"有":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"进":{"docs":{},"行":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"等":{"docs":{},"(":{"docs":{},"=":{"docs":{},"=":{"docs":{},")":{"docs":{},"的":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}}}}}}}}},"似":{"docs":{},"题":{"docs":{},"目":{"docs":{},"：":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}},"n":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}},"问":{"docs":{},"题":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"'":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}}}},"要":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}},"区":{"docs":{},"别":{"docs":{},"对":{"docs":{},"待":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}}}}},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"空":{"docs":{},"间":{"docs":{},"进":{"docs":{},"行":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"难":{"docs":{},"点":{"docs":{},"在":{"docs":{},"于":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"怎":{"docs":{},"样":{"docs":{},"重":{"docs":{},"新":{"docs":{},"返":{"docs":{},"回":{"docs":{},"到":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"假":{"docs":{},"设":{"docs":{},"节":{"docs":{},"点":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"指":{"docs":{},"向":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"p":{"docs":{},"指":{"docs":{},"针":{"docs":{},"）":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"作":{"docs":{},"为":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{},"为":{"docs":{},"了":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"方":{"docs":{},"法":{"docs":{},"用":{"docs":{},"到":{"docs":{},"了":{"docs":{},"线":{"docs":{},"索":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"（":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"求":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"层":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"输":{"docs":{},"出":{"docs":{},"，":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"层":{"docs":{},"正":{"docs":{},"场":{"docs":{},"输":{"docs":{},"出":{"docs":{},"，":{"docs":{},"用":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"来":{"docs":{},"存":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"头":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"未":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"插":{"docs":{},"入":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{},"总":{"docs":{},"体":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"在":{"docs":{},"用":{"docs":{},"个":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"存":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"知":{"docs":{},"道":{"docs":{},"如":{"docs":{},"何":{"docs":{},"构":{"docs":{},"建":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"几":{"docs":{},"种":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"譬":{"docs":{},"如":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"：":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},")":{"docs":{},"，":{"docs":{},"大":{"docs":{},"数":{"docs":{},"据":{"docs":{},"超":{"docs":{},"时":{"docs":{},"。":{"docs":{},"先":{"docs":{},"讲":{"docs":{},"解":{"docs":{},"动":{"docs":{},"归":{"docs":{},"训":{"docs":{},"练":{"docs":{},"思":{"docs":{},"维":{"docs":{},"。":{"docs":{},"贪":{"docs":{},"心":{"docs":{},"解":{"docs":{},"法":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{},")":{"docs":{"bs/binary-search.html":{"ref":"bs/binary-search.html","tf":0.008403361344537815}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}}},"空":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"docs":{}}}},"同":{"docs":{},"时":{"docs":{},"，":{"docs":{},"在":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"精":{"docs":{},"度":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"型":{"docs":{},"的":{"docs":{},"就":{"docs":{},"好":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"还":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"重":{"docs":{},"复":{"docs":{},"解":{"docs":{},"。":{"docs":{},"两":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}},"理":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"s":{"1":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"docs":{}}}}}}},"如":{"docs":{},"果":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291},"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},"a":{"docs":{},"[":{"docs":{},"k":{"docs":{},"/":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.010582010582010581}}},"docs":{}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}},"前":{"docs":{},"驱":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"重":{"docs":{},"新":{"docs":{},"设":{"docs":{},"为":{"docs":{},"空":{"docs":{},"（":{"docs":{},"恢":{"docs":{},"复":{"docs":{},"树":{"docs":{},"的":{"docs":{},"形":{"docs":{},"状":{"docs":{},"）":{"docs":{},"。":{"docs":{},"输":{"docs":{},"出":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"更":{"docs":{},"新":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"空":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"更":{"docs":{},"新":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"在":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"在":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"下":{"docs":{},"的":{"docs":{},"前":{"docs":{},"驱":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"则":{"docs":{},"输":{"docs":{},"出":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"并":{"docs":{},"将":{"docs":{},"其":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"作":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"为":{"docs":{},"令":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"个":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"是":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"看":{"docs":{},"看":{"docs":{},"提":{"docs":{},"不":{"docs":{},"提":{"docs":{},"供":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}}}}}}}}}}}}}}}}}}},"交":{"docs":{},"换":{"docs":{},"［":{"3":{"docs":{},"，":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}},"docs":{}}}}},"何":{"docs":{},"判":{"docs":{},"断":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"？":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"a":{"docs":{},"[":{"docs":{},"k":{"docs":{},"/":{"2":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}},"docs":{}}}}}}}}},"以":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"m":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}},"docs":{}}}}}},"docs":{}}}}}}},"想":{"docs":{},"要":{"docs":{},"生":{"docs":{},"成":{"docs":{},"g":{"docs":{},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}},"特":{"docs":{},"殊":{"docs":{},"化":{"docs":{},"到":{"docs":{},"求":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"对":{"docs":{},"于":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"求":{"docs":{},"第":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},"+":{"1":{"docs":{},"（":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"数":{"docs":{},"）":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}},"docs":{}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"而":{"docs":{},"对":{"docs":{},"于":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"求":{"docs":{},"第":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},"大":{"docs":{},"（":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"数":{"docs":{},"）":{"docs":{},"和":{"docs":{},"第":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},"+":{"1":{"docs":{},"大":{"docs":{},"（":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{},"数":{"docs":{},"）":{"docs":{},"的":{"docs":{},"数":{"docs":{},"的":{"docs":{},"算":{"docs":{},"术":{"docs":{},"平":{"docs":{},"均":{"docs":{},"值":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}}}}}},"且":{"docs":{},"防":{"docs":{},"止":{"docs":{},"变":{"docs":{},"态":{"docs":{},"超":{"docs":{},"长":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"只":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"s":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{},"n":{"docs":{},"，":{"docs":{},"p":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{},"m":{"docs":{},"。":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"解":{"docs":{},"决":{"docs":{},"此":{"docs":{},"题":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"依":{"docs":{},"照":{"docs":{},"：":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}},"法":{"1":{"docs":{},"参":{"docs":{},"照":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"2":{"docs":{},":":{"docs":{},"参":{"docs":{},"照":{"docs":{},"九":{"docs":{},"章":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}},"docs":{},"完":{"docs":{},"全":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"样":{"docs":{},"整":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"迎":{"docs":{},"刃":{"docs":{},"而":{"docs":{},"解":{"docs":{},"了":{"docs":{},"。":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}},"道":{"docs":{},"题":{"docs":{},"实":{"docs":{},"质":{"docs":{},"上":{"docs":{},"还":{"docs":{},"是":{"docs":{},"[":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}}}},"是":{"docs":{},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}},"跟":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}},"种":{"docs":{},"解":{"docs":{},"是":{"docs":{},"不":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}},"那":{"docs":{},"么":{"docs":{},"如":{"docs":{},"何":{"docs":{},"判":{"docs":{},"断":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},"中":{"docs":{},"第":{"docs":{},"k":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"呢":{"docs":{},"？":{"docs":{"bs/median-of-two-sorted-arrays.html":{"ref":"bs/median-of-two-sorted-arrays.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"从":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"位":{"docs":{},"置":{"docs":{},"开":{"docs":{},"始":{"docs":{},"到":{"docs":{},"第":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"数":{"docs":{},"加":{"docs":{},"上":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"通":{"docs":{},"过":{"docs":{},"观":{"docs":{},"察":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"发":{"docs":{},"现":{"docs":{},"如":{"docs":{},"下":{"docs":{},"规":{"docs":{},"则":{"docs":{},"：":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"首":{"docs":{},"先":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"新":{"docs":{},"添":{"docs":{},"加":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"要":{"docs":{},"等":{"docs":{},"于":{"docs":{},"s":{"3":{"docs":{},"里":{"docs":{},"面":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"位":{"docs":{},"(":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"什":{"docs":{},"么":{"docs":{},"时":{"docs":{},"候":{"docs":{},"取":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"什":{"docs":{},"么":{"docs":{},"时":{"docs":{},"候":{"docs":{},"取":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"呢":{"docs":{},"？":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"形":{"docs":{},"状":{"docs":{},"不":{"docs":{},"能":{"docs":{},"被":{"docs":{},"破":{"docs":{},"坏":{"docs":{},"（":{"docs":{},"中":{"docs":{},"间":{"docs":{},"过":{"docs":{},"程":{"docs":{},"允":{"docs":{},"许":{"docs":{},"改":{"docs":{},"变":{"docs":{},"其":{"docs":{},"形":{"docs":{},"状":{"docs":{},"）":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}}}}}},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},"代":{"docs":{},"码":{"docs":{},"来":{"docs":{},"自":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}},"变":{"docs":{},"形":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"，":{"docs":{},"再":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"输":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}}}}}}}},"栈":{"docs":{},"顶":{"docs":{},"的":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"记":{"docs":{},"录":{"docs":{},"所":{"docs":{},"有":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"和":{"docs":{},"比":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"取":{"docs":{},"较":{"docs":{},"大":{"docs":{},"的":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"，":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"等":{"docs":{},"价":{"docs":{},"于":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}},"逆":{"docs":{},"序":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"从":{"docs":{},"右":{"docs":{},"往":{"docs":{},"左":{"docs":{},"看":{"docs":{},"的":{"docs":{},"话":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"以":{"docs":{},"上":{"1":{"docs":{},"、":{"2":{"docs":{},"直":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"bt/summary.html":{"ref":"bt/summary.html","tf":0.0027100271002710027}}}}}}}}}}}},"docs":{}}},"docs":{}}},"上":{"docs":{},"述":{"docs":{},"过":{"docs":{},"程":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"后":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"找":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"据":{"docs":{},"中":{"docs":{},"根":{"docs":{},"据":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"将":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"也":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"到":{"docs":{},"整":{"docs":{},"个":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"了":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"找":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"据":{"docs":{},"中":{"docs":{},"根":{"docs":{},"据":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"将":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"也":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"到":{"docs":{},"整":{"docs":{},"个":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"了":{"docs":{},"。":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"点":{"docs":{},")":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}},"令":{"docs":{},"其":{"docs":{},"等":{"docs":{},"于":{"docs":{},"有":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"。":{"docs":{"bt/binary-tree-in-order-traversal.html":{"ref":"bt/binary-tree-in-order-traversal.html","tf":0.007751937984496124}}}}}}}}}},")":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dfs/word-search.html":{"ref":"dfs/word-search.html","tf":0.005917159763313609},"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143},"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.022123893805309734},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}},"*":{"docs":{},"*":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}}}}},"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248},"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}},"反":{"docs":{},"之":{"docs":{},"向":{"docs":{},"右":{"docs":{},"找":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"docs":{"bt/lowest-common-ancestor.html":{"ref":"bt/lowest-common-ancestor.html","tf":0.005780346820809248}}},"docs":{}}}}}}}}}}}}},"z":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":3.346491228070175}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}},"关":{"docs":{},"键":{"docs":{},"要":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"判":{"docs":{},"断":{"docs":{},"当":{"docs":{},"前":{"docs":{},"层":{"docs":{},"为":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"还":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"按":{"docs":{},"要":{"docs":{},"求":{"docs":{},"输":{"docs":{},"出":{"docs":{"bt/binary-tree-zigzag-level-order-traversal.html":{"ref":"bt/binary-tree-zigzag-level-order-traversal.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":3.333333333333333}},";":{"docs":{"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}}},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"到":{"docs":{},"，":{"docs":{},"后":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"永":{"docs":{},"远":{"docs":{},"都":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"先":{"docs":{},"在":{"docs":{},"后":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"找":{"docs":{},"到":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"在":{"docs":{},"中":{"docs":{},"需":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"分":{"docs":{},"成":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"优":{"docs":{},"化":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}},"从":{"docs":{},"上":{"docs":{},"往":{"docs":{},"下":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"下":{"docs":{},"往":{"docs":{},"上":{"docs":{},"推":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"采":{"docs":{},"用":{"docs":{},"从":{"docs":{},"下":{"docs":{},"往":{"docs":{},"上":{"docs":{},"推":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"是":{"docs":{},"把":{"docs":{},"后":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"换":{"docs":{},"成":{"docs":{},"了":{"docs":{},"前":{"docs":{},"序":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"前":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"永":{"docs":{},"远":{"docs":{},"都":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"先":{"docs":{},"在":{"docs":{},"前":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"找":{"docs":{},"到":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"在":{"docs":{},"中":{"docs":{},"需":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"分":{"docs":{},"成":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"ref":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"求":{"docs":{},"出":{"docs":{},"第":{"docs":{},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"行":{"docs":{},"的":{"docs":{},"内":{"docs":{},"容":{"docs":{},"。":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}}}}}},"开":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"列":{"docs":{},"数":{"docs":{},"组":{"docs":{},"用":{"docs":{},"来":{"docs":{},"储":{"docs":{},"存":{"docs":{},"。":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}},"模":{"docs":{},"版":{"docs":{},"程":{"docs":{},"序":{"docs":{},"，":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"递":{"docs":{},"归":{"docs":{},"树":{"docs":{},"理":{"docs":{},"解":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}}}}}}}}}},"组":{"docs":{},"合":{"docs":{},"问":{"docs":{},"题":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.004739336492890996}}}}}},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"去":{"docs":{},"排":{"docs":{},"列":{"docs":{},"所":{"docs":{},"有":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"!":{"docs":{"dfs/permutation-combination.html":{"ref":"dfs/permutation-combination.html","tf":0.009478672985781991}}}}}}}}}}}}}}}}}}}}}},"推":{"docs":{},"公":{"docs":{},"式":{"docs":{},"分":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}},"…":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374}}},"≤":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.01020408163265306}}},"完":{"docs":{},"整":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.006802721088435374},"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.006578947368421052},"dfs/sudoku-solver.html":{"ref":"dfs/sudoku-solver.html","tf":0.009174311926605505}},"：":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"跳":{"docs":{},"进":{"docs":{},"递":{"docs":{},"归":{"docs":{},"不":{"docs":{},"用":{"docs":{},"都":{"docs":{},"往":{"docs":{},"后":{"docs":{},"挪":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"。":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"是":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"先":{"docs":{},"从":{"docs":{},"终":{"docs":{},"点":{"docs":{},"到":{"docs":{},"起":{"docs":{},"点":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"题":{"docs":{},"还":{"docs":{},"有":{"docs":{},"的":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"dfs/combination-sum.html":{"ref":"dfs/combination-sum.html","tf":0.003401360544217687}}}}}}}}}}}}},"原":{"docs":{},"题":{"docs":{},"链":{"docs":{},"接":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684},"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863},"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625},"dp/set-zero-to-matrix.html":{"ref":"dp/set-zero-to-matrix.html","tf":0.008620689655172414}}}}}},"就":{"docs":{},"要":{"docs":{},"想":{"docs":{},"到":{"docs":{},"排":{"docs":{},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{},"，":{"docs":{},"想":{"docs":{},"到":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"，":{"docs":{},"先":{"docs":{},"想":{"docs":{},"想":{"docs":{},"能":{"docs":{},"不":{"docs":{},"能":{"docs":{},"利":{"docs":{},"用":{"docs":{},"排":{"docs":{},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{},"的":{"docs":{},"模":{"docs":{},"版":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"不":{"docs":{},"用":{"docs":{},"排":{"docs":{},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{},"那":{"docs":{},"个":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"利":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"模":{"docs":{},"拟":{"docs":{},"一":{"docs":{},"下":{"docs":{},"过":{"docs":{},"程":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"，":{"docs":{},"要":{"docs":{},"点":{"docs":{},"是":{"docs":{},"左":{"docs":{},"括":{"docs":{},"号":{"docs":{},"数":{"docs":{},"目":{"docs":{},"必":{"docs":{},"须":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"又":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"数":{"docs":{},"目":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"类":{"docs":{},"似":{"docs":{},"“":{"docs":{},")":{"docs":{},"(":{"docs":{},"”":{"docs":{"dfs/generate-parenthese.html":{"ref":"dfs/generate-parenthese.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"说":{"docs":{},"明":{"docs":{},"有":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"关":{"docs":{},"键":{"docs":{},"点":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"去":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"，":{"docs":{},"重":{"docs":{},"写":{"docs":{},"一":{"docs":{},"下":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"–":{"docs":{"dfs/n-queens.html":{"ref":"dfs/n-queens.html","tf":0.013157894736842105}}},"一":{"docs":{},"想":{"docs":{},"到":{"docs":{},"求":{"docs":{},"所":{"docs":{},"有":{"docs":{},"，":{"docs":{},"立":{"docs":{},"马":{"docs":{},"联":{"docs":{},"想":{"docs":{},"到":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"，":{"docs":{},"排":{"docs":{},"列":{"docs":{},"组":{"docs":{},"合":{"docs":{},"啊":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"模":{"docs":{},"版":{"docs":{},"。":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"定":{"docs":{},"不":{"docs":{},"是":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}},"是":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"，":{"docs":{},"一":{"docs":{},"定":{"docs":{},"不":{"docs":{},"是":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}},"个":{"docs":{},"是":{"docs":{},"求":{"docs":{},"能":{"docs":{},"否":{"docs":{},"走":{"docs":{},"到":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"求":{"docs":{},"走":{"docs":{},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"都":{"docs":{},"符":{"docs":{},"合":{"docs":{},"动":{"docs":{},"归":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"d":{"docs":{},"p":{"docs":{},"在":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"的":{"docs":{},"效":{"docs":{},"率":{"docs":{},"不":{"docs":{},"高":{"docs":{},"，":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"般":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}},"或":{"docs":{},"超":{"docs":{},"时":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"目":{"docs":{},"前":{"docs":{},"此":{"docs":{},"解":{"docs":{},"法":{"docs":{},"超":{"docs":{},"时":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"不":{"docs":{},"知":{"docs":{},"道":{"docs":{},"加":{"docs":{},"了":{"docs":{},"什":{"docs":{},"么":{"docs":{},"鬼":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"限":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"栈":{"docs":{},"溢":{"docs":{},"出":{"docs":{"dfs/word-break-ii.html":{"ref":"dfs/word-break-ii.html","tf":0.0036363636363636364}}}}}}}}},"关":{"docs":{},"下":{"docs":{},"标":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"排":{"docs":{},"序":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}}}}}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"分":{"docs":{},"析":{"docs":{},"：":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"k":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"(":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{},"n":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"就":{"docs":{},"是":{"docs":{},"(":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"k":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{},"n":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"k":{"docs":{},")":{"docs":{},"就":{"docs":{},"是":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{"bfs/anagrams.html":{"ref":"bfs/anagrams.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"题":{"docs":{},"，":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"只":{"docs":{},"用":{"docs":{},"求":{"docs":{},"距":{"docs":{},"离":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"建":{"docs":{},"图":{"docs":{},"，":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}},"二":{"docs":{},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/LIS-LCS.html":{"ref":"dp/LIS-LCS.html","tf":0.0040650406504065045}}}}}}}},"建":{"docs":{},"立":{"docs":{},"无":{"docs":{},"向":{"docs":{},"有":{"docs":{},"权":{"docs":{},"图":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"从":{"docs":{},"起":{"docs":{},"点":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"到":{"docs":{},"终":{"docs":{},"点":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"点":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}},"的":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}},"然":{"docs":{},"后":{"docs":{},"可":{"docs":{},"以":{"docs":{},"套":{"docs":{},"用":{"docs":{},"图":{"docs":{},"的":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"去":{"docs":{},"找":{"docs":{},"距":{"docs":{},"离":{"docs":{},"。":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}},"通":{"docs":{},"常":{"docs":{},"做":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"预":{"docs":{},"处":{"docs":{},"理":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"，":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"bfs/word-ladder.html":{"ref":"bfs/word-ladder.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}},"解":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"延":{"docs":{},"展":{"docs":{},"到":{"docs":{},"k":{"docs":{},"－":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"与":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},"：":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}},"两":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"思":{"docs":{},"想":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}},"交":{"docs":{},"换":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"对":{"docs":{},"结":{"docs":{},"果":{"docs":{},"没":{"docs":{},"影":{"docs":{},"响":{"docs":{},"，":{"docs":{},"一":{"docs":{},"定":{"docs":{},"不":{"docs":{},"是":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}},"什":{"docs":{},"么":{"docs":{},"问":{"docs":{},"题":{"docs":{},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"d":{"docs":{},"p":{"docs":{},"解":{"docs":{},"决":{"docs":{},"？":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}},"要":{"docs":{},"用":{"docs":{},"d":{"docs":{},"p":{"docs":{},"解":{"docs":{},"决":{"docs":{},"？":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},"化":{"docs":{},"：":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},"时":{"docs":{},"，":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}},"动":{"docs":{},"归":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}},"大":{"docs":{},"状":{"docs":{},"态":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},"依":{"docs":{},"赖":{"docs":{},"小":{"docs":{},"状":{"docs":{},"态":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"结":{"docs":{},"果":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},":":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}},"实":{"docs":{},"现":{"docs":{},"方":{"docs":{},"式":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"：":{"docs":{},"d":{"docs":{},"f":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}}}}}}}}}},"质":{"docs":{},"上":{"docs":{},"时":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"加":{"docs":{},"上":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"化":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"docs":{},",":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"小":{"docs":{},"状":{"docs":{},"态":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}},"待":{"docs":{},"解":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.01098901098901099}}}},"找":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"方":{"docs":{},"案":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"/":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}},"坐":{"docs":{},"标":{"docs":{},"规":{"docs":{},"律":{"docs":{},"。":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},"/":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"既":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},"求":{"docs":{},"方":{"docs":{},"案":{"docs":{},"总":{"docs":{},"数":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}},"状":{"docs":{},"态":{"docs":{},"代":{"docs":{},"表":{"docs":{},"什":{"docs":{},"么":{"docs":{},"？":{"docs":{},"需":{"docs":{},"要":{"docs":{},"灵":{"docs":{},"感":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}}}}}}}}},"转":{"docs":{},"移":{"docs":{},"方":{"docs":{},"程":{"docs":{},"详":{"docs":{},"细":{"docs":{},"解":{"docs":{},"析":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}},"环":{"docs":{},")":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}}},"终":{"docs":{},"点":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495},"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}}},"结":{"docs":{},"果":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},"：":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}},"起":{"docs":{},"点":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}},")":{"docs":{"dp/introduction.html":{"ref":"dp/introduction.html","tf":0.005494505494505495}}},"：":{"docs":{},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}},"docs":{}}},"[":{"docs":{},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}},"为":{"docs":{},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}},"docs":{}}},"[":{"0":{"docs":{},"，":{"0":{"docs":{},"]":{"docs":{},"，":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}},"docs":{}}},"docs":{}}}}},"从":{"docs":{},"起":{"docs":{},"点":{"docs":{},"如":{"docs":{},"何":{"docs":{},"走":{"docs":{},"来":{"docs":{},"的":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"docs":{}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"表":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"出":{"docs":{},"，":{"docs":{},"无":{"docs":{},"论":{"docs":{},"t":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"与":{"docs":{},"s":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{},"否":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}},"docs":{}}}},"docs":{}}}}},"值":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}},"和":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907},"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}},"[":{"0":{"docs":{},".":{"docs":{},".":{"docs":{},"n":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}},"docs":{}}}}}}},"docs":{}}},"寻":{"docs":{},"找":{"docs":{},"使":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"指":{"docs":{},"定":{"docs":{},"点":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}},"放":{"docs":{},"入":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"物":{"docs":{},"品":{"docs":{},"，":{"docs":{},"前":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"：":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},"^":{"2":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"docs":{}},"m":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}},"研":{"docs":{},"究":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"和":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}},"docs":{}}}}}}},"docs":{}},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"步":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"来":{"docs":{},"的":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"：":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.008403361344537815}}},"^":{"2":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}},"docs":{}},"m":{"docs":{},")":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}},"表":{"docs":{},"示":{"docs":{},"s":{"1":{"docs":{},"取":{"docs":{},"第":{"1":{"docs":{},"位":{"docs":{},"a":{"docs":{},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"docs":{}}}},"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}},"需":{"docs":{},"要":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"步":{"docs":{},"数":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}},"数":{"docs":{},"，":{"docs":{},"取":{"docs":{},"出":{"docs":{},"一":{"docs":{},"些":{"docs":{},"物":{"docs":{},"品":{"docs":{},"能":{"docs":{},"否":{"docs":{},"组":{"docs":{},"成":{"docs":{},"体":{"docs":{},"积":{"docs":{},"和":{"docs":{},"为":{"docs":{},"s":{"docs":{},"的":{"docs":{},"背":{"docs":{},"包":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"和":{"docs":{"dp/maximum-subarray.html":{"ref":"dp/maximum-subarray.html","tf":0.012195121951219513}}}}}}}}},"起":{"docs":{},"点":{"docs":{},"[":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"到":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{},"位":{"docs":{},"置":{"docs":{},"上":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}},"在":{"docs":{},"从":{"docs":{},"（":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},"）":{"docs":{},"到":{"docs":{},"（":{"docs":{},"i":{"docs":{},"，":{"docs":{},"j":{"docs":{},"）":{"docs":{},"位":{"docs":{},"置":{"docs":{},"上":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"和":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"配":{"docs":{},"上":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}}},"面":{"docs":{},"试":{"docs":{},"常":{"docs":{},"考":{"docs":{},"d":{"docs":{},"p":{"docs":{},"类":{"docs":{},"型":{"docs":{"dp/summary.html":{"ref":"dp/summary.html","tf":0.004201680672268907}}}}}}}}}},"方":{"docs":{},"案":{"docs":{},"数":{"docs":{},"目":{"docs":{},"是":{"docs":{},"要":{"docs":{},"想":{"docs":{},"到":{"docs":{},"用":{"docs":{},"d":{"docs":{},"p":{"docs":{"dp/decode-ways.html":{"ref":"dp/decode-ways.html","tf":0.007874015748031496}}}}}}}}}}}}},"假":{"docs":{},"设":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{},"n":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"字":{"docs":{},"典":{"docs":{},"是":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"来":{"docs":{},"维":{"docs":{},"护":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"总":{"docs":{},"共":{"docs":{},"需":{"docs":{},"要":{"docs":{},"n":{"docs":{},"次":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"取":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"o":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"检":{"docs":{},"测":{"docs":{},"i":{"docs":{},"个":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"而":{"docs":{},"检":{"docs":{},"测":{"docs":{},"是":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"总":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},")":{"docs":{},"（":{"docs":{},"i":{"docs":{},"的":{"docs":{},"累":{"docs":{},"加":{"docs":{},"仍":{"docs":{},"然":{"docs":{},"是":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},"量":{"docs":{},"级":{"docs":{},"）":{"docs":{},"，":{"docs":{},"而":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"则":{"docs":{},"是":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"，":{"docs":{},"即":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"已":{"docs":{},"经":{"docs":{},"有":{"docs":{},"了":{"docs":{},"g":{"docs":{},"n":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}}}}}}},"接":{"docs":{},"下":{"docs":{},"来":{"docs":{},"我":{"docs":{},"们":{"docs":{},"套":{"docs":{},"用":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"来":{"docs":{},"解":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"历":{"docs":{},"史":{"docs":{},"信":{"docs":{},"息":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"是":{"docs":{},"表":{"docs":{},"示":{"docs":{},"到":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"s":{"docs":{},"的":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"为":{"docs":{},"止":{"docs":{},"能":{"docs":{},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"中":{"docs":{},"的":{"docs":{},"词":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"的":{"docs":{},"布":{"docs":{},"尔":{"docs":{},"数":{"docs":{},"组":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"信":{"docs":{},"息":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"假":{"docs":{},"设":{"docs":{},"我":{"docs":{},"们":{"docs":{},"现":{"docs":{},"在":{"docs":{},"拥":{"docs":{},"有":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{},"i":{"docs":{"dp/word-break.html":{"ref":"dp/word-break.html","tf":0.0136986301369863}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"”":{"docs":{"dp/distinct-subsequences.html":{"ref":"dp/distinct-subsequences.html","tf":0.0045662100456621},"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"举":{"docs":{},"个":{"docs":{},"列":{"docs":{},"子":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"那":{"docs":{},"一":{"docs":{},"对":{"docs":{},"箭":{"docs":{},"头":{"docs":{},"指":{"docs":{},"向":{"docs":{},"的":{"docs":{},"格":{"docs":{},"子":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},"s":{"1":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}},"docs":{}}}}}}}},"证":{"docs":{},"，":{"docs":{},"当":{"docs":{},"然":{"docs":{},"是":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}},"位":{"docs":{},")":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"之":{"docs":{},"前":{"docs":{},"那":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"也":{"docs":{},"要":{"docs":{},"等":{"docs":{},"于":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}},"）":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}},"往":{"docs":{},"下":{"docs":{},"的":{"docs":{},"箭":{"docs":{},"头":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"s":{"1":{"docs":{},"目":{"docs":{},"前":{"docs":{},"取":{"docs":{},"了":{"0":{"docs":{},"位":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"目":{"docs":{},"前":{"docs":{},"取":{"docs":{},"了":{"1":{"docs":{},"位":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"添":{"docs":{},"加":{"docs":{},"s":{"1":{"docs":{},"的":{"docs":{},"第":{"1":{"docs":{},"位":{"docs":{},"，":{"docs":{},"看":{"docs":{},"看":{"docs":{},"它":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"等":{"docs":{},"于":{"docs":{},"s":{"3":{"docs":{},"的":{"docs":{},"第":{"2":{"docs":{},"位":{"docs":{},"，":{"docs":{},"(":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}},"docs":{}}}}}},"docs":{}}}}},"docs":{}}}}}},"docs":{}}}}}}}}},"右":{"docs":{},"的":{"docs":{},"箭":{"docs":{},"头":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"s":{"1":{"docs":{},"目":{"docs":{},"前":{"docs":{},"取":{"docs":{},"了":{"1":{"docs":{},"位":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"目":{"docs":{},"前":{"docs":{},"取":{"docs":{},"了":{"0":{"docs":{},"位":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"添":{"docs":{},"加":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"第":{"1":{"docs":{},"位":{"docs":{},"，":{"docs":{},"看":{"docs":{},"看":{"docs":{},"它":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"等":{"docs":{},"于":{"docs":{},"s":{"3":{"docs":{},"的":{"docs":{},"第":{"2":{"docs":{},"位":{"docs":{},"，":{"docs":{},"(":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}},"docs":{}}}}}},"docs":{}}}}},"docs":{}}}}}},"docs":{}}}}}}}}}},"还":{"docs":{},"有":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"版":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695},"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"一":{"docs":{},"点":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"d":{"docs":{},"p":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"表":{"docs":{},"示":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{},"从":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"（":{"docs":{},"包":{"docs":{},"含":{"docs":{},"）":{"docs":{},"到":{"docs":{},"第":{"docs":{},"j":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"（":{"docs":{},"包":{"docs":{},"含":{"docs":{},"）":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"（":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"=":{"docs":{},"=":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"）":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"s":{"1":{"docs":{},"已":{"docs":{},"经":{"docs":{},"取":{"docs":{},"了":{"2":{"docs":{},"位":{"docs":{},"，":{"docs":{},"c":{"docs":{},"还":{"docs":{},"没":{"docs":{},"取":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"是":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"（":{"docs":{},"a":{"docs":{},"b":{"docs":{},"!":{"docs":{},"=":{"docs":{},"b":{"docs":{},"b":{"docs":{},"）":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"取":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"新":{"docs":{},"的":{"docs":{},"一":{"docs":{},"位":{"docs":{},"c":{"docs":{},"，":{"docs":{},"即":{"docs":{},"便":{"docs":{},"和":{"docs":{},"s":{"3":{"docs":{},"中":{"docs":{},"的":{"docs":{},"c":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"之":{"docs":{},"前":{"docs":{},"是":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"一":{"docs":{},"位":{"docs":{},"也":{"docs":{},"是":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}}},"同":{"docs":{},"样":{"docs":{},"的":{"docs":{},"假":{"docs":{},"设":{"docs":{},"，":{"docs":{},"s":{"1":{"docs":{},"取":{"docs":{},"了":{"2":{"docs":{},"位":{"docs":{},"，":{"docs":{},"c":{"docs":{},"还":{"docs":{},"没":{"docs":{},"取":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"（":{"docs":{},"a":{"docs":{},"b":{"docs":{},"=":{"docs":{},"=":{"docs":{},"a":{"docs":{},"b":{"docs":{},"）":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"取":{"docs":{},"s":{"2":{"docs":{},"的":{"docs":{},"新":{"docs":{},"的":{"docs":{},"一":{"docs":{},"位":{"docs":{},"c":{"docs":{},",":{"docs":{},"和":{"docs":{},"s":{"3":{"docs":{},"中":{"docs":{},"的":{"docs":{},"c":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"且":{"docs":{},"之":{"docs":{},"前":{"docs":{},"这":{"docs":{},"一":{"docs":{},"位":{"docs":{},"就":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"放":{"docs":{},"心":{"docs":{},"置":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"dp/interleaving-string.html":{"ref":"dp/interleaving-string.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}},"并":{"docs":{},"且":{"docs":{},"更":{"docs":{},"新":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}},"贪":{"docs":{},"心":{"docs":{},"解":{"docs":{},"法":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"思":{"docs":{},"路":{"docs":{},"：":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"大":{"docs":{},"可":{"docs":{},"达":{"docs":{},"范":{"docs":{},"围":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"附":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}}}}}},"＝":{"docs":{"dp/jump-game.html":{"ref":"dp/jump-game.html","tf":0.004166666666666667}}},"上":{"docs":{},"一":{"docs":{},"步":{"docs":{},"可":{"docs":{},"能":{"docs":{},"来":{"docs":{},"自":{"docs":{},"于":{"docs":{},"上":{"docs":{},"面":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"取":{"docs":{},"较":{"docs":{},"小":{"docs":{},"的":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"加":{"docs":{},"上":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"dp/min-path-sum.html":{"ref":"dp/min-path-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"面":{"docs":{},"的":{"docs":{},"这":{"docs":{},"个":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"用":{"docs":{},"来":{"docs":{},"帮":{"docs":{},"助":{"docs":{},"算":{"docs":{},"最":{"docs":{},"小":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"的":{"docs":{},"。":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}},"刀":{"docs":{},"，":{"docs":{},"从":{"0":{"docs":{},"位":{"docs":{},"置":{"docs":{},"开":{"docs":{},"始":{"docs":{},"切":{"docs":{},"最":{"docs":{},"多":{"docs":{},"切":{"4":{"docs":{},"刀":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}},"docs":{}}}}}}}}}},"docs":{}}}},"即":{"docs":{},"从":{"docs":{},"i":{"docs":{},"=":{"1":{"docs":{},"位":{"docs":{},"置":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"a":{"docs":{},"|":{"docs":{},"b":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}}}}},"2":{"docs":{},"位":{"docs":{},"置":{"docs":{},"开":{"docs":{},"始":{"docs":{},",":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.00625}}}}}}}},"docs":{}}}}},"－":{"docs":{"dp/palindrome-partition-ii.html":{"ref":"dp/palindrome-partition-ii.html","tf":0.0125},"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}},"对":{"docs":{},"于":{"docs":{},"任":{"docs":{},"何":{"docs":{},"i":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}}}}},"属":{"docs":{},"于":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"dp/pascal-triangle.html":{"ref":"dp/pascal-triangle.html","tf":0.007142857142857143}}}},"docs":{}}}},"优":{"docs":{},"化":{"docs":{},"空":{"docs":{},"间":{"docs":{},"到":{"docs":{},"一":{"docs":{},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},"：":{"docs":{"dp/triangle.html":{"ref":"dp/triangle.html","tf":0.004424778761061947}}}}}}}}}}}},"→":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.043478260869565216}}},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"因":{"docs":{},"为":{"docs":{},"是":{"docs":{},"两":{"docs":{},"层":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}}}}}}},"讲":{"docs":{},"解":{"docs":{},"来":{"docs":{},"自":{"docs":{"dp/wildcard-matching.html":{"ref":"dp/wildcard-matching.html","tf":0.006211180124223602}}}}}},"返":{"docs":{},"回":{"docs":{},"下":{"docs":{},"标":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}},"所":{"docs":{},"有":{"docs":{},"组":{"docs":{},"合":{"docs":{"misc/two-sum.html":{"ref":"misc/two-sum.html","tf":0.008403361344537815}}}}}}}}},"length":3873},"corpusTokens":["!=","!lefttree.isempty())","!stack.isempty())","\"","\"\",","\"\";","\"((()))\",","\"(()())\",","\"(())()\",","\"()(())\",","\"()()()\"","\");","\"*\")","\"...q\",","\"..q.\"],","\".q..\"]","\"0\"","\"1","\"12\"","\"12\",","\"15423760\";","\"27135460\";","\"2e10\"","\"?*\")","\"[","\"a*\")","\"aab\",return","\"aabcc\"","\"aabcc\",","\"aadbbbaccc\",","\"aadbbcbcac\"","\"aadbbcbcac\",","\"ab\"","\"abc\"","\"abc\",","\"abcb\",","\"abcced\",","\"abcde\"","\"ace\"","\"adjacent\"","\"adobecodebanc\",","\"aec\"","\"an\",","\"and\",","\"banc\"","\"c*a*b\")","\"cat","\"cats\",","\"catsanddog\",dict","\"code\"].","\"cog\"","\"cog\",","\"dbbca\"","\"dbbca\",","\"dog\"","\"dog\"].a","\"dot\"","\"exampl","\"example\",","\"hit\"","\"hot\"","\"is\",","\"justification.","\"justification.\"]","\"l\"","\"leet","\"leetcode\"","\"leetcode\",","\"of\",","\"q...\",","\"rabbbit\",","\"rabbit\"","\"rabbit\"return","\"rabbit\"为例）：","\"sand\",","\"see\",","\"text\",","\"thi","%","&","&&","'","'(',","')',left,","'*'","'*'.","'+'","'.'","'.')","'.'.you","'0'","'0'的时候；","'1'","'1';","'9'","'?'","'a'","'b'","'e'","'q'","'z'","(","(!dict.containskey(c))","(!map.containskey(c))","(!q.isempty())","(!queue.isempty())","(0,","(1","(12).","(1≤s≤m)","(1维dp)","(2维dp)","(a","(a.k.a","(a.length","(a1,","(arraylist)iter.next();","(board","(board[i][j]","(board[row][col]","(c)","(can","(can_place(row,","(candid","(char","(col","(contain","(counter","(curr","(curr.left","(dict.get(c2)","(double)","(double)(x+y)/2;","(end","(fast.next","(grid","(head","(i","(ie,","(includ","(inorder.length","(instart","(int","(int[]","(isvalid(row,","(item));","(item.size()","(j","(jump","(l","(l1","(l1.val","(lcs[i","(left","(length","(level","(list","(list1.get(i)","(list>","(listnod","(lists.length","(low","(m+n)).","(matrix","(n","(node","(node.left","(not","(num","(numrow","(o(n)","(p","(preorder.length","(prev.right","(record[nums.length][sum])","(result.size()","(right","(root","(root.val","(row","(row,","(row,column)","(rowindex","(s","(s1","(s1.length()","(set","(start","(string","(t),","(t[i","(tail","(target","(temp.size()","(total%2","(treenod","(triangl","(visited[i][j])","(word.length()","(workbreakcheck(s,","(x","(x)","(x,","(x[i]","(利用queue.size()移动指针)","(背包问题)","(递归",")",")**","*","**boolean[]","**if","**not**","**模版程序，辅助递归树理解**","**注意","**注意duplicates**","*/","*/}","*if","*p)","*s,","+","+2i,","+3i","+=","+]?(\\\\d+\\\\.?|\\\\.\\\\d+)\\\\d*(e[","+]?[0","+]?\\\\d+)?\";",",",",0);","..","...","/","/*","/*[word","/*check","//","//arrays.copyofrang","//both","//check","//convert","//current","//df","//doe","//e.g.","//find","//first","//greedi","//if","//initi","//iter","//k传得是第k个，index实则k","//longest","//mark","//now","//odd","//one","//onli","//print","//refer","//s2","//step","//t","//tri","//下面这个for循环作用于一行只有一个单词还没填满一行的情况","//初始化cuts，从ith位置到len做多要可以切len","//因为尝试的words[i]失败了，所以间隔数减1.此时判断剩余的间隔数是否大于0","//如果已经找到结果，则打印结果","//所以当前这个单词不能算作这行，所以间隔就减少一个","//放置皇后","//是间隔的倍数（为啥要减1，因为尝试当前words[i]后发现比l长了，","//测试用例","//继续探测下一行","//试探第row行每一个列","0","0)","0);","0){","0,","0.","0..n]","0.1","0/1","0;","0;//","0;//check","0;//two","0;//第一个算数不需要跳","0]","0};","1","1)","1))","1).get(j","1).get(j),","1).size()];","1);","1);//不是倍数的话还要计算","1)=='*')","1,","1,right);","1,即第len位置，为空字符，不需要切割。","1.","10","10%","10.","11,","12.","1245367中序遍历","15","16.","1;","1;//当s.charat(0)","1?","1]","1](0)","1](i","1](i)。","1](n","1])","1]))","1])//deal","1],","1].就是说，假设s已经匹配了j","1].现在无论s[j]是不是和t[i]匹配，匹配的个数至少是dp[i][j","1];","1];//1","1];//cut","1];//whi","1]==b[k/2","1]>b[k/2","1][0]","1][a[0].length","1][j","1][j]","1][j],","1][n","1][p.length()","1][s.length()","1][s2.length()","1][s]","1][target","1]。除此之外，当s[j]和t[i]相等时，我们可以让s[j]和t[i]匹配，然后让s[j","1]中间的这一个cut，操作＋1。即，math.min(cuts[i],","1]例如对于例子：","1]去匹配。所以递推关系为：","1]和b[k/2","1]和t[i","1]和t[j","1]是回文且","1]的大小。","1]的结果，我们来获得res[i]的表达式。思路是对于每个以i为结尾的子串，看看他是不是在字典里面以及他之前的元素对应的res[j]是不是true，如果都成立，那么res[i]为tru","1]（dp是从1开始计数，字符串是从0开始计数）匹配的话，dp[i][j]还要加上dp[i","1]，就做之前对称的操作就好。","1]，那么这个数就是两个数组中第k大的数。","1。比如给的例子aab，cuts[0]","1个字符，得到匹配个数为dp[i][j","1刀","1的前i个字符","1的结果，所以不需要二维数组，只需要一个一维数组来保存上一行结果即可）","1（i，j相邻）且s.charat(i)","2","2)","2)),","2,","2,3,6,7","2.","20","26","2:","2;","2]","2],","2d","2sum","2分的思想，每次递归取一半,","2，就是最坏情况每一个字符都得切割：a|a|b","2］对结果无影响","3","3,","3.","3.原题链接","3:","3]","3种情况","4","4,","40%","4251637后续遍历","4526731","5","5,","5.","5],","6","6,","6.","7","7,","7]","7],","9","9)","9]","9]*(.[0","9]+)?","9]+)?(e[",":",";","=","=\"rabbbit\",t","==","==0)","=>",">",">0",">=","?","[","[\"..q.\",","[\".q..\",","[\"aa\",\"b\"]","[\"abce\"],","[\"adee\"]","[\"cat","[\"cat\",","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","[\"leet\",","[\"sfcs\"],","[\"this\",","[0","[0,","[0,0]","[0..i","[0..n,","[0][0...","[1,","[1,1,1,1,1,5]","[1,1,1,1,5]","[1,1,5,1,1,1]","[1,1],","[1,2,1],","[1,2,3,4,5]","[1,3,3,1],","[1,4,6,4,1]","[100,","[15,7]","[1]","[1],","[1]与divid","[2,","[2,3,1,1,4]","[20,9],","[2]","[2],","[3,","[3,4],","[3]","[3],","[4,1,8,3]","[4,−1,2,1]","[4]","[6,5,7],","[7]","[all","[i,j]","[i,len]","[j+1,len","[s","[sqrt(x),","[startindex,","[−2,1,−3,4,−1,2,1,−5,4],","\\","\\*","]","](n","a\"","a)","a*b","a,","a.length","a.length;","a1","a2","a2,","a[0..i","a[0];","a[0];//initi","a[],","a[astart+parta","a[i]","a[i]);","a[i],","a[i][j]","a[i][j];","a[k/2","aaaaa","ab,","ac","aces/dec","ac代码","add","addfirst","adjac","aend","aend,","again.","ai,","ak)","ak).","along","alway","ambiguous.","an\",","anagram","anagrams(string[]","ancestor","ancestor(lca)","answer","answer:","answer：[0][0]","answer：[x,y]右下角终点。","answer：途中max值","approach;","args)","arr","arr)","arr[head];","arr[i]","array","array,","array.","array[j","array[j]","arraylist","arraylist();","arraylist(item));","arraylist>","arraylist>();","arrays.","arrays.fill(len,","arrays.fill(pred,","arrays.fill(result,","arrays.fill(visited,","arrays.sort(candidates);","array中的第k大（从1开始数）的数。因而等价于寻找并判断两个sort","array中第k/2（从1开始数）大的数。","as:","ask","assign","assist","assum","astart","astart,","awalys输出实话","b","b)","b,","b.length;","b[])","b[bstart+partb","b[k","backpack","backpack.","backpack?","bad","base","base的","base的,","basic","bbc","be","be:","befor","begin","beginword","beginword,","below.","bend","bend,","best","between","bf","binari","binarysearch(int[]","board","board)","board,","board.length","board[0].length","bodi","book,","bool","boolean","boolean[]","boolean[][]","boolean[board.length][board[0].length];","boolean[candidates.length];","boolean[len][len];//record","boolean[num","boolean[nums.length","boolean[s.length()","boolean[s.length()+1];","boolean[s1.length()","both","bother","bottom","bottom.","bound","break","break;","break]只需要判断是存不存在就可以了，这道题还要求出所有合法的string，","break]的求所有结的版本，[word","break]的结果跑一遍，如果字符串在dict中，在进行dfs暴力求解，一定程度上可以优化速度,","bstart","bstart,","buildgraph","buildtree(int[]","buildtreehelper(inorder,","buildtreehelper(int[]","c","c,","c2","candid","candidates,","candidates.length","candidates[i","candidates[i]","candidates[i];","canjump(int[]","card","case","case,","case.","case:","case?","cases.","cases:","case：","cell","cell,","cells.empti","char","char[]","charact","character.","characters.","check","children，root","chosen","class","click","climbstairs(int","cnt]","code","code\".","col","col)","col);","col0","collect","collection.add(0,","collection.add(curr.val);","coloumn","cols.","column","columnindex)","columnindex))","columnindex,","combin","combination(res,","combinations.","combinationsum(int[]","combinationsum2(int[]","come","comment,","common","compar","complex","condit","configur","conquer","conquer区别：","consecut","consist","const","constant","construct","contain","contigu","continue;","continue;//avoid","convenience.","convert","corner","count","count)","counter","counter++;","countprimenumberlessthan(int","countprimenumberlessthan(x)","cover","curr","curr)","curr,","curr.left,","curr.left;","curr.next","curr.right,","curr.right;","curr.val);","curr;","current","currrang","currrange;","cut","cut.","cut[0]","cuts[1]","cuts[2]","cuts[3]","cuts[i]表示从第i位置到第len位置（包含，即[i,","cuts[j+1]+1)最后返回cuts[0]。即为最终结果。","cuts[len+1]。","d","data","dean","decid","decod","delet","denot","descend","detail","determin","devis","df","dfs(board,","dfs(n,","dfs(result,","dfs(result,item","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","dfs,","dfs:","dfs是一种实现方法approach","dfs模版","dict","dict)","dict))","dict,","dict.get(c)","dict.get(c1)","dict.get(c2)","dict.put(c,","dict.put(c1,","dict.put(c2,","dict.remove(beginword);","dictionari","dict就好了。如果要指定","didn't","differ","dig","digits,","directli","discuss里的高分答案，同时也参考了一些其他教材和优质博客。由于年代有点久，之前笔记都是手写的，如果不小心忘记了标注出处，请发评论，发邮件，发issue，发pr,","distanc","distinct","distribut","disturb","divid","dog\",","dog\"]原题链接","don't","dot","doubl","down","dp","dp?","dp[0]","dp[0][0]","dp[0][0];","dp[0][1","dp[1","dp[1]","dp[][]","dp[a.length","dp[i","dp[i+1][j+1])","dp[i]","dp[i])","dp[i],","dp[i][j","dp[i][j]","dp[i][j]表示s1取前i位，s2取前j位，是否能组成s3的前i+j位","dp[i]表示前i个字符一共有多少个方案","dp[j]","dp[num.length","dp[s.length()]","dp。拿到这道题，先左对其，然后按照matrix","dp只能向左向下走,","dp可以用dfs来实现也可以用loop来实现","dp是一种解题思想","dp的子问题可以有交集，分治的子问题完全独立","dp解法，过不了leetcode新增大数据","dp，","dp，用来记录匹配子序列的个数（以","dp？","dream","dummi","dummynod","dup","dupic","duplic","dure","dynam","e","e.g.","each","edg","edge)","element","email,","empti","empty,","encod","end","end,","endindex)","endword","endword,","entir","equal","eratosthen","evenli","exactli","example,","example:","examples:","exce","except","exist","exist(char[][]","explan","express","expression:","extra","extranum","f","f(i)","f(i,","f(j)","f(s1.length(),","f(x","f(x,","f[0]","f[0][1⋯m]=false.","f[0][j]","f[1⋯n][0]=true;","f[i","f[i]","f[i][0]","f[i][j","f[i][j]","f[i][j]表示前s1前i个元素和s2前几个元素最长的公共序列是多少","f[i][s]","f[i]表示前i个元素最长的递增子序列是多少","f[i−1][s]:","f[i−1][s−num[i]]:","f[m][n]","f[n]","f[n][s]","factor","fals","false)","false);","false.","false;","false很直观，如果不等就是false了嘛。","fast","fast.next.next","fast.next.next;","fill","filled,","find","findallperfectsqurenum(x,","findkth(a,","findkth(a,astart,aend,b,bstart+partb,bend,k","findkth(b,bstart,bend,a,astart,aend,k);","findkth(int[]","findmediansortedarrays(int","findroot(inorder,","findroot(int[]","findsubstr","first","flag.","flags.","follow","for()","for(int","for(str","form","format","forward","found,","foursum","front","fulfil","full","fulli","fulljustify(string[]","function","function:","function：","g[n","g[n](0)","g[n](i)","game","ganker","ganker比较好理解","gather","gener","generate(int","generateparenthesis(int","getlca(root.left,","getlca(root.right,","getlca(treenod","getlis(int[]","getpath2root(node1);","getpath2root(node2);","getpath2root(treenod","getrow(int","given","given:","gn","go","goal","graph,","greater","greedi","grid","grid)","grid.","grid.length","grid.length;","grid[0].length","grid[0].length;","grid[0][0];","group","guarante","hand,","hashmap","hashmap<>();","hashmap>","hashmap>();","hashset<>();","haszerofirstcol","haszerofirstrow","head","head)","head);","head++;","head.next","head;","heap","helper","helper(board,","helper(char[][]","helper(list>","helper(res,","helper(result,","helper(s,","helper(str","here","hesit","high","high;","horizont","http://deanwen.com","http://www.algolist.net/algorithms/number_theoretic/sieve_of_eratosthen","https://discuss.leetcode.com/topic/30941/her","i)","i);","i,","i;","idea","idea.","if(","if(!result.contains(item))","if(a[astart+parta","if(i","if(i>0","if(k==1)","if(left","if(m==0)","if(m>n)","if(memo.containskey(s))","if(n","if(nums[left]","if(p.length()==0)","if(root","if(s.length()>300","if(s.trim().matches(regex)){","if(str","if(triangle.size()==1)","if(word","ii","ii给定k，","ii要求，组合中每个元素只能用一次，就排除了之前每个元素可以无限次使用的情况。就可以参照全排列的模版。用一个visited[]去标记元素是否被使用过。","illegalargumentexception(\"invalid","illegalargumentexception(\"no","implement","improv","increas","index","index)","index.)","index;","indic","inend","inend)","inend,","init:","initi","initialization:","init：f(i,0)","init：起点(0)","init：起点(0,0)","inner","inord","inorder)","inorder,","inorder.length","inorder.length)","inordertraversal(treenod","input","input\");","input,","insert","insid","instanti","instart","instart);","instart,","instead","int","int[]","int[][]","int[a.length];","int[len","int[m","int[m][n];","int[n];","int[num.length];","int[row][triangle.get(row","int[s.length()","int[s1.length()","int[t.length()","int[triangle.size()];","integ","integer.max_valu","integer.max_value;","integer.min_value;","integers,","integers.","intend","interleav","introduct","is,","is:","isinterleave(str","ismatch(\"aa\",","ismatch(\"aa\",\"a\")","ismatch(\"aa\",\"aa\")","ismatch(\"aaa\",\"aa\")","ismatch(\"aab\",","ismatch(\"ab\",","ismatch(const","ismatch(str","isnumber(str","isprime(int","isprime(x)","issue,","isvalid(int","it'","it.","item","item,","item.add(candidates[i]);","item.remove(item.size()","item:tmp){","item;","iter","iterative利用stack实现","i−1","j","j)","j,","j;","j=0;j=0;i","jump","jump(int[]","jumps.","justif","justifi","justified.","j（i，j是用一个字符）","j－1","k","k)","keep","key)","key,","know.","l","l)","l){","l,","l1","l1,","l1.next;","l1;","l2","l2)","l2,","l2.next;","l2.val)","l:","ladder","ladderlength(str","largest","largest;","last","last;","lca","lca(node1,","lcs(string","lcs[i][j","leetcod","left","left++;","left,","left;","len","len])的切割数（第len位置为空,","length","length);","length.","length;","less","letter","level","level)","levelord","line","line.","link","linkedlist();","linkedlist(temp));","linkedlist<>();","linkedlist<>(temp));","linkedlist>();","lis(int[]","lis/lc","list","list,","list.add(node);","list1","list1.get(i).parent;","list1.get(i+1);","list1.size()","list2","list2.get(j))","list2.size()","list;","list<>();","list>","listnod","listnode(0);","lists)","lists.length","lists.length)));","lists[0];","lists[1]);","log","longest","longestsubstring(str","loop","loop.","loop:","low","lowest","lowestcommonancestor(treenod","m","m),","m+n;","m,","main(string[]","maker","mani","manipul","map","map.get(c)","map.get(strkey);","map.put(c,","map.put(strkey,","map.put(strkey,temp);","map.values().iterator();","map>","mapping:","mark","marker,","match","matching,","matching一样，还是维护一个假设我们维护一个布尔数组res[i],代表s的前i个字符和p的前j个字符是否匹配(这里因为每次i的结果只依赖于j","math","math.ceil(math.sqrt(y));","math.floor(math.sqrt(x));","math.max(currrange,","math.max(dp[i","math.max(f[0","math.max(f[i","math.max(length,","math.min(a[astart],b[bstart]);","math.min(dp[0..i","math.min(dp[i","math.min(dp[i+1][j],","math.min(dp[i],","math.min(k/2,m);","math.min(triangle.get(i","matrix","matrix)","matrix,","matrix.length","matrix.length;","matrix[0].length","matrix[0].length;","matrixs[i+1][j","max","max/min","maximum","maxsubarray(int[]","me@deanwen.com","median","memo);","memo){","memo.get(s);","memo.put(s,","mention","merg","merge(lists[0],","merge(mergeklists(arrays.copyofrange(lists,","merge(mergesort(l1),","merge(mergesort(left),","merge2unsortedlist","mergeklists(arrays.copyofrange(lists,","mergeklists(listnode[]","mergesort","mergesort(l2));","mergesort(right));","messag","method","mid","mid)","min","mincut(str","mind","mindistance(str","minim","minimum","minimumtotal(list>","minpathsum(int[][]","minsum","minsum);","minwindow(str","miss","more","morri","move","multipl","mysqrt(int","mysqrt(x)","n","n)","n,","n]","naturally!","naturally.","necessari","need","neg","neighbor","neighboring.","new","newitem","newitem,","newlevel","newtarget","newtarget,","next","node","node)","node.parent;","node.right;","node1","node1,","node1.v","node2","node2)","node2);","node2){","node2,","node2.val)","nodes'","nodes.","non","none)","nonprim","normal","not).her","note:","notes,","null","null)","null){","null;","num","num)","num.length","num;","num[i]","num[i]]","num[j];","numafter","number","number)","number,","number.","numberafter","numbers,","numdecodings(str","numdistinct(str","numeric.","numrow","numrows)","numrows,","nums)","nums);","nums,","nums.length","nums.length){","nums[i","nums[i]","nums[j","nums[j]","nums[left]","nums[left＝0]","nums[mid=3]","nums[mid]){","nums[right]","o(1)","o(1)空间","o(1)空间复杂度，即只能使用常数空间；","o(log","o(logn)","o(m","o(mn)","o(n","o(n!)","o(n)","o(n).","o(nlogk)","o(sqrt(n))","o(sqrt(y)","object","object不稳定。","odd","on","onc","once.原题链接","one.","order","order.","order顺序是","origin","output","output,","ovaral","oven","overal","overflow","overflow**","p","p)","p.charat(0)=='*'","p.charat(p.length()","p[j]不是'*'。情况比较简单，只要判断如果当前s的i和p的j上的字符一样（如果有p在j上的字符是'?'，也是相同），并且res[i]==true，则更新res[i+1]为true，否则res[i+1]=false;","p[j]是'*'。因为'*'可以匹配任意字符串，所以在前面的res[i]只要有true，那么剩下的res[i+1],","pack","pad","pair","palindrom","palindrome.return","parent","parenthes","parentheses,","parentheses.for","parta","parta;","partb","partb);","partial).","partit","pascal","pascal'","pass","path","pattern","perfectsqurenum","permut","permutation/combin","place(row,","placement,","place，不要额外空间，直接在原矩阵上修改。","place？","pleas","pointer","pointer,","pointers.","pointers:","pointer实现o(n^k","posit","position.","possibl","possible.","post","postend","postend)","postord","postorder)","postorder,","postorder.length","postorder.length)","poststart","poststart,","pow(doubl","pow(x,","practice.","pre","pred","preend","preend)","preend);","preorder","preorder,","preorder.length","prestart","prestart,","prev","prev.right","prev.right;","prime","prime,","print_result();","privat","probabl","problem","problem,","process","produc","program","prototyp","provid","public","pull","puzzl","puzzle.","puzzle:","q","q.offer(beginword);","q.size();","queen","queen(int","queen(row","queen*/","queens'","queensgiven","queue","queue.offer(root);","queue.size();//us","quick","r","rang","range，并且维护实时更新一个当前可达范围curr","ra，t为r，t肯定是s的子串；当i=2，j=2时，s仍为ra，t为ra，这时t也是s的子串，所以子串数在dp[2][1]基础上加dp[1][1]。","ra，t为r，t肯定是s的子串；这时i=2，j=2时，s为ra，t为rs，t现在不是s的子串，当之前一次是子串所以现在计数为1.","re","reach","record","record[0][0]","reduc","reference.","reference:","regex","regular","rel","relat","remain","repeat","repres","request,","requir","res,","res.add(curr.val);","res.add(new","res.addfirst(node.val);","res;","res[","res[0]","res[i+1]","res[i+2],...,res[s.length()]就都是true了。","res[i]&&(p.charat(j)=='?'||s.charat(i)==p.charat(j));","reset","resources,","respectively.","respectively;","restrictions.","result","result)","result);","result,","result.add(item);","result.add(new","result.add(newlevel);","result.add(root.val);","result.addall(item);","result.get(level);","result;","result[0]","return","return;","reus","revers","right","right)","right){","right,","right.","right;","right如果当前root不为空，压入stack，令其为左孩子，如果其左孩子为空，就pop","root","root)","root,","root.*","root.left","root.left);","root.left;","root.right","root.right);","root.right;","root.val","root.val);","root;","root，输出root.val,","rotat","routine,","row","row)","row,","row0","rowindex)","run","s","s)","s,","s.","s.charat(0)","s.charat(head);","s.charat(i)","s.charat(j)","s.charat(j)。","s.equals(\"0\"))","s.for","s.length()","s.length())","s.length();","s.length()==0;","s.substring(start,","s.tochararray())","s.tochararray();","s.trim().tochararray();","s/c","s1","s1,","s1.length();","s1[i]","s2","s2)","s2));","s2,","s2.","s2.length()","s2.length())","s2.length();","s2取第1位d，是否能组成s3的前两位aa","s3","s3)","s3,","s3.length())","s3=abc","s[j","s[j];","same","sand","satisfi","search","search,","see","seem","segment","select","send","sentenc","sentences.for","separ","sequenc","sequence).","sequenti","set","setzeroes(int[][]","shortest","show","simpl","singl","size","slot","slow","slow.next","slow.next;","smaller","smallest","so,","solut","solution.","solution?","solv","solvenqueens(int","solver","solverwrit","solvesudoku(char[][]","somehow","sort","sort。这道题用来模拟merg","sort，heap","sort，quick","space","space)","space,","space?","spacenum","sqrt","sqrt(x)","sqrt(x))","sqrt(x),","sqrt(x)?","sqrt(x)],","sqrt(y)]","squar","stack","stack();","stack.pop();","stack.push(node.left);","stack.push(root);","stack<>();","start","start)","start,","start;","state:","statement","state：","static","step","step++;","step;","still","stop","str","str.append(\"","str.length();","str.tostring();","straight","straightforward","string","string\");","string();","string(item));","string.","string[]","string[n];","stringbuild","stringbuilder();","strings,","strs)","strs.length","sub(i,j)","subarray","subfix","subsequ","subset?","substr","substree][root];","substring,","subtree][al","such","sudoku","sudoku模版作为子函数。然后逐行，逐列的去试。","sudoku，可以用valid","sum","sum.","sum;","sum[0][0]","sumgiven","summar","summari","support","system.out.println(arrays.tostring(getlcs(x,y)));","system.out.println(lcs(s1,","s−num[i]","s是空串，t不是空串，s没有子序列匹配。","t","t)","t,","t.","t.length()","t.length();","t.tochararray())","t/c","t/c:","tail","tail++;","target","target)","target,","temp","temp);","temp,","temp.add(1);","temp.add(nums[i]);","temp.add(strs[i]);","temp.remove(temp.size()","templat","template]*/","test","text","text\",","text,","thank","thing","those","thoughts,","throw","time","time,","times.","tips:","tmp","top","total","total/2);","total/2+1);","transform","travel(list>","travel(result,","travers","traversal]的变种，总体思想用dfs去遍历每一层，需要注意的地方就是zigzag","traversal]类似，几乎就是完全一样,","tree","tree,","tree.","treenod","treenode(postorder[postend]);","treenode(preorder[prestart]);","tree）的概念。在morris方法中不需要为每个节点额外分配指针指向其前驱（predecessor）和后继节点（successor），只需要利用叶子节点中的左右空指针指向某种顺序遍历下的前驱节点或后继节点就可以了","triangl","triangle)","triangle,","triangle.","triangle.get(0).get(0);","triangle.get(i","triangle.get(i).get(j);","triangle.get(i).set(j,","triangle.get(i).size()","triangle.size()","triangle.size();","trianglegiven","trim","true","true,","true.","true;","true;//default","two","twosum(int[]","t和s都是空串.","t是空串，s只有一种子序列匹配。","uniqu","uniquepaths(int","unit","unlimit","unsort","up","updat","up版combin","us","valid","valid,return","valid.","validation.","valu","values.","veri","vertic","visit","visited)","visited);","visited**","visited[]","visited[i","visited[i]","visited[i][j]","void","vs","w.","way","well","well.","whatev","whether","while(i","while(iter.hasnext())","while(root","while(tail","wild","wildcard","window","window.","within","without","word","word)","word,","word.","word.charat(start)){","word.return","wordbreak(str","wordbreakcheck(str","wordbreakhelper(prefix,","wordbreakhelper(s,dict,map);","wordbreakhelper(str","wordlist","words,","words.length","words.题目链接","words:","worst","write","x","x)","x,","x.","x.length;","x[i];","y","y)","y)从哪个点来？","y)到哪个点去？f(x","y)的状态转移方程","y[j])","y]区间","yes/no","z","zero","zero;","zigzag","zigzaglevelorder(treenod","zigzag关键要在这里判断当前层为奇数还是偶数，然后按要求输出","{","{/*","{//2.a)","{//2.b)","{//deal","{//remov","{1,","{2,","{3,9,20,#,#,15,7},","|","|.这样某个位置是否可以放置皇后的问题已经解决。然后运用递归的思想去寻找n个皇后的解，伪代码思想如下：","|cut|","||","}","}els","~","–","“when","“这道题属于纯粹的字符串操作，要把一串单词安排成多行限定长度的字符串。主要难点在于空格的安排，首先每个单词之间必须有空格隔开，而当当前行放不下更多的","”","…","→","≤","一个是求能否走到，一个求走到的最小值。都符合动归的使用条件。但是dp在这道题的效率不高，wors","一定不是dp","一定是dfs，一定不是dp","一想到求所有，立马联想到dfs，排列组合啊的递归模版。这道题，首先可以用[word","一般matrix","上一步可能来自于上面，或者左边，比较这两个数的大小，取较小的，然后加上当前的值。","上面的这个cuts数组是用来帮助算最小cuts的。","不放入第i个物品，前","不是constant","不能sort/swap","不适用，","与dfs的区别：","与递归的区别","两种状态转移思想","个物品能否取出一些体积和为","个物品能否取出一些组成体积和为s的背包。","个细节就是最后一行不需要均匀分配空格，句尾留空就可以，所以要单独处理一下。时间上我们需要扫描单词一遍，然后在找到行尾的时候在扫描一遍当前行的单","中每个质数的倍数，然后找出剩余的数","中续遍历","为","为list","为了能保证上面的分半操作正确，需要保证a数组的长度小于b数组的长度。","为当前可达范围current","举个列子，注意左上角那一对箭头指向的格子dp[1][1],","举个简单的例子s1","举证，当然是matrix","之间，那么他们的平方数一定在[x,","二叉树的形状不能被破坏（中间过程允许改变其形状）","二维dp代码来自,","交换swap两个数对结果没影响，一定不是dp","什么问题不能用dp解决？","什么问题要用dp解决？","从dp[0][1]","从dp[1][0]","从起点如何走来的(0,","从这个表可以看出，无论t的字符与s的字符是否匹配，dp[i][j]","令其等于有孩子。","优化空间到一维dp：","位)","位)，第二个条件，之前那个格子也要等于true","位）","值为true的最大","假设总共有n个字符串，并且字典是用hashset来维护，那么总共需要n次迭代，每次迭代需要一个取子串的o(i)操作，然后检测i个子串，而检测是constant操作。所以总的时间复杂度是o(n^2)（i的累加仍然是n^2量级），而空间复杂度则是字符串的数量，即o(n)。代码如下：","假设我们已经有了gn","全排列","全部是","典型一维dp","典型二维dp","典型的bfs题，这道题只用求距离，所以不用建图，bfs的时候，updat","刀，从0位置开始切最多切4刀","分段有序，分段搜索","分治","分类讨论，常规解法：","初始值","初始化：","初始时，是len","利用df","利用hashmap实现o(n)","利用linkedlist","利用siev","利用sqrt","利用stack记录左孩子，因为tree自顶向下的顺序是一定的","利用two","利用二分查找降低复杂度到","利用小问题来解决大问题，记忆化搜索","利用快慢指针找中点，分别归并排左右","利用数组有序的特性实现o(logn)","到","前1~n个物品组成体积和为0的背包始终为真，其他情况为假。","前序遍历","前面的间隔里面。实现中我们维护一个count计数记录当前长度，超过之后我们计算共同的空格量以及多出一个的空格量，然后将当行字符串构造出来。最后一","动归","包括target在内可能还有不同的数存在于nums[left]","单词并且字符又不能填满长度l时，我们要把空格均匀的填充在单词之间。如果剩余的空格量刚好是间隔倍数那么就均匀分配即可，否则还必须把多的一个空格放到","即从i=1位置开始，a|b","即从i=2位置开始,","原题链接","反之向右找，如果node1","发whatever，我会立马加上。","变形preorder，再逆序输出结果。","只开最后一列数组用来储存。","只是把后续遍历换成了前序。所以在前续遍历中，root永远都是第一位，所以先在前续遍历中找到root，然后再找到root在中需遍历中的位置，分成左右两边，left","只需要求出第kth行的内容。","可以从上往下也可以从下往上推，这里我们采用从下往上推","可以优化到o(n)","可以看到，后续遍历中，root永远都是最后一位，所以先在后续遍历中找到root，然后再找到root在中需遍历中的位置，分成左右两边，left","同时，在返回结果时候，注意精度问题，返回double型的就好。","同时，如果字符串s[i","同时，这道题还要判断重复解。两个方法解决","同理，如果s1","后行数r，则是o(r*l)）。代码如下：”","含有duplicates进行binari","和","和[0..n][0]","因为dp利用重复计算的结果，[2][3]会造成闭合回路(a.k.a","因为sort","因为每个(x,y)只计算一次，所以总的时间复杂度为o(n^2)","因为要","因为要求total","因为要求极值m*n","因为要求极值一维数组，当然是一维dp，","因为除法是向下取整，并且页为了方便起见，对每个数组的分半操作采取：","因此，在计算中位数median时候，需要根据奇偶分类讨论。","在","在edge范围内，则不需要跳，如果当前index超出最大可达范围edge，则step++，","复杂度分析：对每个长度为k的字符串排序，时间复杂度为(o(klogk)),n个字符就是(o(nklogk)),n为数组大小，空间复杂度为o(nk)就是hashmap的大小。","大状态","大状态依赖小状态的计算结果","如何判断字符串[i,j]是不是回文？","如果","如果a[k/2","如果right为空，pop","如果一个点为令一个点的祖先，那么这个点就是lca","如果不是bst，看看提不提供parent指针。divid","如果交换［3，","如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。","如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。","如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。","如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。","如果有parent指针，分别遍历left","学习笔记","完整代码如下","完整代码如下：","定义:","实现方式有两种：df","实质上时搜索加上记忆化的功能,","对于任何i","寻找使","小状态","就要想到排列组合，想到dfs，先想想能不能利用排列组合的模版。其实这道题不用排列组合那个复杂，只需要利用递归模拟一下过程就可以，要点是左括号数目必须大于等于又括号的数目，因为类似“)(”","就说明有anagram，返回所有的结果。还有一个关键点是如何去遍历hashmap，重写一下iterator就好了","属于[1,","常考","常见类型","常见题型","常规矩阵dp的解法：","并且更新edg","建立无向有权图，然后从起点dfs到终点的所有路径即可。","当count达到子串长度，说明之前遍历的这些有符合条件的串，用一个pre指针帮忙找，pre指针帮忙找第一个在hashmap中存过的，并且找到后给计数加1后的总计数是大于0的，判断是否为全局最小长度，如果是，更新返回字符串res，更新最小长度，如果不是，继续找。","当i=2，j=1时，","当字符串[i,j]是回文后，说明从第i个位置到字符串第len位置的最小cut数可以被更新了,","当然，边界条件页不能少，需要判断是否有一个数组长度为0，以及k==1时候的情况。","往下的箭头表示，s1目前取了0位，s2目前取了1位，我们添加s1的第1位，看看它是不是等于s3的第2位，(","往右的箭头表示，s1目前取了1位，s2目前取了0位，我们添加s2的第1位，看看它是不是等于s3的第2位，(","待解","思路是利用hashmap来存dict，然后遍历整个母串。因为这里是要求最短的包含子串的字符串，所以中间是可以允许有非子串字符的，当遇见非子串字符而count又没到子串长度时，可以继续走。","思路来自code","思路题解来自we","思路：","思路：anagrams就是两个单词所包含的字符和数量都是一样的，只是顺序不同。比如[\"tea\",\"ate\",\"aet\"],","思路：jump","思路：use","思路：whi","思路：一看到all","思路：一维dp","思路：可以先尝试做一个二维的表int[][]","思路：很典型了一道动态规划题，相当于半个","思路：把棋盘存储为一个n维数组a[n][n]，数组中第i个元素的值a[i]代表第i行的皇后位置，这样便可以把问题的空间规模压缩为一维o(n)，在判断是否冲突时也很简单，首先每行只有一个皇后，且在数组中只占据一个元素的位置，行冲突就不存在了，其次是列冲突，判断一下是否有a[i]与当前要放置皇后的列j相等即可。至于斜线冲突，通过观察可以发现所有在斜线上冲突的皇后的位置都有规律即它们所在的行列互减的绝对值相等，即|","思路：此题套用排列组合模版，是用dfs找解决方案问题，值得注意这道题：","思路：计算有限个数的数据的中位数的方法是：把所有的同类数据按照大小的顺序排列。如果数据的个数是奇数，则中间那个数据就是这群数据的中位数；如果数据的个数是偶数，则中间那2个数据的算术平均值就是这群数据的中位数。","思路：讲解来自,","思路：这道题仍然是动态规划的题目，我们总结一下动态规划题目的基本思路。首先我们要决定要存储什么历史信息以及用什么数据结构来存储信息。然后是最重要的递推式，就是如从存储的历史信息中得到当前步的结果。最后我们需要考虑的就是起始条件的值。","思路：这道题分析看，就是一个词，在一行出现也是true，一列出现也是true，一行往下拐弯也是true，一行往上拐弯也是true，一列往左拐弯也是true，一列往右拐弯也是true。所以是要考虑到所有可能性，基本思路是使用dfs来对一个起点字母上下左右搜索，看是不是含有给定的word。还要维护一个visited数组，表示从当前这个元素是否已经被访问过了，过了这一轮visited要回false，因为对于下一个元素，当前这个元素也应该是可以被访问的","思路：这道题和[construct","思路：首先此类问题是经典np问题，时间复杂度上就不要纠结了。肯定是指数次。主题思想和n－queens类似，就是一个一个试，行就填，不行就该回'.'空，回溯之～首先，分割子问题，要判断每个数是不是valid","思路：首先观察一下三角形的生成规律。","我们以dp[m+1][n+1]","我们想要生成gn","我们需要判断a[k/2","或超时的情况。目前此解法超时，leetcode不知道加了什么鬼test","所以，每次跳进递归不用都往后挪一个，还可以利用当前的元素尝试。","所有路径，那就是典型的先从终点到起点","手动实现求平方根，利用二分查找实现o(logn)","找出所有方案","找坐标规律。matrix","找最大值/最小值","把时间复杂度降低到o(n)","指定点","指定点(n)","接下来我们套用上面的思路来解这道题。首先我们要存储的历史信息res[i]是表示到字符串s的第i个元素为止能不能用字典中的词来表示，我们需要一个长度为n的布尔数组来存储信息。然后假设我们现在拥有res[0,...,i","放入第i个物品，前","数组","数组/字符串/matrix","整除，所以都不是质数","方案数目是要想到用dp","无关下标顺序，可以排序","无限dfs栈溢出","既","时间复杂度：o(n)","时间复杂度：o(n^2)","时间复杂度：o(nm)","是i前一个字符","是否存在一种可能","是否是回文。","是否有duplic","最优解，in","最右边那个点","最后ac结果","最近因为种种原因又要开始刷题了。所以把之前leetcode和九章算法视频过程中的笔记总结一下了，很多地方参考了九章算法的代码和讲义，leetcod","栈顶的左孩子。","模版程序，辅助递归树理解","次操作，n","正序遍历字符创造的矩阵是1","正负数指数n**","此题还有的follow","求方案总数","注意","注意duplic","注意s以0为base，dp以1位bas","注意下标的前后顺序","注意消去重复组合和不必要的遍历","注意边界条件","点","点的","然后可以套用图的bfs去找距离。","特殊化到求median，那么对于奇数来说，就是求第(m+n)/2+1（从1开始数）大的数。","状态代表什么？需要灵感","状态转移方程详细解析","环)","用stack记录所有left","用当前数和之前的和比大小，取较大的，然后维护一个max，","由于anagrams字符串的所有字符都是一样的，如果可以对每个字符排序，则结果一样，就可以当作key用hashmap去存，然后value就是不同的字符串没排序前的形态。最后遍历一下hashmap，valu","由于是link","的index是0","的两种解法。分析思路同上","的前j个字符","的四点要素","的常规套路","的等效性降低循环区间","的背包。","的路径，找到公共点","相似问题pascal'","相似题目n","相似题目：","相等(==)的case,","研究s1[i]和s2[j]的关系","研究最后一步怎么来的","空间复杂度：o(n)","空间复杂度：o(n^2)","空间复杂度：o(nm)","等价于","简单来说","算法的时间复杂度因为是两层循环，所以是o(m*n),","组合问题","终点","结果","结果：dp[a.length","考点就是二分查找","考点：df","考点：merg","考点：mergesort的merge部分","考点：递归＋merg","而且防止变态超长string","而对于偶数来说，就是求第(m+n)/2大（从1开始数）和第(m+n)/2+1大（从1开始数）的数的算术平均值。","而空间复杂度只用一个一维数组，所以是o(n)，假设s的长度是n，p的长度是m。","若上下左右都可以行","若有duplicates,","若果一个数","表示s1取第1位a,","表示sequenc","表示前i个位置的字符","表示前i个位置需要的最小步数","表示前i个元素的和","表示前i个数，取出一些物品能否组成体积和为s的背包","表示在从（x,y）到（i，j）位置上的最小和sum的值。","表示起点[0,0]到[i,j]位置上的和。","要move","要o(n^2)，大数据超时。先讲解动归训练思维。贪心解法o(n)","要使用o(1)空间进行遍历，最大的难点在于，遍历到子节点的时候怎样重新返回到父节点（假设节点中没有指向父节点的p指针），由于不能用栈作为辅助空间。为了解决这个问题，morris方法用到了线索二叉树（thread","要区别对待","要求奇数层逆序输出，偶数层正场输出，用linkedlist来存每一层的结果，因为可以从头插入，也可以从未插入，插入复杂度为o(1)。总体复杂度为o(n)，最后在用个arraylist存每一层的结果就好了。","要知道如何构建二叉树，首先我们需要知道二叉树的几种遍历方式，譬如有如下的二叉树：","解决此题的方法可以依照：寻找一个union","解法1参照code","解法2:参照九章","解法完全一样，只需要返回result.size()就好了","讲解来自","词，不过总体每个单词不会被访问超过两遍，所以总体时间复杂度是o(n)。而空间复杂度则是结果的大小（跟单词数量和长度有关，不能准确定义，如果知道最","贪心解法o(n)思路：维护一个最大可达范围edge，如果在当前index","起点","起点)","起点为[0，0]，矩阵dp","起点为a[0]","起点：[a.length","起点：a[0]","返回下标","返回所有组合","还有dfs版","还有一点需要注意的是，string","还需要一个dp二维数组matrixs[i][j]表示字符串[i,j]从第i个位置（包含）到第j个位置（包含）","这样整个问题就迎刃而解了。","这种解是不合法的","这道题实质上还是[binari","这道题是[word","这道题跟regular","逆序插入，从右往左看的话","递归的方法去排列所有情况，时间复杂度为n!","递推公式分两种情况：","通常做法可以预处理dict，build","通解，可以延展到k－sum","那true呢？首先第一个条件，新添加的字符，要等于s3里面对应的位(","那么如何判断两个有序数组a,b中第k大的数呢？","那么就是从j+1位置开始到第len位置的最小cut数加上","那么通过观察我们可以发现如下规则：","那什么时候取true，什么时候取false呢？","都可以被","配上sequenc","重复上述过程，通过前续遍历找到根节点，然后在中序遍历数据中根据根节点拆分成两个部分，同时将对应的后序遍历的数据也拆分成两个部分，重复递归，就可以得到整个二叉树了。","重复上述过程，通过后续遍历找到根节点，然后在中序遍历数据中根据根节点拆分成两个部分，同时将对应的后序遍历的数据也拆分成两个部分，重复递归，就可以得到整个二叉树了","重复以上1、2直到当前节点为空。","重点)","附jump","需要logn","需要辅助数组判断每一个integer的可用性","非空[0,","非递归)","非递归iterativein","面试常考dp类型","首先判断tree是不是bst,如果为bst，按照bst定义去搜索，如果当前遍历时，root比两个点都大，那么就往根的左边找","首先时间复杂度为o(nlogn)的排序算法就3种，","首先设置dp变量","高大上ac版本","高手在民间","（abc==abc）","，假设s1已经取了2位，c还没取，此时是false（ab!=bb），我们取s2的新的一位c，即便和s3中的c相等，但是之前是false，所以这一位也是fals","，同样的假设，s1取了2位，c还没取，此时是true（ab==ab），我们取s2的新的一位c,和s3中的c相等，且之前这一位就是true，此时我们可以放心置tru","－","＝"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"leetcode 学习笔记\n最近因为种种原因又要开始刷题了。所以把之前leetcode和九章算法视频过程中的笔记总结一下了，很多地方参考了九章算法的代码和讲义，leetcode discuss里的高分答案，同时也参考了一些其他教材和优质博客。由于年代有点久，之前笔记都是手写的，如果不小心忘记了标注出处，请发评论，发邮件，发issue，发PR, 发whatever，我会立马加上。\nSomehow I need to start leetcoding again. In this book, I will write down my thoughts, notes, and summary during leetcode practice. Thanks to multiple resources, it might be missing the reference. If you see so, please don't hesitate to send email, comment, issue, pull request, or whatever to let me know. I will update at first convenience.\nDean W. | A Dream Maker | me@deanwen.com | http://deanwen.com\n"},"math/math.html":{"url":"math/math.html","title":"Math","keywords":"","body":"Math Related Summary\n常见题型 \n\npow(x, n)\nisPrime(x)\ncountPrimeNumberLessthan(x)\nfindAllPerfectSqureNum(x, y)\nsqrt (x) \n\n\npow(x, n) 利用二分查找降低复杂度到 O(logn)\n-  **注意 正负数指数n**\n-  **注意 integer overflow**\n\npublic double pow(double x, int n) {\n    if (n \n\nisPrime(x) 利用二分查找降低复杂度到 O(sqrt(n))\n-  2 is the smallest prime number\n-  num % 2 == 0 is **not** prime number\n-  all odd numbers are prime number\n-  if the input X can be divided by any factor in [3, sqrt(X)], it's **not** prime number  \n- Why to sqrt(X)?\n  *if x is a prime number, it can be factored into two factors a and b, like x = a \\* b, if both a and b are greater than sqrt(X), a*b will be greater than X.  So at least one of those factors must be less or equal to the square root of n, and to check if n is prime, we only need to test for factors less than or equal to the square root.*\n\npublic boolean isPrime(int num) {\n    if (num == 2) return true;\n    if (num \n\ncountPrimeNumberLessthan(X) 利用sieve of Eratosthenes 把时间复杂度降低到O(n) \n- Detail explanation is http://www.algolist.net/Algorithms/Number_theoretic/Sieve_of_Eratosthenes\n- 简单来说\n- mark 2 ~ sqrt(X) 中每个质数的倍数，然后找出剩余的数\n- i * i + i, +2i, +3i ... = i * (i + 1) 都可以被 i 整除，所以都不是质数\n\npublic int countPrimeNumberLessthan(int num) {\n    boolean[] nonPrime = new boolean[num + 1];\n    //mark non-prime number as true\n    for (int i = 2; i * i\n\nfindAllPerfectSqureNum(x, y) where 1  利用sqrt 的等效性降低循环区间 O(sqrt(y) - sqrt(x))\n- 若果一个数 在 [sqrt(x), sqrt(y)] 之间，那么他们的平方数一定在[x, y]区间\n\npublic List perfectSqureNum (int x, int y) {\n    int start = Math.floor(Math.sqrt(x));\n    int end = Math.ceil(Math.sqrt(y));\n    List res = new LinkedList<>();\n    for (int i = start + 1; i \n\nmySqrt(X) 手动实现求平方根，利用二分查找实现O(logn)\n- 考点就是二分查找\n- 注意边界条件\n\npublic int mySqrt(int num) {\n    if (num == 0 || num == 1) {\n        return num;\n    }\n\n    int low = 0, high = num;\n    while (low  num / mid) {\n            high = mid - 1;\n        }else {\n            low = mid + 1;\n        }\n    }\n\n    return high;\n}\n\n"},"string/substring-related.html":{"url":"string/substring-related.html","title":"Substring","keywords":"","body":"Substring Related Problem\nFor most substring problem, we are given a string and need to find a substring of it which satisfy some restrictions. A general way is to use a hashmap assisted with two pointers. We can summarize a template like below.\nThe idea is \n\nUse two pointers: start and end to represent a window.\nMove end to find a valid window.\nWhen a valid window is found, move start to find a smaller window.\n\npublic int findSubstring (String s) {\n    Map dict = new HashMap<>();\n    for() {/* Initialize the dict here */}\n\n    int counter = 0;//check whether the substring is valid\n    int begin = 0, end = 0;//two pointer\n    int length = 0;// length of substring\n    while (end \n\nMinimum Window Substring\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). For example: S = \"ADOBECODEBANC\", T = \"ABC\", Minimum window is \"BANC\"  \n\n思路是利用HashMap来存Dict，然后遍历整个母串。因为这里是要求最短的包含子串的字符串，所以中间是可以允许有非子串字符的，当遇见非子串字符而count又没到子串长度时，可以继续走。\n当count达到子串长度，说明之前遍历的这些有符合条件的串，用一个pre指针帮忙找，pre指针帮忙找第一个在HashMap中存过的，并且找到后给计数加1后的总计数是大于0的，判断是否为全局最小长度，如果是，更新返回字符串res，更新最小长度，如果不是，继续找。\npublic String minWindow(String s, String t) throws Exception {\n    Map dict = new HashMap<>();\n    for (char c : s.toCharArray()) {\n        dict.put(c, 0);\n    }\n    for (char c : t.toCharArray()) {\n        if (!map.containsKey(c)) {\n           throw IllegalArgumentException(\"No such string\");\n        }\n        map.put(c, map.get(c) + 1);\n    }\n\n    int head = 0, tail = 0;\n    int start = 0, length = Integer.MAX_VALUE;\n    int counter = t.length();\n    //Step 2: move the end to find valid window\n    while(tail  0) {\n            counter--;\n        }\n        dict.put(c1, dict.get(c1) - 1);\n        tail++;\n\n        //Step 3: move head to find the minimum window\n        while (counter == 0) {\n            if (length > tail - head) {\n                length = tail - head;\n                start = head;\n            }\n            char c2 = s.charAt(head);\n            dict.put(c2, dict.get(c2) + 1);\n            if (dict.get(c2) > 0) {\n                counter++;\n            } \n            head++;\n        }\n    }\n    return length == Integer.MAX_VALUE ? \"\"; s.substring(start, start + length);\n}\n\n\nFind longest substring without repeating characters.\n\nOne thing needs to be mentioned is that when asked to find maximum substring, we should update maximum after the inner while loop to guarantee that the substring is valid. On the other hand, when asked to find minimum substring, we should update minimum inside the inner while loop.\npublic int longestSubstring(String s) {\n    char[] arr = s.toCharArray();\n    Map dict = new HashMap<>();\n    for (char c : arr) {\n        if (!dict.containsKey(c)) {\n            dict.put(c, 0);\n        } else {\n            dict.put(c, dict.get(c) + 1);\n        }\n    }\n\n    int head = 0, tail = 0;\n    int counter = 0;\n    int length = Integer.MIN_VALUE;\n    while (tail  0) {\n            counter++;\n        }\n        tail--;\n        dict.put(c1, dict.get(c1) - 1);\n\n        while (counter > 0) {\n            char c2 = arr[head];\n            if (dict.get(c2) > 1) {\n                counter--;\n            }\n            head++;\n            dict.put(c2, dict.get(c2) + 1);\n            length = Math.max(length, tail - head);\n        }\n    }\n    return length;\n}\n\n\nReference: https://discuss.leetcode.com/topic/30941/here-is-a-10-line-template-that-can-solve-most-substring-problems 高手在民间\n\n"},"string/text-justification.html":{"url":"string/text-justification.html","title":"Test Justification","keywords":"","body":"\nGiven an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left justified and no extra space is inserted between words.题目链接\n\nFor example,\nwords: [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nL: 16.\n\nReturn the formatted lines as:\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n\nNote: Each word is guaranteed not to exceed L in length.\nclick to show corner cases.\nCorner Cases:\nA line other than the last line might contain only one word. What should you do in this case?\nIn this case, that line should be left-justified.\n\n思路来自Code Ganker  \n“这道题属于纯粹的字符串操作，要把一串单词安排成多行限定长度的字符串。主要难点在于空格的安排，首先每个单词之间必须有空格隔开，而当当前行放不下更多的 单词并且字符又不能填满长度L时，我们要把空格均匀的填充在单词之间。如果剩余的空格量刚好是间隔倍数那么就均匀分配即可，否则还必须把多的一个空格放到 前面的间隔里面。实现中我们维护一个count计数记录当前长度，超过之后我们计算共同的空格量以及多出一个的空格量，然后将当行字符串构造出来。最后一 个细节就是最后一行不需要均匀分配空格，句尾留空就可以，所以要单独处理一下。时间上我们需要扫描单词一遍，然后在找到行尾的时候在扫描一遍当前行的单 词，不过总体每个单词不会被访问超过两遍，所以总体时间复杂度是O(n)。而空间复杂度则是结果的大小（跟单词数量和长度有关，不能准确定义，如果知道最 后行数r，则是O(r*L)）。代码如下：” \npublic List fullJustify(String[] words, int L) {\n    List res = new ArrayList();\n    if(words == null || words.length == 0) {\n        return res;\n    }\n    int count = 0;\n    int last = 0;\n    for(int i = 0; i  L){\n            int spaceNum = 0;\n            int extraNum = 0;\n            //因为尝试的words[i]失败了，所以间隔数减1.此时判断剩余的间隔数是否大于0\n            if(i - last - 1 > 0){\n                //是间隔的倍数（为啥要减1，因为尝试当前words[i]后发现比L长了，\n                //所以当前这个单词不能算作这行，所以间隔就减少一个\n                spaceNum = (L - count) / (i - last - 1);\n                extraNum = (L - count) % (i - last - 1);//不是倍数的话还要计算\n            }\n            StringBuilder str = new StringBuilder();\n            for(int j = last; j  0) {\n                        str.append(\" \");\n                    }\n                    extraNum--;\n                }\n            }\n\n            //下面这个for循环作用于一行只有一个单词还没填满一行的情况\n            for(int j = str.length(); j \n"},"sort/introduction.html":{"url":"sort/introduction.html","title":"Sort","keywords":"","body":""},"sort/merge-sort.html":{"url":"sort/merge-sort.html","title":"Merge-Sort","keywords":"","body":"MergeSort List Related Summary\n常见题型 \n\nSort a linked list in O(n log n) time using constant space complexity \n\n首先时间复杂度为O(nlogn)的排序算法就3种， merge sort，quick sort，heap sort。这道题用来模拟merge sort routine, heap sort 不是constant space, 由于是linked list, quick sort 不适用， 因为sort object不稳定。\n\nmerge sorted linked list in aces/decs order\n考点：mergesort的merge部分\n\n注意 是否有duplicates\n\n\n\n\npublic ListNode merge (ListNode l1, ListNode l2) {\n    ListNode curr = new ListNode(0);\n    ListNode dummy = curr;\n    while (l1 != null && l2 != null){\n        if (l1.val == l2.val) {//remove dups\n            curr.next = l1;\n            l1 = l1.next;\n            l2 = l2.next;\n        }else if (l1.val \n\nmerge unsorted linked list in aces/decs order\n考点：merge sort\n\n利用快慢指针找中点，分别归并排左右\n\n\n\n\npublic ListNode merge2UnsortedList (ListNode l1, ListNode l2) {\n    return merge(mergeSort(l1), mergeSort(l2));\n}\n\npublic ListNode mergeSort (ListNode head) {\n    if (head == null || head.next == null) {\n        return head;\n    }\n\n    ListNode fast = head;\n    ListNode slow = head;\n    while (fast.next != null && fast.next.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    ListNode left = head;\n    ListNode right = slow.next;\n    slow.next = null;\n\n    return merge(mergeSort(left), mergeSort(right));\n}\n\n\nmerge K sorted linked list\n考点：递归＋merge\n\n2分的思想，每次递归取一半, 需要logN 次操作，N 为lists size\n\n\n\n\n    /*\n    * Overall T/C: O(nlogk) n is the sum of l1 + l2, k is the size of lists\n    */\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) return null;\n        if (lists.length == 1) return lists[0];\n        if (lists.length == 2) return merge(lists[0], lists[1]);\n        //Arrays.copyOfRange [startIndex, endIndex)\n        return merge(mergeKLists(Arrays.copyOfRange(lists, 0, lists.length / 2)), \n                     mergeKLists(Arrays.copyOfRange(lists, lists.length / 2, lists.length)));\n    }\n\n"},"bs/binary-search.html":{"url":"bs/binary-search.html","title":"Binary Search","keywords":"","body":"Binary Search Related Summary\n常见题型 \n\nBasic Binary Search (递归 vs 非递归)\n利用数组有序的特性实现O(logn)\n\n注意 index bound\n注意 integer overflow\n\n\n\n\npublic boolean binarySearch(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    while (left  target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return false;\n}\n\n\nRotated Sorted Array \n分段有序，分段搜索\n\n注意 是否有duplicates\ncase: [1,1,1,1,1,5] 5 -> [1,1,5,1,1,1] 5, when  nums[left＝0] == nums[mid=3]\nnums[left] 到 nums[right] 全部是 1\n包括target在内可能还有不同的数存在于nums[left] 到 nums[right]\n\n\n要move left pointer one by one to check if there is different number\nThe worst case T/C O(n)\n\n\n\n\n\n\npublic boolean binarySearch(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    while (left \n\nTips: 含有duplicates进行binary search, 要区别对待 相等(==)的case, like case [1,1,1,1,5]\n\nif(nums[left]  nums[mid]){\n...\n} else {\n    left++;\n}\n\n"},"bs/median-of-two-sorted-arrays.html":{"url":"bs/median-of-two-sorted-arrays.html","title":"Median of Two Sorted Arrays","keywords":"","body":"\nThere are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).  \n\n思路：计算有限个数的数据的中位数的方法是：把所有的同类数据按照大小的顺序排列。如果数据的个数是奇数，则中间那个数据就是这群数据的中位数；如果数据的个数是偶数，则中间那2个数据的算术平均值就是这群数据的中位数。\n因此，在计算中位数Median时候，需要根据奇偶分类讨论。\n解决此题的方法可以依照：寻找一个unioned sorted array中的第k大（从1开始数）的数。因而等价于寻找并判断两个sorted array中第k/2（从1开始数）大的数。\n特殊化到求median，那么对于奇数来说，就是求第(m+n)/2+1（从1开始数）大的数。\n而对于偶数来说，就是求第(m+n)/2大（从1开始数）和第(m+n)/2+1大（从1开始数）的数的算术平均值。\n那么如何判断两个有序数组A,B中第k大的数呢？\n我们需要判断A[k/2-1]和B[k/2-1]的大小。\n如果A[k/2-1]==B[k/2-1]，那么这个数就是两个数组中第k大的数。\n如果A[k/2-1]\n如果 A[k/2-1]>B[k/2-1]，就做之前对称的操作就好。\n这样整个问题就迎刃而解了。\n当然，边界条件页不能少，需要判断是否有一个数组长度为0，以及k==1时候的情况。\n因为除法是向下取整，并且页为了方便起见，对每个数组的分半操作采取：\nint partA = Math.min(k/2,m);\nint partB = k - partA; \n为了能保证上面的分半操作正确，需要保证A数组的长度小于B数组的长度。\n同时，在返回结果时候，注意精度问题，返回double型的就好。\npublic solution {\n    public static double findMedianSortedArrays(int A[], int B[]) {\n        int m = A.length;\n        int n = B.length;\n        int total = m+n;\n        if (total%2 != 0)\n            return (double) findKth(A, 0, m-1, B, 0, n-1, total/2+1);\n            //k传得是第k个，index实则k-1\n        else {\n            double x = findKth(A, 0, m-1, B, 0, n-1, total/2);\n            //k传得是第k个，index实则k-1\n            double y = findKth(A, 0, m-1, B, 0, n-1, total/2+1);\n            //k传得是第k个，index实则k-1\n            return (double)(x+y)/2;\n        }\n    }\n\n    public static int findKth(int[] A, int astart, int aend, \n            int[] B, int bstart, int bend, int k) {\n        int m = aend - astart + 1;\n        int n = bend - bstart + 1;\n\n        if(m>n)\n            return findKth(B,bstart,bend,A,astart,aend,k);\n        if(m==0)\n            return B[k-1];\n        if(k==1)\n            return Math.min(A[astart],B[bstart]);\n\n        int partA = Math.min(k/2,m);\n        int partB = k - partA;\n        if(A[astart+partA-1]  B[bstart+partB-1])\n            return findKth(A,astart,aend,B,bstart+partB,bend,k-partB);\n        else\n            return A[astart+partA-1];\n    }\n}\n\n"},"bt/summary.html":{"url":"bt/summary.html","title":"Binary Tree","keywords":"","body":"Binary Tree Related Summary\nTraversal\n\ninorder, preorder, postorder\nmorris O(1)空间\nDFS, BFS\n\n\nBFS 常考\n\nTwo Queue\nOne Queue + One dummyNode\nOne Queue (利用queue.size()移动指针)\ne.g. Binary Tree Level Order Traversal\n\n\n\n\npublic List> bfs (TreeNode root) {\n    List> res = new LinkedList>();\n    if (root == null) {\n        return res;\n    }\n\n    Queue queue = new LinkedList<>();\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        List list = new LinkedList<>();\n        int size = queue.size();//using size as stop condition\n        for (int i = 0; i \n\npreOrder, inOrder, postOrder (O(n) Time, O(n) Space)\n\n考点：DFS vs Iterative\nDFS模版\nIterative利用stack实现\n\n\ne.g. postOrder Iterative\nleft right root -> [all left subtree][all right substree][root];\n利用stack记录左孩子，因为Tree自顶向下的顺序是一定的 root-> left || right, 用stack记录所有left children，root = root.right 如果right为空，pop 栈顶的左孩子。\n利用linkedlist addFirst 逆序插入，从右往左看的话 等价于 root right left 变形preorder，再逆序输出结果。\n\n\n\n\npublic List postOrder (TreeNode root) {\n    List res = new LinkedList<>();\n    Stack stack = new Stack<>();\n    TreeNode node = root;\n    while (node != null) {\n        res.addFirst(node.val);\n        if (node.left != null) {\n            stack.push(node.left);\n        }\n        node = node.right;\n        if (node == null && !leftTree.isEmpty()) {\n            node = stack.pop();\n        }\n    }\n    return res; \n}\n\n\nMorris Traversal\n\nO(1)空间复杂度，即只能使用常数空间；\n二叉树的形状不能被破坏（中间过程允许改变其形状）\n要使用O(1)空间进行遍历，最大的难点在于，遍历到子节点的时候怎样重新返回到父节点（假设节点中没有指向父节点的p指针），由于不能用栈作为辅助空间。为了解决这个问题，Morris方法用到了线索二叉树（threaded binary tree）的概念。在Morris方法中不需要为每个节点额外分配指针指向其前驱（predecessor）和后继节点（successor），只需要利用叶子节点中的左右空指针指向某种顺序遍历下的前驱节点或后继节点就可以了\n\n\n/*\n* 中续遍历\n1. 如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。\n2. 如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。\n   a) 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。\n   b) 如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。\n3. 重复以上1、2直到当前节点为空。\n*/\n\npublic List morris (TreeNode root) {\n    List res = new LinkedList<>();\n    TreeNode curr = root;\n    while (curr != null) {\n        if (curr.left == null) {\n            res.add(curr.val);\n            curr = curr.right;\n        } else {\n            TreeNode prev = curr.left;\n            while (prev.right != null && prev.right != curr) {\n                prev = prev.right;\n            }\n            if (prev.right == null) {//2.a)\n                curr = prev.right;\n            }\n            if (prev.right == curr) {//2.b)\n                prev.right = null;\n                res.add(curr.val);\n                curr = curr.right;\n            }\n        }    \n    }\n}\n\nLowest Common Ancestor\n\nGiven the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.\n\n3种情况\n\nBoth nodes are to the left of the tree.\nBoth nodes are to the right of the tree.\nOne node is on the left while the other is on the right.\nClick here for cases like with providing parent pointer, and Binary Search Tree\n\npublic TreeNode LCA (TreeNode node1, TreeNode node2, TreeNode root) {\n    //find either one or null to stop digging\n    if (root == null || root == node1 || root == node2) {\n        return root;\n    }\n\n    TreeNode left = LCA(node1, node2, root.left);\n    TreeNode right = LCA(node1, node2, root.right);\n\n    //One node is on the left while the other is on the right.\n    if (left != null && right != null) return root;\n    //Both nodes are to the left of the tree\n    if (left != null) return left;\n    //Both nodes are to the right of the tree\n    if (right != null) return right;\n    //Only one node exist\n    return null;\n}\n\n"},"bt/binary-tree-in-order-traversal.html":{"url":"bt/binary-tree-in-order-traversal.html","title":"In Order Traversal","keywords":"","body":"\nGiven a binary tree, return the inorder traversal of its nodes' values.  \n\nDFS  \npublic class Solution {\n    //dfs\n    public List inorderTraversal(TreeNode root) {\n        List result = new ArrayList();\n        dfs(root, result);\n        return result;\n    }\n\n    private void dfs(TreeNode root, List result) {\n        if (root == null) {\n            return;\n        }\n\n        dfs(root.left, result);\n        result.add(root.val);\n        dfs(root.right, result);\n    }\n}\n\n非递归Iterativein order顺序是 left root right如果当前root不为空，压入stack，令其为左孩子，如果其左孩子为空，就pop root，输出root.val, 令其等于有孩子。  \npublic class Solution {\n    //iterative\n    public List inorderTraversal(TreeNode root) {\n        ArrayList result = new ArrayList();\n        if (root == null) {\n            return result;\n        }\n\n        Stack stack = new Stack();\n        while(root != null || !stack.isEmpty()) {\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n            }else {\n                root = stack.pop();\n                result.add(root.val);\n                root = root.right;\n            }\n        }\n\n        return result;\n    }\n}\n\n相似题目：\n\nGiven a binary tree, return the postorder traversal of its nodes' values.  \nGiven a binary tree, return the preorder traversal of its nodes' values.  \n\n"},"bt/lowest-common-ancestor.html":{"url":"bt/lowest-common-ancestor.html","title":"Lowest Common Ancestor","keywords":"","body":"首先判断tree是不是BST,如果为BST，按照BST定义去搜索，如果当前遍历时，root比两个点都大，那么就往根的左边找\n反之向右找，如果node1 Corner case： 如果一个点为令一个点的祖先，那么这个点就是LCA  \npublic TreeNode getLCA(TreeNode root, TreeNode node1, TreeNode node2){\n    if (root == null || node1 == null || node2 == null) {\n        return null;\n    }\n\n    if (root.val  node1.val && root.val > node2.val) {\n        return getLCA(root.left, node1, node2);\n    }\n\n    return root;\n}\n\n如果不是BST，看看提不提供parent指针。Divide & Conquer\npublic TreeNode getLCA(TreeNode root, TreeNode node1, TreeNode node2){\n    if(root == null)\n        return null\n    if(root == node1 || root == node2)\n        return root;\n\n    TreeNode left = getLCA(root.left, node1, node2);\n    TreeNode right = getLCA(root.right, node1, node2);\n\n    if(left != null && right != null) {\n        return root;\n    }\n\n    return left != null ? left : right;\n}\n\n如果有parent指针，分别遍历left right to root 的路径，找到公共点\nprivate ArrayList getPath2Root(TreeNode node) {\n    ArrayList list = new ArrayList();\n    while (node != null) {\n        list.add(node);\n        node = node.parent;\n    }\n    return list;\n}\npublic TreeNode lowestCommonAncestor(TreeNode node1, TreeNode node2) {\n    ArrayList list1 = getPath2Root(node1);\n    ArrayList list2 = getPath2Root(node2);\n\n    int i, j;\n    for (i = list1.size() - 1, j = list2.size() - 1; i >= 0 && j >= 0; i--, j--) {\n        if (list1.get(i) != list2.get(j)) {\n            return list1.get(i).parent;\n        }\n    }\n    return list1.get(i+1);\n}\n\n"},"bt/binary-tree-zigzag-level-order-traversal.html":{"url":"bt/binary-tree-zigzag-level-order-traversal.html","title":"Zigzag LevelOrder Traversal","keywords":"","body":"\nBinary Tree Zigzag Level Order Traversal  \n\nFor example:\nGiven binary tree {3,9,20,#,#,15,7},\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its zigzag level order traversal as:\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n思路：\n这道题实质上还是[Binary Tree Level Order Traversal]的变种，总体思想用DFS去遍历每一层，需要注意的地方就是Zigzag 要求奇数层逆序输出，偶数层正场输出，用LinkedList来存每一层的结果，因为可以从头插入，也可以从未插入，插入复杂度为O(1)。总体复杂度为O(n)，最后在用个ArrayList存每一层的结果就好了。  \nZigzag关键要在这里判断当前层为奇数还是偶数，然后按要求输出\n//reference to current list, directly manipulate\nList collection  = result.get(level);\n//odd reverse output, oven output normally\nif (level % 2 == 0) {\n    collection.add(curr.val);\n}else {\n    collection.add(0, curr.val);\n}\n\n最后AC结果\npublic class Solution {\n    public List> zigzagLevelOrder(TreeNode root) {\n        List> result = new ArrayList>();\n        travel(result, root, 0);\n        return result;\n    }\n\n    private void travel(List> result, TreeNode curr, int level) {\n        if (curr == null) {\n            return;\n        }\n\n        if (result.size()  newLevel = new LinkedList();\n            result.add(newLevel);\n        }\n\n        //reference to current list, directly manipulate\n        List collection  = result.get(level);\n        //odd reverse output, oven output normally\n        if (level % 2 == 0) {\n            collection.add(curr.val);\n        }else {\n            collection.add(0, curr.val);\n        }\n\n        //dfs left and right respectively;\n        travel(result, curr.left, level + 1);\n        travel(result, curr.right, level + 1);\n    }\n}\n\n"},"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html":{"url":"bt/construct-binary-tree-from-inorder-and-postorder-traversal.html","title":"Construct from Inorder and Post order","keywords":"","body":"\nGiven inorder and postorder traversal of a tree, construct the binary tree.  \n\n思路：\n要知道如何构建二叉树，首先我们需要知道二叉树的几种遍历方式，譬如有如下的二叉树：\n        1\n--------|-------\n    2         3\n----|---- ----|----\n4       5 6       7\n前序遍历 1245367中序遍历 4251637后续遍历 4526731  \n可以看到，后续遍历中，root永远都是最后一位，所以先在后续遍历中找到root，然后再找到root在中需遍历中的位置，分成左右两边，left and right, 重复上述过程，通过后续遍历找到根节点，然后在中序遍历数据中根据根节点拆分成两个部分，同时将对应的后序遍历的数据也拆分成两个部分，重复递归，就可以得到整个二叉树了\npublic class Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        if (inorder.length != postorder.length) {\n            return null;\n        }\n        return buildTreeHelper(inorder, 0, inorder.length - 1, \n                               postorder, 0, postorder.length - 1);\n    }\n\n    private TreeNode buildTreeHelper(int[] inorder, int inStart, int inEnd, \n                     int[] postorder, int postStart, int postEnd) {\n        if (inStart > inEnd) {\n            return null;\n        }\n\n        TreeNode root = new TreeNode(postorder[postEnd]);\n        int position = findRoot(inorder, inStart, inEnd, root.val);\n        root.left = buildTreeHelper(inorder, inStart, position - 1, \n                    postorder, postStart, postStart + position - inStart - 1);\n        root.right = buildTreeHelper(inorder, position + 1, inEnd,\n                     postorder, postStart + position - inStart, postEnd - 1);\n\n        return root;\n    }\n\n    private int findRoot(int[] array, int start, int end, int key) {\n        for (int i = start; i \n"},"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html":{"url":"bt/construct-binary-tree-from-inorder-and-preorder-traversal.html","title":"Construct from Inorder and Pre order","keywords":"","body":"\nGiven inorder and postorder traversal of a tree, construct the binary tree.  \n\n思路：这道题和[Construct Binary Tree from Inorder and Postorder Traversal]类似，几乎就是完全一样, 只是把后续遍历换成了前序。所以在前续遍历中，root永远都是第一位，所以先在前续遍历中找到root，然后再找到root在中需遍历中的位置，分成左右两边，left and right, 重复上述过程，通过前续遍历找到根节点，然后在中序遍历数据中根据根节点拆分成两个部分，同时将对应的后序遍历的数据也拆分成两个部分，重复递归，就可以得到整个二叉树了。\npublic class Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        if (preorder.length != inorder.length) {\n            return null;\n        }\n\n        return buildTreeHelper(inorder, 0, inorder.length - 1,\n                               preorder, 0, preorder.length - 1);\n    }\n\n    private TreeNode buildTreeHelper(int[] inorder, int inStart, int inEnd,\n                                     int[] preorder, int preStart, int preEnd) {\n        if (inStart > inEnd) {\n            return null;\n        }               \n\n        TreeNode root = new TreeNode(preorder[preStart]);\n        int position = findRoot(inorder, inStart, inEnd, root.val);\n        root.left = buildTreeHelper(inorder, inStart, position - 1,\n                                    preorder, preStart + 1, preStart + position - inStart);\n        root.right = buildTreeHelper(inorder, position + 1, inEnd,\n                                    preorder, preEnd + position - inEnd + 1, preEnd);\n\n        return root;\n    }\n\n    private int findRoot(int[] array, int start, int end, int key) {\n        for (int i = start; i \n"},"dfs/introduction.html":{"url":"dfs/introduction.html","title":"DFS","keywords":"","body":""},"dfs/permutation-combination.html":{"url":"dfs/permutation-combination.html","title":"Permutation/Combination","keywords":"","body":"Permutation/Combination Related Summary\n常见题型 \n\nPermutation 全排列\n利用DFS 递归的方法去排列所有情况，时间复杂度为n!\n\n模版程序，辅助递归树理解\n注意duplicates\n\n\n\n\n/*\n* No duplicates in input, like [1,2,3,4,5]\n* The Overall T/C O(n!)\n*/\npublic List> permutation (int[] nums) throws Exception {\n    if (nums == null || nums.length == 0) {\n        throw new IllegalArgumentException(\"Invalid Input\");\n    }\n    List> res = new LinkedList>();\n    List temp = new List<>();\n    helper(res, temp, nums);\n    return res;\n}\n\nprivate void helper (List> res, List temp, int[] nums) {\n    if (temp.size() == nums.length){\n        res.add(new LinkedList(temp));\n        return;\n    }\n\n    for (int i = 0; i \n\n若有duplicates, 需要辅助数组判断每一个integer的可用性\n- **boolean[] visited**\n- **if ( visited[i] )**\n- **if ( i >0 && nums[i] == nums[i - 1] && visited[i - 1] )**\n\nprivate void helper (List> res, List temp, int[] nums, boolean[] visited) {\n    if (temp.size() == nums.length){\n        res.add(new LinkedList(temp));\n        return;\n    }\n\n    for (int i = 0; i  0 && nums[i] == nums[i - 1] && visited[i - 1])) {\n            continue;\n        }\n        visited[i] = true;\n        temp.add(nums[i]);\n        helper(res, temp, nums);\n        temp.remove(temp.size() - 1);\n        visited[i] = false;\n    }\n}\n\n-Combination 组合问题\n\n利用DFS 递归的方法去排列所有情况，时间复杂度为n!\n-  **模版程序，辅助递归树理解**\n-  **注意duplicates**\n\n/*\n* No duplicates in input, like [1,2,3,4,5]\n*/\nprivate void combination (List> res, List temp, int[] nums, int index) {\n    res.add(new LinkedList<>(temp));\n\n    for (int i = index; i > res, List temp, int[] nums, int index) {\n    res.add(new LinkedList<>(temp));\n\n    for (int i = index; i  0 && i != index && nums[i] == nums[i - 1]) {\n            continue;\n        }\n        temp.add(nums[i]);\n        combination(res, temp, nums, index + 1);\n        temp.remove(temp.size() - 1);\n    }\n}\n\n"},"dfs/combination-sum.html":{"url":"dfs/combination-sum.html","title":"Combination Sum","keywords":"","body":"\nCombination SumGiven a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T. The same repeated number may be chosen from C unlimited number of times.\n\nNote:  \n\nAll numbers (including target) will be positive integers.  \nElements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).  \nThe solution set must not contain duplicate combinations.\n\nFor example, given candidate set 2,3,6,7 and target 7, \nA solution set is: \n[7] \n[2, 2, 3]\n思路：此题套用排列组合模版，是用DFS找解决方案问题，值得注意这道题： The same repeated number may be chosen from C unlimited number of times. 所以，每次跳进递归不用都往后挪一个，还可以利用当前的元素尝试。\n同时，这道题还要判断重复解。两个方法解决\n 1. if(i>0 && candidates[i] == candidates[i-1])//deal with dupicate\n        continue; \n\n 2. if(!result.contains(item)) \n        result.add(new ArrayList(item));\n\n完整代码如下  \npublic class Solution {\n    public List> combinationSum(int[] candidates, int target) {\n        List> result = new ArrayList>();\n        List item = new ArrayList();\n        if (candidates == null || candidates.length == 0) {\n            return result;\n        }\n\n        Arrays.sort(candidates);\n        helper(result, item, candidates, target, 0);\n        return result;\n    }\n\n    private void helper(List> result, List item, \n                        int[] candidates, int target, int start) {\n        if (target (item));\n            return;\n        }\n\n        for (int i = start; i  0 && candidates[i] == candidates[i-1]) {//deal with dupicate\n                continue;\n            }\n            item.add(candidates[i]);\n            int newTarget = target - candidates[i];\n            helper(result, item, candidates, newTarget, i);\n            item.remove(item.size() - 1);\n        }\n    }\n}\n\n此题还有的follow up版Combination Sum II要求，组合中每个元素只能用一次，就排除了之前每个元素可以无限次使用的情况。就可以参照全排列的模版。用一个visited[]去标记元素是否被使用过。\n完整代码如下\npublic class Solution {\n    public List> combinationSum2(int[] candidates, int target) {\n        List> result = new ArrayList>();\n        List item = new ArrayList();\n        if (candidates == null || candidates.length == 0) {\n            return result;\n        }\n\n        boolean visited[] = new boolean[candidates.length];\n        Arrays.fill(visited, false);\n        Arrays.sort(candidates);\n        helper(result, item, candidates, target, 0, visited);\n        return result;\n    }\n\n    private void helper(List> result, List item, \n                        int[] candidates, int target, int start, boolean[] visited) {\n        if (target (item));\n            return;\n        }\n\n        for (int i = start; i  0 && candidates[i] == candidates[i - 1] && visited[i - 1] == false) {\n                continue;\n            }\n\n            visited[i] = true;\n            item.add(candidates[i]);\n            int newTarget = target - candidates[i];\n            helper(result, item, candidates, newTarget, i + 1, visited);\n            visited[i] = false;\n            item.remove(item.size() - 1);\n        }\n    }\n}\n\n"},"dfs/generate-parenthese.html":{"url":"dfs/generate-parenthese.html","title":"Generate Parenthese","keywords":"","body":"\n Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.For example,   Given n = 3, a solution set is: \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\" 原题链接  \n\n思路：一看到all combination 就要想到排列组合，想到DFS，先想想能不能利用排列组合的模版。其实这道题不用排列组合那个复杂，只需要利用递归模拟一下过程就可以，要点是左括号数目必须大于等于又括号的数目，因为类似“)(” 这种解是不合法的\npublic ArrayList generateParenthesis(int n) {\n    ArrayList result = new ArrayList();\n    String item = new String();\n    if (n  result, String item, int left, int right){\n    /*Check if left */\n    if (left > right) {\n        return;\n    }\n\n    if (left == 0 && right == 0) {\n        result.add(new String(item));\n        return;\n    }\n\n    if (left > 0) {\n        dfs(result,item + '(', left - 1,right);\n    }\n    if (right > 0) {\n        dfs(result, item + ')',left, right - 1);\n    }\n}\n\n"},"dfs/n-queens.html":{"url":"dfs/n-queens.html","title":"N-Queens","keywords":"","body":"\nN-QueensGiven an integer n, return all distinct solutions to the n-queens puzzle.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.\n\nFor example,\nThere exist two distinct solutions to the 4-queens puzzle:\n\n[\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n思路：把棋盘存储为一个N维数组a[N][N]，数组中第i个元素的值a[i]代表第i行的皇后位置，这样便可以把问题的空间规模压缩为一维O(N)，在判断是否冲突时也很简单，首先每行只有一个皇后，且在数组中只占据一个元素的位置，行冲突就不存在了，其次是列冲突，判断一下是否有a[i]与当前要放置皇后的列j相等即可。至于斜线冲突，通过观察可以发现所有在斜线上冲突的皇后的位置都有规律即它们所在的行列互减的绝对值相等，即| row – i | = | col – a[i] |.这样某个位置是否可以放置皇后的问题已经解决。然后运用递归的思想去寻找n个皇后的解，伪代码思想如下：\npublic void queen(int row) {\n    if (n == row) {    //如果已经找到结果，则打印结果\n        print_result();\n    }else {\n        for (col = 0 to N) { //试探第row行每一个列\n            if (can_place(row, col) { \n                place(row, col);   //放置皇后\n                queen(row + 1);  //继续探测下一行\n            }\n        }\n    }\n}\n完整代码如下\npublic class Solution {\n    public List solveNQueens(int n) {\n        ArrayList result = new ArrayList(); \n        if (n  result)  {\n        if (row == n) {\n            String[] unit = new String[n];\n            for (int i = 0; i  (row,column)\n                if (isValid(row, columnIndex)) {\n                    dfs(n, row + 1, columnIndex, result);\n                }\n            }\n        }\n    }\n\n    public boolean isValid(int row, int[] columnIndex) {\n        for (int i = 0; i \n相似题目N-Queens II 解法完全一样，只需要返回result.size()就好了\n"},"dfs/sudoku-solver.html":{"url":"dfs/sudoku-solver.html","title":"Sudoku Solver","keywords":"","body":"\nSudoku SolverWrite a program to solve a Sudoku puzzle by filling the empty cells.Empty cells are indicated by the character '.'.you may assume that there will be only one unique solution.\n\n思路：首先此类问题是经典NP问题，时间复杂度上就不要纠结了。肯定是指数次。主题思想和N－Queens类似，就是一个一个试，行就填，不行就该回'.'空，回溯之～首先，分割子问题，要判断每个数是不是valid sudoku，可以用Valid Sudoku模版作为子函数。然后逐行，逐列的去试。\n完整代码如下\npublic class Solution {\n    public void solveSudoku(char[][] board) {\n        if (board == null || board.length == 0 || board[0].length == 0) {\n            return;\n        }\n        helper(board, 0 ,0);\n    }\n\n    private boolean helper(char[][] board, int row, int col) {\n        if (col == 9) {\n            //if current rows are fully filled, go to fill next row\n            return helper(board, row + 1, 0);\n        }\n        if (row == 9) {\n            //if all rows filled, the solution is valid,return true\n            return true;\n        }\n\n        if (board[row][col] == '.') { //current cell is empty '.'\n            //try '1' ~ '9' one by one\n            for (char num = '1'; num \n"},"dfs/word-break-ii.html":{"url":"dfs/word-break-ii.html","title":"Word Break II","keywords":"","body":"\nGiven a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.Return all such possible sentences.For example, givens = \"catsanddog\",dict = [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"].A solution is [\"cats and dog\", \"cat sand dog\"]原题链接  \n\n解法1参照Code Ganker比较好理解\n这道题是[Word Break]的求所有结的版本，[Word Break]只需要判断是存不存在就可以了，这道题还要求出所有合法的string， 一想到求所有，立马联想到DFS，排列组合啊的递归模版。这道题，首先可以用[Word Break]的结果跑一遍，如果字符串在dict中，在进行DFS暴力求解，一定程度上可以优化速度, 而且防止变态超长string 无限dfs栈溢出 \n或超时的情况。目前此解法超时，leetcode不知道加了什么鬼test case\npublic class Solution {\n    /*[word break template]*/\n    public boolean wordBreakCheck(String s, Set dict) {\n        if (s == null || s.length() == 0) {\n            return false;\n        }\n\n        boolean[] result = new boolean[s.length() + 1];//why + 1?\n        Arrays.fill(result, false);\n        result[0] = true;\n        for (int i = 0; i  wordBreak(String s, Set dict) {\n        List result = new ArrayList();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        //First Check if s in the dict\n        //if not don't bother to dfs\n        if (workBreakCheck(s, dict)) {\n            helper(s, dict, 0, \"\", result);\n        }\n        return result;\n    }\n\n    /* DFS Body seems like N Queen*/\n    private void helper(String s, Set dict, int start, String item, \n        ArrayList result) {\n        if (start == s.length()) {\n            result.add(item);\n            return;\n        }\n\n        StringBuilder str = new StringBuilder();\n        for (int i = start; i  0) {\n                    newItem = item + \" \" + str.toString();\n                }else {\n                    newItem = str.toString();\n                }\n                helper(s, dict, i + 1, newItem, result);\n            }\n        }\n    }\n    /* end DFS Body seems like N Queen*/\n}\n\n解法2:参照九章 高大上AC版本\npublic class Solution {\n    public ArrayList wordBreak(String s, Set dict) {\n        // Note: The Solution object is instantiated only once \n        // and is reused by each test case.\n        Map> map = new HashMap>();\n        return wordBreakHelper(s,dict,map);\n    }\n\n    public ArrayList wordBreakHelper(String s, Set dict, \n        Map> memo){\n        if(memo.containsKey(s)) return memo.get(s);\n        ArrayList result = new ArrayList();\n        int n = s.length();\n        if(n  tmp = wordBreakHelper(prefix, dict, memo);\n                    for(String item:tmp){\n                        item = subfix + \" \" + item;\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        memo.put(s, result);\n        return result;\n    }\n}\n\n"},"dfs/word-search.html":{"url":"dfs/word-search.html","title":"Word Search","keywords":"","body":"\nGiven a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.原题链接 \n\nFor example,\nGiven board =\n\n[\n  [\"ABCE\"],\n  [\"SFCS\"],\n  [\"ADEE\"]\n]\nword = \"ABCCED\", -> returns true,\nword = \"SEE\", -> returns true,\nword = \"ABCB\", -> returns false.\n思路：这道题分析看，就是一个词，在一行出现也是true，一列出现也是true，一行往下拐弯也是true，一行往上拐弯也是true，一列往左拐弯也是true，一列往右拐弯也是true。所以是要考虑到所有可能性，基本思路是使用DFS来对一个起点字母上下左右搜索，看是不是含有给定的Word。还要维护一个visited数组，表示从当前这个元素是否已经被访问过了，过了这一轮visited要回false，因为对于下一个元素，当前这个元素也应该是可以被访问的\npublic class Solution {\n    public boolean exist(char[][] board, String word) {\n        if (board == null || board.length == 0 || board[0].length == 0) {\n            return false;\n        }\n        if (word.length() == 0) {\n            return true;\n        }\n        boolean[][] visited = new boolean[board.length][board[0].length];\n        for (int i = 0; i = board.length || j = board[0].length ) {\n            return false;\n        }\n        if (board[i][j] != word.charAt(start)){\n            return false;\n        }\n        if (visited[i][j]) {\n            return false;\n        }\n\n        visited[i][j] = true;\n        boolean result = dfs(board, i - 1, j, word, start + 1, visited) || \n                         dfs(board, i + 1, j, word, start + 1, visited) ||\n                         dfs(board, i, j - 1, word, start + 1, visited) ||\n                         dfs(board, i, j + 1, word, start + 1, visited);\n        visited[i][j] = false;\n        return result;\n    }\n}\n\n"},"bfs/anagrams.html":{"url":"bfs/anagrams.html","title":"Anagrams","keywords":"","body":"\nGiven an array of strings, return all groups of strings that are anagrams  \n\n思路：Anagrams就是两个单词所包含的字符和数量都是一样的，只是顺序不同。比如[\"tea\",\"ate\",\"aet\"], 由于anagrams字符串的所有字符都是一样的，如果可以对每个字符排序，则结果一样，就可以当作key用hashmap去存，然后value就是不同的字符串没排序前的形态。最后遍历一下hashmap，value > 1 就说明有anagram，返回所有的结果。还有一个关键点是如何去遍历hashmap，重写一下iterator就好了\n复杂度分析：对每个长度为k的字符串排序，时间复杂度为(O(klogk)),n个字符就是(O(nklogk)),n为数组大小，空间复杂度为O(nk)就是hashmap的大小。\npublic ArrayList anagrams(String[] strs) {\n    ArrayList result = new ArrayList();\n    if(strs == null || strs.length ==0) {\n        return result;\n    }\n\n    // process the data\n    HashMap> map = new HashMap>();\n    for (int i = 0; i  temp = new ArrayList();\n            temp.add(strs[i]);\n            map.put(strKey, temp);\n        }else { // if contains such key, add as a new item in value list\n            ArrayList temp = map.get(strKey);\n            temp.add(strs[i]);\n            map.put(strKey,temp);\n        }\n    }\n\n    // traversal hashmap re-write the iterator\n    Iterator iter = map.values().iterator();\n    while(iter.hasNext()) {\n        ArrayList item = (ArrayList)iter.next();\n        if (item.size() > 1) {\n            result.addAll(item);\n        }\n    }\n\n    return result;\n}\n\n"},"bfs/word-ladder.html":{"url":"bfs/word-ladder.html","title":"Word Ladder","keywords":"","body":"\nWord Ladder\n\nGiven:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nAs one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n典型的BFS题，这道题只用求距离，所以不用建图，BFS的时候，update dict就好了。如果要指定 点 到 点的 所有路径，那就是典型的先从终点到起点 BFS 建立无向有权图，然后从起点DFS到终点的所有路径即可。\npublic int ladderLength(String beginWord, String endWord, Set dict) {\n    Queue q = new LinkedList<>();\n    q.offer(beginWord);\n    dict.remove(beginWord);\n    int distance = 1;\n    while (!q.isEmpty()) {\n        int size = q.size();\n        for (int i = 0; i \n通常做法可以预处理dict，build a graph, 然后可以套用图的BFS去找距离。\nprivate Map> buildGraph (Set dict) {\n    Map> map = new HashMap<>();\n    for (String str : dict) {\n        Set neighbors = new HashSet<>();\n        for (int i = 0; i \n"},"dp/introduction.html":{"url":"dp/introduction.html","title":"Dynamic Programming","keywords":"","body":"Dynamic Programming Introduction\n\n定义: 利用小问题来解决大问题，记忆化搜索  \n[1]与Divide & Conquer区别：\n    DP的子问题可以有交集，分治的子问题完全独立\n    与递归的区别\n\n    动归                    分治  \n    node                   node\n    /   \\                  /   \\\n node   node             node  node\n /   \\   /  \\           /  \\    /  \\\nnode  node  node    node node node node\n\n[2] 与DFS的区别：\n    DFS是一种实现方法approach\n    DP是一种解题思想\n    DP可以用DFS来实现也可以用loop来实现\n\nDP 实质上时搜索加上记忆化的功能, 因为每个(x,y)只计算一次，所以总的时间复杂度为O(n^2)\n\n大状态\n起点 -> 终点\n\n\n小状态\n(x, y)  -> (x + 1, y + 1) \n\n\n大状态依赖小状态的计算结果\n\n实现方式有两种：DFS vs Loop\n\nLoop: f(x, y)从哪个点来？ f(x - 1, y) || f(x, y - 1)\nDFS: f(x, y)到哪个点去？f(x + 1, y + 1)\n\n实现方式有两种：DFS vs Loop 既 两种状态转移思想\n\nLoop: f(x, y)从哪个点来？ f(x - 1, y) || f(x, y - 1)\nDFS: f(x, y)到哪个点去？f(x + 1, y + 1)\n\nDP 的四点要素\n\nState: (x, y) 状态代表什么？需要灵感\nFunction: f(x, y)的状态转移方程\nInitialization: 初始值 (a.k.a 起点)\nAnswer: 结果 (a.k.a 重点)\n\n什么问题要用DP解决？\n\nWhen you see string problem that is about subsequence or matching, DP should come to your mind naturally!\n[1] Find Max/Min 找最大值/最小值\n[2] Decide if there is a way ? Yes/No 是否存在一种可能\n[3] Count all possible ways 求方案总数\n[4] 待解 数组/字符串/Matrix 不能sort/swap\n\n什么问题不能用DP解决？\n\n[1] 找出所有方案 All Solution 一定是DFS，一定不是DP\n[2] 如果 待解 数组 交换Swap两个数对结果没影响，一定不是DP\ne.g. [100, 3, 1, 2, 7] longest consecutive subset?\nanswer: [1, 2, 3] 如果交换［3， 2］对结果无影响\n\n\n[3] Matrix DP只能向左向下走, 若上下左右都可以行 一定不是DP\n因为DP利用重复计算的结果，[2][3]会造成闭合回路(a.k.a 环)\n\n"},"dp/summary.html":{"url":"dp/summary.html","title":"Introduction","keywords":"","body":"Dynamic Programming 常见类型\n面试常考DP类型\n\nMatrix DP 10%\nSequence 40%\nTwo Sequence 40%\nBackpack 10%  \n\n\nMatrix DP (2维DP)\n\nState: f(x, y) 从起点如何走来的(0,  0) -> (x, y)\nFunction:  研究最后一步怎么来的\nInit：起点(0,0) \nAnswer 终点 or 指定点\n时间复杂度：O(n^2)\n空间复杂度：O(n^2) 可以优化到O(n)\n\n\n    public int uniquePaths(int m, int n) {\n        int[][] grid = new int[m][n];\n        for (int i = 0; i \n\nSequence DP (1维DP)\n\nState: f(i) 表示前i个位置的字符\nFunction:  f(i) = f(j) j 是i前一个字符\nInit：起点(0)\nAnswer 终点 or 指定点(n)\n时间复杂度：O(n)\n空间复杂度：O(n)\n\n\n    public int climbStairs(int n) {\n        if (n \n\nTwo Sequence DP (2维DP)\n\nState: f(i, j) 表示sequence 1的前i个字符 配上sequence 2 的前j个字符\nFunction:  研究s1[i]和s2[j]的关系\nInit：f(i,0) 和 f (0, j) \nAnswer f(s1.length(), s2.length())\n时间复杂度：O(nm) n is length of s1, m is length of s2\n空间复杂度：O(nm) \n\n\n    public int minDistance(String s1, String s2) {\n        int[][] res = new int[s1.length() + 1][s2.length() + 1];//1 based index\n        for (int i = 0; i \n\nBackpack (背包问题)\n\nState: f[i][S] 表示前i个数，取出一些物品能否组成体积和为S的背包\nFunction:  f[i][S] = f[i - 1] [S - num[i]] || f[i - 1][S]\nf[i−1][S−num[i]]: 放入第i个物品，前 i−1 个物品能否取出一些体积和为 S−num[i] 的背包。\nf[i−1][S]: 不放入第i个物品，前 i−1 个物品能否取出一些组成体积和为S的背包。\n\n\nInit: f[1⋯n][0]=true; f[0][1⋯m]=false. 前1~n个物品组成体积和为0的背包始终为真，其他情况为假。\nAnswer 寻找使 f[n][S] 值为true的最大S (1≤S≤m)\n时间复杂度：O(n)\n空间复杂度：O(n)\n\n\nGiven n items with size Ai, an integer m denotes the size of a backpack. How full you can fill this backpack?\n If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select [2, 3, 5], so that the max size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack.\npublic int backpack (int[] nums, int target) {\n    boolean[][] record = new boolean[nums.length + 1][target + 1];\n    record[0][0] = true;\n    for (int i = 1; i = 0; sum--) {\n        if (record[nums.length][sum]) {\n            return sum;\n        }\n    }\n    return 0;\n}\n\n"},"dp/LIS-LCS.html":{"url":"dp/LIS-LCS.html","title":"LIS/LCS","keywords":"","body":"\nLongest Increasing Sequence 典型一维DP    \n\n\nState: f[i]表示前i个元素最长的递增子序列是多少  \nFunction: f[i] = Math.max(f[0 .. j .. i - 1]) + 1 //if num[i] > num[j];  \nInitialization: f[0] = 1;  \nAnswer: f[n]  \n\npublic static int lis(int[] num) {\n    if (num == null || num.length == 0) {\n        return 0;\n    }\n\n    int[] dp = new int[num.length];\n    dp[0] = 1;\n    for(int i = 1; i  dp[i]) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n    return dp[num.length - 1];\n}\n//print the longest increasing sequence\npublic static int[] getLIS(int[] x) {\n    int n = x.length;\n    int[] len = new int[n];\n    Arrays.fill(len, 1);\n    int[] pred = new int[n];\n    Arrays.fill(pred, -1);\n    for (int i = 1; i \n\nLongest Common Sequence  典型二维DP    \n\n- State: f[i][j]表示前s1前i个元素和s2前几个元素最长的公共序列是多少  \n- Function: f[i][j] = f[i - 1][j - 1] + 1 //if s1[i] == s[j];  \n                    = Math.max(f[i - 1][j], f[i][j - 1])  \n- Initialization: f[0][j] = 0 f[i][0] = 0  \n- Answer: f[m][n]\npublic class Solution {\n    //测试用例\n    public static void main(String[] args) {\n        int[] x = {1, 5, 4, 2, 3, 7, 6, 0};\n        int[] y = {2, 7, 1, 3, 5, 4, 6, 0};\n        String s1 = \"15423760\";\n        String s2 = \"27135460\";\n        System.out.println(lcs(s1, s2));\n        System.out.println(Arrays.toString(getLCS(x,y)));\n    }\n\n    //Longest Common Sequence\n    public static int lcs(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        //s2 is empty\n        for (int i = 0; i = 0 && j >= 0; ) {\n          if (x[i] == y[j]) {\n            res[--cnt] = x[i];\n            --i;\n            --j;\n          } else if (lcs[i + 1][j] > lcs[i][j + 1]) {\n            --j;\n          } else {\n            --i;\n          }\n        }\n        return res;\n      }\n}\n\n"},"dp/decode-ways.html":{"url":"dp/decode-ways.html","title":"Decode Ways","keywords":"","body":"A message containing letters from A-Z is being encoded to numbers using the following mapping:\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\nGiven an encoded message containing digits, determine the total number of ways to decode it.\nFor example,\nGiven encoded message \"12\", it could be decoded as \"AB\" (1 2) or \"L\" (12).\nThe number of ways decoding \"12\" is 2.\n思路：Why DP? 因为要求total ways 方案数目是要想到用DP  状态转移方程详细解析\nState: dp[i]表示前i个字符一共有多少个方案  \nFunction: dp[i] = dp[i - 1] \n                = dp[i - 1] + dp[i - 2]  \nInitialization: dp[0] = 1;  \n                dp[1] = 1;//当s.charAt(0) != '0'的时候；  \nanswer: dp[s.length()]\nTips: 注意s以0为base，dp以1位base\npublic class Solution {\n    public int numDecodings(String s) { \n        if(s == null || s.length() == 0 || s.equals(\"0\")) {\n            return 0;\n        } \n\n        int[] dp = new int[s.length() + 1];\n        dp[0] = 1;\n        dp[1] = s.charAt(0) != '0' ? 1 : 0;\n\n        for (int i = 2; i = 1 && code \n"},"dp/word-break.html":{"url":"dp/word-break.html","title":"Word Break","keywords":"","body":"\n Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words For example, given s = \"leetcode\", dict = [\"leet\", \"code\"]. Return true because \"leetcode\" can be segmented as \"leet code\". 原题链接  \n\n思路：这道题仍然是动态规划的题目，我们总结一下动态规划题目的基本思路。首先我们要决定要存储什么历史信息以及用什么数据结构来存储信息。然后是最重要的递推式，就是如从存储的历史信息中得到当前步的结果。最后我们需要考虑的就是起始条件的值。\n接下来我们套用上面的思路来解这道题。首先我们要存储的历史信息res[i]是表示到字符串s的第i个元素为止能不能用字典中的词来表示，我们需要一个长度为n的布尔数组来存储信息。然后假设我们现在拥有res[0,...,i-1]的结果，我们来获得res[i]的表达式。思路是对于每个以i为结尾的子串，看看他是不是在字典里面以及他之前的元素对应的res[j]是不是true，如果都成立，那么res[i]为true\n假设总共有n个字符串，并且字典是用HashSet来维护，那么总共需要n次迭代，每次迭代需要一个取子串的O(i)操作，然后检测i个子串，而检测是constant操作。所以总的时间复杂度是O(n^2)（i的累加仍然是n^2量级），而空间复杂度则是字符串的数量，即O(n)。代码如下：\npublic class Solution {\n    public boolean wordBreak(String s, Set dict) {\n        if (s == null || s.length() == 0) {\n            return false;\n        }\n\n        boolean[] result = new boolean[s.length() + 1];\n        Arrays.fill(result, false);\n        result[0] = true;\n        for (int i = 0; i \n"},"dp/distinct-subsequences.html":{"url":"dp/distinct-subsequences.html","title":"Distinct Subsequences","keywords":"","body":"\nGiven a string S and a string T, count the number of distinct subsequences of T in S. A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).Here is an example:S = \"rabbbit\", T = \"rabbit\"Return 3.原题链接  \n“When you see string problem that is about subsequence or matching, dynamic programming method should come to your mind naturally. ”\n\n思路：可以先尝试做一个二维的表int[][] dp，用来记录匹配子序列的个数（以S =\"rabbbit\",T = \"rabbit\"为例）：\n    r a b b b i t\n  1 1 1 1 1 1 1 1\nr 0 1 1 1 1 1 1 1\na 0 0 1 1 1 1 1 1\nb 0 0 0 1 2 3 3 3\nb 0 0 0 0 1 3 3 3\ni 0 0 0 0 0 0 3 3\nt 0 0 0 0 0 0 0 3\n从这个表可以看出，无论T的字符与S的字符是否匹配，dp[i][j] = dp[i][j - 1].就是说，假设S已经匹配了j - 1个字符，得到匹配个数为dp[i][j - 1].现在无论S[j]是不是和T[i]匹配，匹配的个数至少是dp[i][j - 1]。除此之外，当S[j]和T[i]相等时，我们可以让S[j]和T[i]匹配，然后让S[j - 1]和T[i - 1]去匹配。所以递推关系为：  \ndp[0][0] = 1; // T和S都是空串.  \ndp[0][1 ... S.length() - 1] = 1; // T是空串，S只有一种子序列匹配。  \ndp[1 ... T.length() - 1][0] = 0; // S是空串，T不是空串，S没有子序列匹配。  \ndp[i][j] = dp[i][j - 1] + (T[i - 1] == S[j - 1] ? dp[i - 1][j - 1] : 0) \n(1 当i=2，j=1时，S 为 ra，T为r，T肯定是S的子串；这时i=2，j=2时，S为ra，T为rs，T现在不是S的子串，当之前一次是子串所以现在计数为1.  \n同时，如果字符串S[i-1]和T[j-1]（dp是从1开始计数，字符串是从0开始计数）匹配的话，dp[i][j]还要加上dp[i-1][j-1]例如对于例子： S = \"rabbbit\", T = \"rabbit\"  \n当i=2，j=1时，S 为 ra，T为r，T肯定是S的子串；当i=2，j=2时，S仍为ra，T为ra，这时T也是S的子串，所以子串数在dp[2][1]基础上加dp[1][1]。\npublic class Solution {\n    public int numDistinct(String S, String T) {\n        int dp[][] = new int[T.length() + 1][S.length() + 1];\n        dp[0][0] = 1;\n\n        //T is empty, so T is subsequence of any string\n        for(int i = 1; i \n"},"dp/interleaving-string.html":{"url":"dp/interleaving-string.html","title":"Interleaving String","keywords":"","body":"\nGiven s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2. \n\nFor example,\nGiven:\ns1 = \"aabcc\",\ns2 = \"dbbca\",\n\nWhen s3 = \"aadbbcbcac\", return true.\nWhen s3 = \"aadbbbaccc\", return false.\n\n“When you see string problem that is about subsequence or matching, dynamic programming method should come to your mind naturally. ”\n\n思路：讲解来自, 还有DFS版  \n    s1 = \"aabcc\"\n    s2 = \"dbbca\"\n    s3 = \"aadbbcbcac\"\n\n        d b b c a \n      1 0 0 0 0 0 \n    a 1 x x x x x  \n    a 1 x x x x x  \n    b 0 x x x x x  \n    c 0 x x x x x  \n    c 0 x x x x x\ndp[i][j]表示s1取前i位，s2取前j位，是否能组成s3的前i+j位\n举个列子，注意左上角那一对箭头指向的格子dp[1][1], 表示s1取第1位a, s2取第1位d，是否能组成s3的前两位aa\n从dp[0][1] 往下的箭头表示，s1目前取了0位，s2目前取了1位，我们添加s1的第1位，看看它是不是等于s3的第2位，( i + j 位）\n从dp[1][0] 往右的箭头表示，s1目前取了1位，s2目前取了0位，我们添加s2的第1位，看看它是不是等于s3的第2位，( i + j 位)\n那什么时候取True，什么时候取False呢？\nFalse很直观，如果不等就是False了嘛。\n那True呢？首先第一个条件，新添加的字符，要等于s3里面对应的位( i + j 位)，第二个条件，之前那个格子也要等于True\n举个简单的例子s1 = ab, s2 = c, s3 = bbc ，假设s1已经取了2位，c还没取，此时是False（ab!=bb），我们取s2的新的一位c，即便和s3中的c相等，但是之前是False，所以这一位也是False\n同理，如果s1 = ab, s2 = c, s3=abc ，同样的假设，s1取了2位，c还没取，此时是True（ab==ab），我们取s2的新的一位c,和s3中的c相等，且之前这一位就是True，此时我们可以放心置True （abc==abc）\n还有一点需要注意的是，String 的index是0 base的, 我们以dp[m+1][n+1] 正序遍历字符创造的矩阵是1 base的\npublic class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if (s1 == null || s2 == null || s3 == null) {\n            return false;\n        }\n        if (s1.length() + s2.length() != s3.length()) {\n            return false;\n        }\n\n        boolean[][] dp = new boolean[s1.length() + 1][s2.length() + 1];\n        dp[0][0] = true;\n\n        //check if s3 consist from s2 \n        for (int i = 1; i \n"},"dp/jump-game.html":{"url":"dp/jump-game.html","title":"Jump Game","keywords":"","body":"\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nFor example:\nGiven array A = [2,3,1,1,4]\nThe minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n\n思路：Jump Game I & II 一个是求能否走到，一个求走到的最小值。都符合动归的使用条件。但是DP在这道题的效率不高，worse case 要O(n^2)，大数据超时。先讲解动归训练思维。贪心解法O(n)\nState: dp[i] 表示前i个位置需要的最小步数\nFunction: dp[i] = Math.min(dp[0..i-1] + 1) when A[0..i-1] + [0..i-1] >= i\n起点：A[0]\n结果：dp[A.length - 1];\nDP解法，过不了leetcode新增大数据\npublic class Solution {\n    public int jump(int[] A) {\n        if (A == null || A.length == 0) {\n            return 0;\n        }\n\n        int[] dp = new int[A.length];\n        dp[0] = 0;//第一个算数不需要跳\n        for(int i = 1; i = i) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n\n        return dp[A.length - 1];\n    }\n}\n\n贪心解法O(n)思路：维护一个最大可达范围edge，如果在当前index i 在edge范围内，则不需要跳，如果当前index超出最大可达范围edge，则step++， 并且更新edge 为当前可达范围current Range，并且维护实时更新一个当前可达范围current Range ＝ Math.max(currRange, i + A[i]);  \nAC代码  \npublic class Solution {\n    public int jump(int[] A) {\n        if (A == null || A.length == 0) {\n            return 0;\n        }\n\n        int edge = 0;\n        int step = 0;\n        int currRange = 0;\n\n        for (int i = 0; i  edge) {\n                edge = currRange;\n                step++;\n            }\n            currRange = Math.max(currRange, i + A[i]);\n        }\n        return step;\n    }\n}\n\n附Jump Game I 的两种解法。分析思路同上\n//Greedy AC Solution\npublic class Solution {\n    public boolean canJump(int[] A) {\n        if (A == null || A.length == 0) {\n            return false;\n        }\n        if (A.length == 1) {\n            return true;\n        }\n\n        int max = A[0];\n        for (int i = 0; i = i) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n\n        return dp[A.length - 1];\n    }\n}\n\n"},"dp/maximum-subarray.html":{"url":"dp/maximum-subarray.html","title":"Maximum Subarray","keywords":"","body":"\nFind the contiguous subarray within an array (containing at least one number) which has the largest sum.\n\nFor example, given the array [−2,1,−3,4,−1,2,1,−5,4],\nthe contiguous subarray [4,−1,2,1] has the largest sum = 6.\n思路：why DP？ 因为要求极值一维数组，当然是一维DP， \nState: dp[i] 表示前i个元素的和\nFunction: dp[i] = Math.max(dp[i - 1] + A[i], A[i]); 用当前数和之前的和比大小，取较大的，然后维护一个max，\nalways compare with current dp[i], always keep the largest;\n初始化： 起点为A[0]\nanswer：途中max值\npublic class Solution {\n    public int maxSubArray(int[] A) {\n        if (A == null || A.length == 0) {\n            return 0;\n        }\n\n        int[] dp = new int[A.length];\n        dp[0] = A[0];//initialize the dp\n        int max = A[0];\n        for (int i = 1; i \n"},"dp/min-path-sum.html":{"url":"dp/min-path-sum.html","title":"Min Path Sum","keywords":"","body":"\nGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path\n\n思路：why DP？ 因为要求极值m*n 举证，当然是matrix DP， \nState: dp[i][j] 表示起点[0,0]到[i,j]位置上的和。\nFunction: dp[i] = Math.min(dp[i - 1][j], dp[i][j - 1]) + a[i][j]; \n上一步可能来自于上面，或者左边，比较这两个数的大小，取较小的，然后加上当前的值。\n初始化： 起点为[0，0]，矩阵DP Awalys输出实话 [0][0... n] 和[0..n][0] 因为要 i-1 和 j－1\nanswer：[x,y]右下角终点。\npublic class Solution {\n    public int minPathSum(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return 0;\n        }\n\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][] sum = new int[m][n];\n\n        //initialization [0,0] [0, 0..n] [0..n, 0]\n        sum[0][0] = grid[0][0];\n        for (int i = 1; i \n"},"dp/palindrome-partition-ii.html":{"url":"dp/palindrome-partition-ii.html","title":"Palindrome Partition II","keywords":"","body":"\nGiven a string s, partition s such that every substring of the partition is a palindrome.Return the minimum cuts needed for a palindrome partitioning of s.For example, given s = \"aab\",Return 1 since the palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.  \n\n原题链接 \n思路：  \n首先设置dp变量 cuts[len+1]。  \ncuts[i]表示从第i位置到第len位置（包含，即[i, len])的切割数（第len位置为空, 非空[0, len - 1])  \n初始时，是len - i - 1。比如给的例子aab，cuts[0] = 2，就是最坏情况每一个字符都得切割：a|a|b  \ncuts[1] = 1, 即从i=1位置开始，a|b  \ncuts[2] = 0, 即从i=2位置开始, b  \ncuts[3] = -1,即第len位置，为空字符，不需要切割。\n上面的这个cuts数组是用来帮助算最小cuts的。\n还需要一个dp二维数组matrixs[i][j]表示字符串[i,j]从第i个位置（包含）到第j个位置（包含） 是否是回文。\n如何判断字符串[i,j]是不是回文？\n\nmatrixs[i+1][j-1]是回文且 s.charAt(i) == s.charAt(j)。\n\ni == j（i，j是用一个字符）\n\nj = i + 1（i，j相邻）且s.charAt(i) == s.charAt(j)\n\n\n当字符串[i,j]是回文后，说明从第i个位置到字符串第len位置的最小cut数可以被更新了, 那么就是从j+1位置开始到第len位置的最小cut数加上 [i,j] |cut| [j+1,len - 1]中间的这一个cut，操作＋1。即，Math.min(cuts[i], cuts[j+1]+1)最后返回cuts[0]。即为最终结果。\npublic class Solution {\n    public int minCut(String s) { \n        if (s == null || s.length() == 0 || s.length() == 1) {\n            return 0;\n        }\n\n        int len = s.length();\n        int[] cuts = new int[len + 1];//cut nums from i to len => [i,len]\n        boolean[][] matrix = new boolean[len][len];//record if sub(i,j) is palindrome \n\n        //初始化cuts，从ith位置到len做多要可以切len － i － 1刀\n        //e.g. s = aaaaa len = 5\n        //     cut[0] = len - i - 1 = 4 刀，从0位置开始切最多切4刀\n        //     a | a | a | a | a \n        for (int i = 0; i  j - i = 0; i--) {\n            for (int j = i; j \n"},"dp/pascal-triangle.html":{"url":"dp/pascal-triangle.html","title":"Pascal Triangle","keywords":"","body":"\nPascal's TriangleGiven numRows, generate the first numRows of Pascal's triangle.\n\nFor example, given numRows = 5,\nReturn\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n思路：首先观察一下三角形的生成规律。\n假设我们已经有了Gn-1 ~ Gn-1, 我们想要生成Gn ~ Gn\n那么通过观察我们可以发现如下规则：\nG[n](0) = G[n-1](0)  = 1\nG[n ](n - 1) = G[n - 1](n - 2) = 1\n对于任何i 属于[1, n-2],\nG[n](i) = G[n - 1](i － 1) + G[n - 1](i)。\n完整代码如下：\npublic class Solution {\n    public ArrayList> generate(int numRows) {\n        ArrayList> result = new ArrayList>();\n        if (numRows  temp = new ArrayList();\n            temp.add(1);\n            if (i > 0) {\n                for (int j = 0; j \n相似问题Pascal's Triangle II给定K， 只需要求出第kth行的内容。\npublic class Solution {\n    public ArrayList getRow(int rowIndex) {\n        if (rowIndex = 0; j--) {\n                if (j == 0 || j == i) {\n                    array[j] = 1;\n                }else {\n                    array[j] += array[j - 1];\n                }\n            }\n        }\n\n        //convert result to list \n        ArrayList result = new ArrayList();\n        for (int i = 0 ; i \n"},"dp/set-zero-to-matrix.html":{"url":"dp/set-zero-to-matrix.html","title":"Set Zero to Matrix","keywords":"","body":"\n Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place？ Follow up Did you use extra space? A straight forward solution using O(mn) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution. Could you devise a constant space solution? 原题链接  \n\n思路：using 2 boolean mark if row0 and col0 has 0, then using row0 and col0 as the marker, for other rows and cols. It reduced the extra space O(N + M), very straightforward\npublic class Solution {\n    public void setZeroes(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return;\n        }\n\n        int row = matrix.length;\n        int col = matrix[0].length;\n        boolean hasZeroFirstRow = false;\n        boolean hasZeroFirstCol = false;\n\n        //does first coloumns has zero;\n        for (int i = 0; i  (row, 0) (0, col)\n        for (int i = 1; i \n"},"dp/triangle.html":{"url":"dp/triangle.html","title":"Triangle","keywords":"","body":"\nGiven a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]    \n[\n    [2],\n    [3,4],\n    [6,5,7],\n    [4,1,8,3]\n]\n思路：很典型了一道动态规划题，相当于半个 Matrix DP。拿到这道题，先左对其，然后按照matrix DP 找坐标规律。Matrix DP 的常规套路\nstate： dp[i][j] 表示在从（x,y）到（i，j）位置上的最小和sum的值。\nFunction： 一般Matrix DP 可以从上往下也可以从下往上推，这里我们采用从下往上推   \ndp[i][j] = Math.min(dp[i+1][j], dp[i+1][j+1]) + a[i][j]\n起点：[a.length - 1][a[0].length - 1], 最右边那个点\nAnswer：[0][0]\n常规矩阵DP的解法： \npublic class Solution {\n    public int minimumTotal(List> triangle) {\n        if (triangle == null || triangle.size() == 0) {\n            return 0;\n        }\n        int row = triangle.size();\n        int[][] dp = new int[row][triangle.get(row - 1).size()];\n        //initialize the last row\n        for (int i = 0; i = 0; i--) {\n            for (int j = triangle.get(i).size() - 1; j >= 0; j--) {\n                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) \n                           + triangle.get(i).get(j);\n            }\n        }\n\n        return dp[0][0];\n    }\n}\n\n优化空间到一维DP： 只开最后一列数组用来储存。\npublic class Solution {\n    public int minimumTotal(List> triangle) {\n        if(triangle.size()==1)\n            return triangle.get(0).get(0);\n\n        int[] dp = new int[triangle.size()];\n\n        //initial by last row \n        for (int i = 0; i = 0; i--) {\n            for (int j = 0; j \n最优解，in place，不要额外空间，直接在原矩阵上修改。  \npublic class Solution {\n    public int minimumTotal(List> triangle) {\n        if (triangle == null || triangle.size() == 0) {\n            return 0;\n        }\n\n        int row = triangle.size();\n        for (int i = row - 2; i >= 0; i--) {\n            for (int j = triangle.get(i).size() - 1; j >= 0; j--) {\n                int minSum = Math.min(triangle.get(i + 1).get(j), \n                                      triangle.get(i + 1).get(j + 1)) \n                            + triangle.get(i).get(j);\n                triangle.get(i).set(j, minSum);\n            }\n        }\n\n        return triangle.get(0).get(0);\n    }\n}\n\n"},"dp/wildcard-matching.html":{"url":"dp/wildcard-matching.html","title":"Wild Card Match","keywords":"","body":"\nImplement wildcard pattern matching with support for '?' and '*'. \n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") → false\nisMatch(\"aa\",\"aa\") → true\nisMatch(\"aaa\",\"aa\") → false\nisMatch(\"aa\", \"*\") → true\nisMatch(\"aa\", \"a*\") → true\nisMatch(\"ab\", \"?*\") → true\nisMatch(\"aab\", \"c*a*b\") → false\n思路：一维DP 讲解来自  \n这道题跟Regular Expression Matching一样，还是维护一个假设我们维护一个布尔数组res[i],代表s的前i个字符和p的前j个字符是否匹配(这里因为每次i的结果只依赖于j-1的结果，所以不需要二维数组，只需要一个一维数组来保存上一行结果即可）  \n递推公式分两种情况：  \n\np[j]不是'*'。情况比较简单，只要判断如果当前s的i和p的j上的字符一样（如果有p在j上的字符是'?'，也是相同），并且res[i]==true，则更新res[i+1]为true，否则res[i+1]=false;    \n\np[j]是'*'。因为'*'可以匹配任意字符串，所以在前面的res[i]只要有true，那么剩下的res[i+1], res[i+2],...,res[s.length()]就都是true了。  \n\n\n算法的时间复杂度因为是两层循环，所以是O(m*n), 而空间复杂度只用一个一维数组，所以是O(n)，假设s的长度是n，p的长度是m。  \npublic class Solution {\n    public boolean isMatch(String s, String p) {\n        if(p.length()==0) {\n            return s.length()==0;\n        }\n        if(s.length()>300 && p.charAt(0)=='*' && p.charAt(p.length()-1)=='*') {\n            return false;\n        }\n        boolean[] res = new boolean[s.length()+1];\n        res[0] = true;\n        for(int j=0;j=0;i--)\n                {\n                    res[i+1] = res[i]&&(p.charAt(j)=='?'||s.charAt(i)==p.charAt(j));\n                }\n            }\n            else\n            {\n                int i = 0;\n                while(i\n二维DP代码来自, 还有DFS版 \npublic class Solution {\n    public boolean isMatch(String s, String p) {\n        int count = 0;\n        for(int i = 0; i  s.length()) {\n            return false;\n        }\n\n        boolean dp[][] = new boolean[s.length() + 1][p.length() + 1];\n        dp[0][0] = true;\n        for(int i = 0; i \n"},"misc/two-sum.html":{"url":"misc/two-sum.html","title":"Two Sum","keywords":"","body":"Two Sum Related Summary\n常见题型 \n\n返回下标\n利用HashMap实现O(n) one pass and O(n) space\n\n注意 0/1 based index\n注意下标的前后顺序\n\n\n\n\n/*\n* Overall T/C O(n)\n* Ovarall S/C O(n)\n* Using Set instead of Map when return all combinations\n*/\npublic int[] twoSum(int[] nums, int target) {\n    Map map = new HashMap<>();\n    for (int i = 0; i \n\n返回所有组合 \n利用Two Pointer实现O(n^k-1) time complexity and O(1) space\n\n注意消去重复组合和不必要的遍历\n无关下标顺序，可以排序\n通解，可以延展到K－Sum\n\n\n\n\npublic List> fourSum (int[] nums, int target) {\n    if (nums == null || nums.length > res = new LinkedList>();\n    for (int i = 0; i  0 && nums[i] == nums[i - 1]) continue;//avoid dups\n        for (int j = i + 1; j  i + 1 && nums[j] == nums[j - 1]) continue;//avoid dups\n            //now convert to basic 2Sum\n            int p = j + 1;\n            int q = nums.length - 1;\n            while (p \n"},"misc/valid-number.html":{"url":"misc/valid-number.html","title":"Valid Number","keywords":"","body":"\nValidate if a given string is numeric.\n\nSome examples:\n\"0\" => true\n\" 0.1 \" => true\n\"abc\" => false\n\"1 a\" => false\n\"2e10\" => true\nNote: It is intended for the problem statement to be ambiguous. \nYou should gather all requirements up front before implementing one.\n思路题解来自We start with trimmed string. \n\nIf we see [0-9] we reset the number flags.\nWe can only see '.' If we didn't see 'e' or '.'  \nWe can only see 'e' if we didn't see 'e' but we did see a number. We reset numberAfterE flag.  \nWe can only see '+' and '-' in the beginning and after an 'e'\nany other character break the validation.  \nAt the end it is only valid if there was at least 1 number and if we did see an 'e' then a number after it as well.  \n\nSo basically the number should match this regular expression:\n[-+]?[0-9]*(.[0-9]+)?(e[-+]?[0-9]+)?\npublic boolean isNumber(String s) {\n    String regex = \"[-+]?(\\\\d+\\\\.?|\\\\.\\\\d+)\\\\d*(e[-+]?\\\\d+)?\";  \n    if(s.trim().matches(regex)){  \n        return true;  \n    }\n    return false;\n}\n\n分类讨论，常规解法：\npublic static boolean isNumber(String s) {\n    char[] arr = s.trim().toCharArray();\n\n    boolean dot = false;\n    boolean e = false;\n    boolean num = false;\n    boolean numAfterE = true;//default true for non 'e' case\n    for (int i = 0; i = '0' && arr[i] \n"}}}